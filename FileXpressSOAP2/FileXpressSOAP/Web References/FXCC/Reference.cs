//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace FileXpressSOAP.FXCC {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AdministratorServiceSoapBinding", Namespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(LDAPManagedFieldRemoteException))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Session))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(DirectoryElementList))]
    public partial class AdminServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllLicenseKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback addLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateCFSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCFSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCFSrvConfig1OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllCfServerNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllServerNamesInDeptOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllMonitorServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllServerNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllMonitorNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllNodeNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteExpiredSessionIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteSessionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExpiredSessionIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback listActiveSessionIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addAndReturnUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersInDeptOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersInDept1OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUserIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUserIds1OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveUserIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeExpiredTransfersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllTransfersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllExpiredTransfersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllTransfersForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchTransfersOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeExpiredFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllExpiredFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllFilesForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllRolesForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersInRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersNotInRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserToRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeUserFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllGroupsInDeptOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllGroupsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUsersNotInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllGroupIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeUserFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllConfigsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllAuditsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllAuditsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback addServerCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAuditsOlderThanDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAuditsOlderThanDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateServerCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeServerCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllServerCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchServerCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUserProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCheckpointOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeCheckpointOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchCheckpointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllCheckpointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllCFSrvConfigsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeCFSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAS2SrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAS2SrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAS2SrvConfig1OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllAS2SrvConfigsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAS2SrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateFtpSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFtpSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFtpSrvConfig1OperationCompleted;
        
        private System.Threading.SendOrPostCallback FTPServerStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback FTPServerStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFTPServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllFTPSrvConfigsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeFTPSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllDepartmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTransferToBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTransferInBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTransferFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTransferFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllTransfersFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchFTTransfersOperationCompleted;
        
        private System.Threading.SendOrPostCallback submitTransferToServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addNodeToBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateNodeInBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteNodeFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeFromServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllNodesFromServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addNodeToServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteNodeFromServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDailyStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllNodeFTsFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCollectorRemoteStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback collectorRemoteStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback collectorRemoteStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addProfileToBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateProfileInBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteProfileFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProfileFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllProfilesFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback addProfileToServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteProfileFromServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSearchAuditToBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSearchAuditInBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteSearchAuditFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSearchAuditFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchAuditInServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSshSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSshSrvConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSshSrvConfig1OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllSshSrvConfigsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAlertAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAlertAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllAlertAuditsOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchAlertAuditsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllUserServerKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllPrivateKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllPrivateKeyIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSystemPublicKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateAddKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateUpdateKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPublicSystemKeyByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSHSystemKeyByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDefaultSystemKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCertFromSSHKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateServerStatusConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerStatusConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerStatusConfig1OperationCompleted;
        
        private System.Threading.SendOrPostCallback removeServerStatusConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOnDemandSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOnDemandUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOnDemandSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeOnDemandSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeOnDemandUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOnDemandSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOnDemandUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllOnDemandUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllOnDemandSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchOnDemandSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateJMSConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback testJMSServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateCollectorSrvCfgOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCollectorSrvCfgOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCopyrightInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProductNameVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback addGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllProfilesFromServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllPGPServerNamesInDeptOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllServerNamesInDeptByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllSearchAuditsFromBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAlertAuditsOlderThanDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAlertAuditsOlderThanDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveAllServerStatusConfigsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback addKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getJMSConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConfig1OperationCompleted;
        
        private System.Threading.SendOrPostCallback closeSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback collectorStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback collectorStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCollectorStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchAuditsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback addAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSystemKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback LDAPSyncUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBWSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback addNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AdminServiceService() {
            this.Url = global::FileXpressSOAP.Properties.Settings.Default.FileXpressSOAP_FXCC_AdminServiceService;
            //this.Url = global::FileXpressSOAP.Properties.Settings.Default.FileXpressSOAP_w2008cc_AdminServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getFileCompletedEventHandler getFileCompleted;
        
        /// <remarks/>
        public event getServerCompletedEventHandler getServerCompleted;
        
        /// <remarks/>
        public event getGroupCompletedEventHandler getGroupCompleted;
        
        /// <remarks/>
        public event getRoleCompletedEventHandler getRoleCompleted;
        
        /// <remarks/>
        public event getUserProfileCompletedEventHandler getUserProfileCompleted;
        
        /// <remarks/>
        public event retrieveAllLicenseKeysCompletedEventHandler retrieveAllLicenseKeysCompleted;
        
        /// <remarks/>
        public event addLicenseKeyCompletedEventHandler addLicenseKeyCompleted;
        
        /// <remarks/>
        public event updateLicenseKeyCompletedEventHandler updateLicenseKeyCompleted;
        
        /// <remarks/>
        public event removeLicenseKeyCompletedEventHandler removeLicenseKeyCompleted;
        
        /// <remarks/>
        public event getLicenseKeyCompletedEventHandler getLicenseKeyCompleted;
        
        /// <remarks/>
        public event updateCFSrvConfigCompletedEventHandler updateCFSrvConfigCompleted;
        
        /// <remarks/>
        public event getCFSrvConfigCompletedEventHandler getCFSrvConfigCompleted;
        
        /// <remarks/>
        public event getCFSrvConfig1CompletedEventHandler getCFSrvConfig1Completed;
        
        /// <remarks/>
        public event retrieveAllNodesCompletedEventHandler retrieveAllNodesCompleted;
        
        /// <remarks/>
        public event searchServersCompletedEventHandler searchServersCompleted;
        
        /// <remarks/>
        public event retrieveAllCfServerNamesCompletedEventHandler retrieveAllCfServerNamesCompleted;
        
        /// <remarks/>
        public event retrieveAllServersCompletedEventHandler retrieveAllServersCompleted;
        
        /// <remarks/>
        public event retrieveAllServerNamesInDeptCompletedEventHandler retrieveAllServerNamesInDeptCompleted;
        
        /// <remarks/>
        public event retrieveAllMonitorServersCompletedEventHandler retrieveAllMonitorServersCompleted;
        
        /// <remarks/>
        public event retrieveAllServerNamesCompletedEventHandler retrieveAllServerNamesCompleted;
        
        /// <remarks/>
        public event retrieveAllMonitorNodesCompletedEventHandler retrieveAllMonitorNodesCompleted;
        
        /// <remarks/>
        public event retrieveAllNodeNamesCompletedEventHandler retrieveAllNodeNamesCompleted;
        
        /// <remarks/>
        public event deleteExpiredSessionIdsCompletedEventHandler deleteExpiredSessionIdsCompleted;
        
        /// <remarks/>
        public event deleteSessionIdCompletedEventHandler deleteSessionIdCompleted;
        
        /// <remarks/>
        public event getExpiredSessionIdsCompletedEventHandler getExpiredSessionIdsCompleted;
        
        /// <remarks/>
        public event listActiveSessionIdsCompletedEventHandler listActiveSessionIdsCompleted;
        
        /// <remarks/>
        public event addAndReturnUserCompletedEventHandler addAndReturnUserCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersCompletedEventHandler retrieveAllUsersCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersInDeptCompletedEventHandler retrieveAllUsersInDeptCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersInDept1CompletedEventHandler retrieveAllUsersInDept1Completed;
        
        /// <remarks/>
        public event retrieveAllUserIdsCompletedEventHandler retrieveAllUserIdsCompleted;
        
        /// <remarks/>
        public event retrieveAllUserIds1CompletedEventHandler retrieveAllUserIds1Completed;
        
        /// <remarks/>
        public event retrieveUserIdsCompletedEventHandler retrieveUserIdsCompleted;
        
        /// <remarks/>
        public event getUsersDepartmentCompletedEventHandler getUsersDepartmentCompleted;
        
        /// <remarks/>
        public event updateTransferCompletedEventHandler updateTransferCompleted;
        
        /// <remarks/>
        public event removeTransferCompletedEventHandler removeTransferCompleted;
        
        /// <remarks/>
        public event removeExpiredTransfersCompletedEventHandler removeExpiredTransfersCompleted;
        
        /// <remarks/>
        public event retrieveAllTransfersCompletedEventHandler retrieveAllTransfersCompleted;
        
        /// <remarks/>
        public event retrieveAllExpiredTransfersCompletedEventHandler retrieveAllExpiredTransfersCompleted;
        
        /// <remarks/>
        public event retrieveAllTransfersForUserCompletedEventHandler retrieveAllTransfersForUserCompleted;
        
        /// <remarks/>
        public event searchTransfersCompletedEventHandler searchTransfersCompleted;
        
        /// <remarks/>
        public event removeExpiredFilesCompletedEventHandler removeExpiredFilesCompleted;
        
        /// <remarks/>
        public event retrieveAllFilesCompletedEventHandler retrieveAllFilesCompleted;
        
        /// <remarks/>
        public event retrieveAllExpiredFilesCompletedEventHandler retrieveAllExpiredFilesCompleted;
        
        /// <remarks/>
        public event retrieveAllFilesForUserCompletedEventHandler retrieveAllFilesForUserCompleted;
        
        /// <remarks/>
        public event retrieveAllRolesCompletedEventHandler retrieveAllRolesCompleted;
        
        /// <remarks/>
        public event retrieveAllRolesForUserCompletedEventHandler retrieveAllRolesForUserCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersInRoleCompletedEventHandler retrieveAllUsersInRoleCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersNotInRoleCompletedEventHandler retrieveAllUsersNotInRoleCompleted;
        
        /// <remarks/>
        public event addUserToRoleCompletedEventHandler addUserToRoleCompleted;
        
        /// <remarks/>
        public event removeUserFromRoleCompletedEventHandler removeUserFromRoleCompleted;
        
        /// <remarks/>
        public event retrieveAllGroupsCompletedEventHandler retrieveAllGroupsCompleted;
        
        /// <remarks/>
        public event retrieveAllGroupsInDeptCompletedEventHandler retrieveAllGroupsInDeptCompleted;
        
        /// <remarks/>
        public event retrieveAllGroupsForUserCompletedEventHandler retrieveAllGroupsForUserCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersInGroupCompletedEventHandler retrieveAllUsersInGroupCompleted;
        
        /// <remarks/>
        public event retrieveAllUsersNotInGroupCompletedEventHandler retrieveAllUsersNotInGroupCompleted;
        
        /// <remarks/>
        public event retrieveAllGroupIdsCompletedEventHandler retrieveAllGroupIdsCompleted;
        
        /// <remarks/>
        public event addUserToGroupCompletedEventHandler addUserToGroupCompleted;
        
        /// <remarks/>
        public event removeUserFromGroupCompletedEventHandler removeUserFromGroupCompleted;
        
        /// <remarks/>
        public event retrieveAllConfigsCompletedEventHandler retrieveAllConfigsCompleted;
        
        /// <remarks/>
        public event retrieveAllAuditsCompletedEventHandler retrieveAllAuditsCompleted;
        
        /// <remarks/>
        public event retrieveAllAuditsForUserCompletedEventHandler retrieveAllAuditsForUserCompleted;
        
        /// <remarks/>
        public event addServerCredentialCompletedEventHandler addServerCredentialCompleted;
        
        /// <remarks/>
        public event removeAuditsOlderThanDaysCompletedEventHandler removeAuditsOlderThanDaysCompleted;
        
        /// <remarks/>
        public event removeAuditsOlderThanDateCompletedEventHandler removeAuditsOlderThanDateCompleted;
        
        /// <remarks/>
        public event updateServerCredentialCompletedEventHandler updateServerCredentialCompleted;
        
        /// <remarks/>
        public event removeServerCredentialCompletedEventHandler removeServerCredentialCompleted;
        
        /// <remarks/>
        public event retrieveAllServerCredentialsCompletedEventHandler retrieveAllServerCredentialsCompleted;
        
        /// <remarks/>
        public event getServerCredentialCompletedEventHandler getServerCredentialCompleted;
        
        /// <remarks/>
        public event searchServerCredentialsCompletedEventHandler searchServerCredentialsCompleted;
        
        /// <remarks/>
        public event addUserProfileCompletedEventHandler addUserProfileCompleted;
        
        /// <remarks/>
        public event updateUserProfileCompletedEventHandler updateUserProfileCompleted;
        
        /// <remarks/>
        public event removeUserProfileCompletedEventHandler removeUserProfileCompleted;
        
        /// <remarks/>
        public event retrieveAllUserProfilesCompletedEventHandler retrieveAllUserProfilesCompleted;
        
        /// <remarks/>
        public event searchUserProfileCompletedEventHandler searchUserProfileCompleted;
        
        /// <remarks/>
        public event getCheckpointCompletedEventHandler getCheckpointCompleted;
        
        /// <remarks/>
        public event removeCheckpointCompletedEventHandler removeCheckpointCompleted;
        
        /// <remarks/>
        public event searchCheckpointsCompletedEventHandler searchCheckpointsCompleted;
        
        /// <remarks/>
        public event retrieveAllCheckpointsCompletedEventHandler retrieveAllCheckpointsCompleted;
        
        /// <remarks/>
        public event retrieveAllCFSrvConfigsCompletedEventHandler retrieveAllCFSrvConfigsCompleted;
        
        /// <remarks/>
        public event removeCFSrvConfigCompletedEventHandler removeCFSrvConfigCompleted;
        
        /// <remarks/>
        public event updateAS2SrvConfigCompletedEventHandler updateAS2SrvConfigCompleted;
        
        /// <remarks/>
        public event getAS2SrvConfigCompletedEventHandler getAS2SrvConfigCompleted;
        
        /// <remarks/>
        public event getAS2SrvConfig1CompletedEventHandler getAS2SrvConfig1Completed;
        
        /// <remarks/>
        public event retrieveAllAS2SrvConfigsCompletedEventHandler retrieveAllAS2SrvConfigsCompleted;
        
        /// <remarks/>
        public event removeAS2SrvConfigCompletedEventHandler removeAS2SrvConfigCompleted;
        
        /// <remarks/>
        public event updateFtpSrvConfigCompletedEventHandler updateFtpSrvConfigCompleted;
        
        /// <remarks/>
        public event getFtpSrvConfigCompletedEventHandler getFtpSrvConfigCompleted;
        
        /// <remarks/>
        public event getFtpSrvConfig1CompletedEventHandler getFtpSrvConfig1Completed;
        
        /// <remarks/>
        public event FTPServerStartCompletedEventHandler FTPServerStartCompleted;
        
        /// <remarks/>
        public event FTPServerStopCompletedEventHandler FTPServerStopCompleted;
        
        /// <remarks/>
        public event getFTPServerStatusCompletedEventHandler getFTPServerStatusCompleted;
        
        /// <remarks/>
        public event retrieveAllFTPSrvConfigsCompletedEventHandler retrieveAllFTPSrvConfigsCompleted;
        
        /// <remarks/>
        public event removeFTPSrvConfigCompletedEventHandler removeFTPSrvConfigCompleted;
        
        /// <remarks/>
        public event addDepartmentCompletedEventHandler addDepartmentCompleted;
        
        /// <remarks/>
        public event updateDepartmentCompletedEventHandler updateDepartmentCompleted;
        
        /// <remarks/>
        public event removeDepartmentCompletedEventHandler removeDepartmentCompleted;
        
        /// <remarks/>
        public event retrieveAllDepartmentsCompletedEventHandler retrieveAllDepartmentsCompleted;
        
        /// <remarks/>
        public event addTransferToBankCompletedEventHandler addTransferToBankCompleted;
        
        /// <remarks/>
        public event updateTransferInBankCompletedEventHandler updateTransferInBankCompleted;
        
        /// <remarks/>
        public event deleteTransferFromBankCompletedEventHandler deleteTransferFromBankCompleted;
        
        /// <remarks/>
        public event getTransferFromBankCompletedEventHandler getTransferFromBankCompleted;
        
        /// <remarks/>
        public event retrieveAllTransfersFromBankCompletedEventHandler retrieveAllTransfersFromBankCompleted;
        
        /// <remarks/>
        public event searchFTTransfersCompletedEventHandler searchFTTransfersCompleted;
        
        /// <remarks/>
        public event submitTransferToServerCompletedEventHandler submitTransferToServerCompleted;
        
        /// <remarks/>
        public event addNodeToBankCompletedEventHandler addNodeToBankCompleted;
        
        /// <remarks/>
        public event updateNodeInBankCompletedEventHandler updateNodeInBankCompleted;
        
        /// <remarks/>
        public event deleteNodeFromBankCompletedEventHandler deleteNodeFromBankCompleted;
        
        /// <remarks/>
        public event getNodeFromServerCompletedEventHandler getNodeFromServerCompleted;
        
        /// <remarks/>
        public event retrieveAllNodesFromServerCompletedEventHandler retrieveAllNodesFromServerCompleted;
        
        /// <remarks/>
        public event addNodeToServerCompletedEventHandler addNodeToServerCompleted;
        
        /// <remarks/>
        public event deleteNodeFromServerCompletedEventHandler deleteNodeFromServerCompleted;
        
        /// <remarks/>
        public event getDailyStatisticsCompletedEventHandler getDailyStatisticsCompleted;
        
        /// <remarks/>
        public event retrieveAllNodeFTsFromBankCompletedEventHandler retrieveAllNodeFTsFromBankCompleted;
        
        /// <remarks/>
        public event getNodeFromBankCompletedEventHandler getNodeFromBankCompleted;
        
        /// <remarks/>
        public event getCollectorRemoteStatusCompletedEventHandler getCollectorRemoteStatusCompleted;
        
        /// <remarks/>
        public event collectorRemoteStartCompletedEventHandler collectorRemoteStartCompleted;
        
        /// <remarks/>
        public event collectorRemoteStopCompletedEventHandler collectorRemoteStopCompleted;
        
        /// <remarks/>
        public event retrieveAllAlertsCompletedEventHandler retrieveAllAlertsCompleted;
        
        /// <remarks/>
        public event addProfileToBankCompletedEventHandler addProfileToBankCompleted;
        
        /// <remarks/>
        public event updateProfileInBankCompletedEventHandler updateProfileInBankCompleted;
        
        /// <remarks/>
        public event deleteProfileFromBankCompletedEventHandler deleteProfileFromBankCompleted;
        
        /// <remarks/>
        public event getProfileFromBankCompletedEventHandler getProfileFromBankCompleted;
        
        /// <remarks/>
        public event retrieveAllProfilesFromBankCompletedEventHandler retrieveAllProfilesFromBankCompleted;
        
        /// <remarks/>
        public event addProfileToServerCompletedEventHandler addProfileToServerCompleted;
        
        /// <remarks/>
        public event deleteProfileFromServerCompletedEventHandler deleteProfileFromServerCompleted;
        
        /// <remarks/>
        public event addSearchAuditToBankCompletedEventHandler addSearchAuditToBankCompleted;
        
        /// <remarks/>
        public event updateSearchAuditInBankCompletedEventHandler updateSearchAuditInBankCompleted;
        
        /// <remarks/>
        public event deleteSearchAuditFromBankCompletedEventHandler deleteSearchAuditFromBankCompleted;
        
        /// <remarks/>
        public event getSearchAuditFromBankCompletedEventHandler getSearchAuditFromBankCompleted;
        
        /// <remarks/>
        public event searchAuditInServerCompletedEventHandler searchAuditInServerCompleted;
        
        /// <remarks/>
        public event updateSshSrvConfigCompletedEventHandler updateSshSrvConfigCompleted;
        
        /// <remarks/>
        public event getSshSrvConfigCompletedEventHandler getSshSrvConfigCompleted;
        
        /// <remarks/>
        public event getSshSrvConfig1CompletedEventHandler getSshSrvConfig1Completed;
        
        /// <remarks/>
        public event retrieveAllSshSrvConfigsCompletedEventHandler retrieveAllSshSrvConfigsCompleted;
        
        /// <remarks/>
        public event removeAlertAuditCompletedEventHandler removeAlertAuditCompleted;
        
        /// <remarks/>
        public event getAlertAuditCompletedEventHandler getAlertAuditCompleted;
        
        /// <remarks/>
        public event retrieveAllAlertAuditsCompletedEventHandler retrieveAllAlertAuditsCompleted;
        
        /// <remarks/>
        public event searchAlertAuditsCompletedEventHandler searchAlertAuditsCompleted;
        
        /// <remarks/>
        public event retrieveAllUserServerKeysCompletedEventHandler retrieveAllUserServerKeysCompleted;
        
        /// <remarks/>
        public event retrieveAllPrivateKeysCompletedEventHandler retrieveAllPrivateKeysCompleted;
        
        /// <remarks/>
        public event retrieveAllPrivateKeyIdsCompletedEventHandler retrieveAllPrivateKeyIdsCompleted;
        
        /// <remarks/>
        public event getSystemPublicKeyCompletedEventHandler getSystemPublicKeyCompleted;
        
        /// <remarks/>
        public event validateAddKeyCompletedEventHandler validateAddKeyCompleted;
        
        /// <remarks/>
        public event validateUpdateKeyCompletedEventHandler validateUpdateKeyCompleted;
        
        /// <remarks/>
        public event getPublicSystemKeyByIdCompletedEventHandler getPublicSystemKeyByIdCompleted;
        
        /// <remarks/>
        public event getSSHSystemKeyByIdCompletedEventHandler getSSHSystemKeyByIdCompleted;
        
        /// <remarks/>
        public event setDefaultSystemKeyCompletedEventHandler setDefaultSystemKeyCompleted;
        
        /// <remarks/>
        public event getCertFromSSHKeyCompletedEventHandler getCertFromSSHKeyCompleted;
        
        /// <remarks/>
        public event updateServerStatusConfigCompletedEventHandler updateServerStatusConfigCompleted;
        
        /// <remarks/>
        public event getServerStatusConfigCompletedEventHandler getServerStatusConfigCompleted;
        
        /// <remarks/>
        public event getServerStatusConfig1CompletedEventHandler getServerStatusConfig1Completed;
        
        /// <remarks/>
        public event removeServerStatusConfigCompletedEventHandler removeServerStatusConfigCompleted;
        
        /// <remarks/>
        public event addOnDemandSecurityCompletedEventHandler addOnDemandSecurityCompleted;
        
        /// <remarks/>
        public event addOnDemandUsersCompletedEventHandler addOnDemandUsersCompleted;
        
        /// <remarks/>
        public event updateOnDemandSecurityCompletedEventHandler updateOnDemandSecurityCompleted;
        
        /// <remarks/>
        public event removeOnDemandSecurityCompletedEventHandler removeOnDemandSecurityCompleted;
        
        /// <remarks/>
        public event removeOnDemandUsersCompletedEventHandler removeOnDemandUsersCompleted;
        
        /// <remarks/>
        public event getOnDemandSecurityCompletedEventHandler getOnDemandSecurityCompleted;
        
        /// <remarks/>
        public event getOnDemandUsersCompletedEventHandler getOnDemandUsersCompleted;
        
        /// <remarks/>
        public event retrieveAllOnDemandUsersCompletedEventHandler retrieveAllOnDemandUsersCompleted;
        
        /// <remarks/>
        public event retrieveAllOnDemandSecurityCompletedEventHandler retrieveAllOnDemandSecurityCompleted;
        
        /// <remarks/>
        public event searchOnDemandSecurityCompletedEventHandler searchOnDemandSecurityCompleted;
        
        /// <remarks/>
        public event updateJMSConfigCompletedEventHandler updateJMSConfigCompleted;
        
        /// <remarks/>
        public event testJMSServerCompletedEventHandler testJMSServerCompleted;
        
        /// <remarks/>
        public event updateCollectorSrvCfgCompletedEventHandler updateCollectorSrvCfgCompleted;
        
        /// <remarks/>
        public event getCollectorSrvCfgCompletedEventHandler getCollectorSrvCfgCompleted;
        
        /// <remarks/>
        public event changePasswordCompletedEventHandler changePasswordCompleted;
        
        /// <remarks/>
        public event getCopyrightInfoCompletedEventHandler getCopyrightInfoCompleted;
        
        /// <remarks/>
        public event getProductNameVersionCompletedEventHandler getProductNameVersionCompleted;
        
        /// <remarks/>
        public event validateSessionCompletedEventHandler validateSessionCompleted;
        
        /// <remarks/>
        public event removeUserCompletedEventHandler removeUserCompleted;
        
        /// <remarks/>
        public event removeGroupCompletedEventHandler removeGroupCompleted;
        
        /// <remarks/>
        public event addGroupCompletedEventHandler addGroupCompleted;
        
        /// <remarks/>
        public event getUserCompletedEventHandler getUserCompleted;
        
        /// <remarks/>
        public event getServerStatusCompletedEventHandler getServerStatusCompleted;
        
        /// <remarks/>
        public event getSessionCompletedEventHandler getSessionCompleted;
        
        /// <remarks/>
        public event retrieveAllProfilesFromServerCompletedEventHandler retrieveAllProfilesFromServerCompleted;
        
        /// <remarks/>
        public event retrieveAllPGPServerNamesInDeptCompletedEventHandler retrieveAllPGPServerNamesInDeptCompleted;
        
        /// <remarks/>
        public event retrieveAllServerNamesInDeptByTypeCompletedEventHandler retrieveAllServerNamesInDeptByTypeCompleted;
        
        /// <remarks/>
        public event retrieveAllSearchAuditsFromBankCompletedEventHandler retrieveAllSearchAuditsFromBankCompleted;
        
        /// <remarks/>
        public event removeAlertAuditsOlderThanDateCompletedEventHandler removeAlertAuditsOlderThanDateCompleted;
        
        /// <remarks/>
        public event removeAlertAuditsOlderThanDaysCompletedEventHandler removeAlertAuditsOlderThanDaysCompleted;
        
        /// <remarks/>
        public event retrieveAllServerStatusConfigsCompletedEventHandler retrieveAllServerStatusConfigsCompleted;
        
        /// <remarks/>
        public event removeKeyCompletedEventHandler removeKeyCompleted;
        
        /// <remarks/>
        public event addKeyCompletedEventHandler addKeyCompleted;
        
        /// <remarks/>
        public event getJMSConfigCompletedEventHandler getJMSConfigCompleted;
        
        /// <remarks/>
        public event getConfigCompletedEventHandler getConfigCompleted;
        
        /// <remarks/>
        public event getConfig1CompletedEventHandler getConfig1Completed;
        
        /// <remarks/>
        public event closeSessionCompletedEventHandler closeSessionCompleted;
        
        /// <remarks/>
        public event getDepartmentCompletedEventHandler getDepartmentCompleted;
        
        /// <remarks/>
        public event collectorStartCompletedEventHandler collectorStartCompleted;
        
        /// <remarks/>
        public event collectorStopCompletedEventHandler collectorStopCompleted;
        
        /// <remarks/>
        public event getCollectorStatusCompletedEventHandler getCollectorStatusCompleted;
        
        /// <remarks/>
        public event getNodeCompletedEventHandler getNodeCompleted;
        
        /// <remarks/>
        public event removeNodeCompletedEventHandler removeNodeCompleted;
        
        /// <remarks/>
        public event updateUserCompletedEventHandler updateUserCompleted;
        
        /// <remarks/>
        public event removeServerCompletedEventHandler removeServerCompleted;
        
        /// <remarks/>
        public event addUserCompletedEventHandler addUserCompleted;
        
        /// <remarks/>
        public event getAuditCompletedEventHandler getAuditCompleted;
        
        /// <remarks/>
        public event updateServerCompletedEventHandler updateServerCompleted;
        
        /// <remarks/>
        public event searchUsersCompletedEventHandler searchUsersCompleted;
        
        /// <remarks/>
        public event updateNodeCompletedEventHandler updateNodeCompleted;
        
        /// <remarks/>
        public event searchAuditsCompletedEventHandler searchAuditsCompleted;
        
        /// <remarks/>
        public event addServerCompletedEventHandler addServerCompleted;
        
        /// <remarks/>
        public event removeAuditCompletedEventHandler removeAuditCompleted;
        
        /// <remarks/>
        public event removeConfigCompletedEventHandler removeConfigCompleted;
        
        /// <remarks/>
        public event updateConfigCompletedEventHandler updateConfigCompleted;
        
        /// <remarks/>
        public event updateGroupCompletedEventHandler updateGroupCompleted;
        
        /// <remarks/>
        public event searchFilesCompletedEventHandler searchFilesCompleted;
        
        /// <remarks/>
        public event removeFileCompletedEventHandler removeFileCompleted;
        
        /// <remarks/>
        public event searchNodesCompletedEventHandler searchNodesCompleted;
        
        /// <remarks/>
        public event updateFileCompletedEventHandler updateFileCompleted;
        
        /// <remarks/>
        public event getTransferCompletedEventHandler getTransferCompleted;
        
        /// <remarks/>
        public event addTransferCompletedEventHandler addTransferCompleted;
        
        /// <remarks/>
        public event addAlertCompletedEventHandler addAlertCompleted;
        
        /// <remarks/>
        public event updateAlertCompletedEventHandler updateAlertCompleted;
        
        /// <remarks/>
        public event removeAlertCompletedEventHandler removeAlertCompleted;
        
        /// <remarks/>
        public event getAlertCompletedEventHandler getAlertCompleted;
        
        /// <remarks/>
        public event updateKeyCompletedEventHandler updateKeyCompleted;
        
        /// <remarks/>
        public event getUserKeyCompletedEventHandler getUserKeyCompleted;
        
        /// <remarks/>
        public event getServerKeyCompletedEventHandler getServerKeyCompleted;
        
        /// <remarks/>
        public event getSystemKeyCompletedEventHandler getSystemKeyCompleted;
        
        /// <remarks/>
        public event searchKeysCompletedEventHandler searchKeysCompleted;
        
        /// <remarks/>
        public event LDAPSyncUserCompletedEventHandler LDAPSyncUserCompleted;
        
        /// <remarks/>
        public event getBWSessionCompletedEventHandler getBWSessionCompleted;
        
        /// <remarks/>
        public event addNodeCompletedEventHandler addNodeCompleted;
        
        /// <remarks/>
        public event addFileCompletedEventHandler addFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFileReturn")]
        public FileInfo getFile(string in0, string in1) {
            object[] results = this.Invoke("getFile", new object[] {
                        in0,
                        in1});
            return ((FileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getFileAsync(string in0, string in1) {
            this.getFileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getFileAsync(string in0, string in1, object userState) {
            if ((this.getFileOperationCompleted == null)) {
                this.getFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileOperationCompleted);
            }
            this.InvokeAsync("getFile", new object[] {
                        in0,
                        in1}, this.getFileOperationCompleted, userState);
        }
        
        private void OngetFileOperationCompleted(object arg) {
            if ((this.getFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileCompleted(this, new getFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getServerReturn")]
        public Server getServer(string in0, string in1) {
            object[] results = this.Invoke("getServer", new object[] {
                        in0,
                        in1});
            return ((Server)(results[0]));
        }
        
        /// <remarks/>
        public void getServerAsync(string in0, string in1) {
            this.getServerAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getServerAsync(string in0, string in1, object userState) {
            if ((this.getServerOperationCompleted == null)) {
                this.getServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerOperationCompleted);
            }
            this.InvokeAsync("getServer", new object[] {
                        in0,
                        in1}, this.getServerOperationCompleted, userState);
        }
        
        private void OngetServerOperationCompleted(object arg) {
            if ((this.getServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerCompleted(this, new getServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getGroupReturn")]
        public Role getGroup(string in0, string in1) {
            object[] results = this.Invoke("getGroup", new object[] {
                        in0,
                        in1});
            return ((Role)(results[0]));
        }
        
        /// <remarks/>
        public void getGroupAsync(string in0, string in1) {
            this.getGroupAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getGroupAsync(string in0, string in1, object userState) {
            if ((this.getGroupOperationCompleted == null)) {
                this.getGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupOperationCompleted);
            }
            this.InvokeAsync("getGroup", new object[] {
                        in0,
                        in1}, this.getGroupOperationCompleted, userState);
        }
        
        private void OngetGroupOperationCompleted(object arg) {
            if ((this.getGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupCompleted(this, new getGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getRoleReturn")]
        public Role getRole(string in0, string in1) {
            object[] results = this.Invoke("getRole", new object[] {
                        in0,
                        in1});
            return ((Role)(results[0]));
        }
        
        /// <remarks/>
        public void getRoleAsync(string in0, string in1) {
            this.getRoleAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getRoleAsync(string in0, string in1, object userState) {
            if ((this.getRoleOperationCompleted == null)) {
                this.getRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRoleOperationCompleted);
            }
            this.InvokeAsync("getRole", new object[] {
                        in0,
                        in1}, this.getRoleOperationCompleted, userState);
        }
        
        private void OngetRoleOperationCompleted(object arg) {
            if ((this.getRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRoleCompleted(this, new getRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserProfileReturn")]
        public UserProfile getUserProfile(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("getUserProfile", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((UserProfile)(results[0]));
        }
        
        /// <remarks/>
        public void getUserProfileAsync(string in0, string in1, string in2, string in3) {
            this.getUserProfileAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void getUserProfileAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.getUserProfileOperationCompleted == null)) {
                this.getUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserProfileOperationCompleted);
            }
            this.InvokeAsync("getUserProfile", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.getUserProfileOperationCompleted, userState);
        }
        
        private void OngetUserProfileOperationCompleted(object arg) {
            if ((this.getUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserProfileCompleted(this, new getUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllLicenseKeysReturn")]
        public LicenseKey[] retrieveAllLicenseKeys(string in0) {
            object[] results = this.Invoke("retrieveAllLicenseKeys", new object[] {
                        in0});
            return ((LicenseKey[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllLicenseKeysAsync(string in0) {
            this.retrieveAllLicenseKeysAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllLicenseKeysAsync(string in0, object userState) {
            if ((this.retrieveAllLicenseKeysOperationCompleted == null)) {
                this.retrieveAllLicenseKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllLicenseKeysOperationCompleted);
            }
            this.InvokeAsync("retrieveAllLicenseKeys", new object[] {
                        in0}, this.retrieveAllLicenseKeysOperationCompleted, userState);
        }
        
        private void OnretrieveAllLicenseKeysOperationCompleted(object arg) {
            if ((this.retrieveAllLicenseKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllLicenseKeysCompleted(this, new retrieveAllLicenseKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addLicenseKeyReturn")]
        public bool addLicenseKey(LicenseKey in0, string in1) {
            object[] results = this.Invoke("addLicenseKey", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addLicenseKeyAsync(LicenseKey in0, string in1) {
            this.addLicenseKeyAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addLicenseKeyAsync(LicenseKey in0, string in1, object userState) {
            if ((this.addLicenseKeyOperationCompleted == null)) {
                this.addLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("addLicenseKey", new object[] {
                        in0,
                        in1}, this.addLicenseKeyOperationCompleted, userState);
        }
        
        private void OnaddLicenseKeyOperationCompleted(object arg) {
            if ((this.addLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addLicenseKeyCompleted(this, new addLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateLicenseKeyReturn")]
        public bool updateLicenseKey(LicenseKey in0, string in1) {
            object[] results = this.Invoke("updateLicenseKey", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateLicenseKeyAsync(LicenseKey in0, string in1) {
            this.updateLicenseKeyAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateLicenseKeyAsync(LicenseKey in0, string in1, object userState) {
            if ((this.updateLicenseKeyOperationCompleted == null)) {
                this.updateLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("updateLicenseKey", new object[] {
                        in0,
                        in1}, this.updateLicenseKeyOperationCompleted, userState);
        }
        
        private void OnupdateLicenseKeyOperationCompleted(object arg) {
            if ((this.updateLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateLicenseKeyCompleted(this, new updateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeLicenseKeyReturn")]
        public bool removeLicenseKey(LicenseKey in0, string in1) {
            object[] results = this.Invoke("removeLicenseKey", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeLicenseKeyAsync(LicenseKey in0, string in1) {
            this.removeLicenseKeyAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeLicenseKeyAsync(LicenseKey in0, string in1, object userState) {
            if ((this.removeLicenseKeyOperationCompleted == null)) {
                this.removeLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("removeLicenseKey", new object[] {
                        in0,
                        in1}, this.removeLicenseKeyOperationCompleted, userState);
        }
        
        private void OnremoveLicenseKeyOperationCompleted(object arg) {
            if ((this.removeLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeLicenseKeyCompleted(this, new removeLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getLicenseKeyReturn")]
        public LicenseKey getLicenseKey(LicenseKey in0, string in1) {
            object[] results = this.Invoke("getLicenseKey", new object[] {
                        in0,
                        in1});
            return ((LicenseKey)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseKeyAsync(LicenseKey in0, string in1) {
            this.getLicenseKeyAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getLicenseKeyAsync(LicenseKey in0, string in1, object userState) {
            if ((this.getLicenseKeyOperationCompleted == null)) {
                this.getLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("getLicenseKey", new object[] {
                        in0,
                        in1}, this.getLicenseKeyOperationCompleted, userState);
        }
        
        private void OngetLicenseKeyOperationCompleted(object arg) {
            if ((this.getLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseKeyCompleted(this, new getLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateCFSrvConfigReturn")]
        public bool updateCFSrvConfig(CFServerConfig in0, string in1, string in2) {
            object[] results = this.Invoke("updateCFSrvConfig", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateCFSrvConfigAsync(CFServerConfig in0, string in1, string in2) {
            this.updateCFSrvConfigAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateCFSrvConfigAsync(CFServerConfig in0, string in1, string in2, object userState) {
            if ((this.updateCFSrvConfigOperationCompleted == null)) {
                this.updateCFSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCFSrvConfigOperationCompleted);
            }
            this.InvokeAsync("updateCFSrvConfig", new object[] {
                        in0,
                        in1,
                        in2}, this.updateCFSrvConfigOperationCompleted, userState);
        }
        
        private void OnupdateCFSrvConfigOperationCompleted(object arg) {
            if ((this.updateCFSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCFSrvConfigCompleted(this, new updateCFSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCFSrvConfigReturn")]
        public CFServerConfig getCFSrvConfig(string in0, string in1) {
            object[] results = this.Invoke("getCFSrvConfig", new object[] {
                        in0,
                        in1});
            return ((CFServerConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getCFSrvConfigAsync(string in0, string in1) {
            this.getCFSrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCFSrvConfigAsync(string in0, string in1, object userState) {
            if ((this.getCFSrvConfigOperationCompleted == null)) {
                this.getCFSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCFSrvConfigOperationCompleted);
            }
            this.InvokeAsync("getCFSrvConfig", new object[] {
                        in0,
                        in1}, this.getCFSrvConfigOperationCompleted, userState);
        }
        
        private void OngetCFSrvConfigOperationCompleted(object arg) {
            if ((this.getCFSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCFSrvConfigCompleted(this, new getCFSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getCFSrvConfig1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCFSrvConfigReturn")]
        public CFServerConfig getCFSrvConfig(string in0) {
            object[] results = this.Invoke("getCFSrvConfig1", new object[] {
                        in0});
            return ((CFServerConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getCFSrvConfig1Async(string in0) {
            this.getCFSrvConfig1Async(in0, null);
        }
        
        /// <remarks/>
        public void getCFSrvConfig1Async(string in0, object userState) {
            if ((this.getCFSrvConfig1OperationCompleted == null)) {
                this.getCFSrvConfig1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCFSrvConfig1OperationCompleted);
            }
            this.InvokeAsync("getCFSrvConfig1", new object[] {
                        in0}, this.getCFSrvConfig1OperationCompleted, userState);
        }
        
        private void OngetCFSrvConfig1OperationCompleted(object arg) {
            if ((this.getCFSrvConfig1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCFSrvConfig1Completed(this, new getCFSrvConfig1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllNodesReturn")]
        public Node[] retrieveAllNodes(string in0) {
            object[] results = this.Invoke("retrieveAllNodes", new object[] {
                        in0});
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllNodesAsync(string in0) {
            this.retrieveAllNodesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllNodesAsync(string in0, object userState) {
            if ((this.retrieveAllNodesOperationCompleted == null)) {
                this.retrieveAllNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllNodesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllNodes", new object[] {
                        in0}, this.retrieveAllNodesOperationCompleted, userState);
        }
        
        private void OnretrieveAllNodesOperationCompleted(object arg) {
            if ((this.retrieveAllNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllNodesCompleted(this, new retrieveAllNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchServersReturn")]
        public Server[] searchServers(Server in0, string in1) {
            object[] results = this.Invoke("searchServers", new object[] {
                        in0,
                        in1});
            return ((Server[])(results[0]));
        }
        
        /// <remarks/>
        public void searchServersAsync(Server in0, string in1) {
            this.searchServersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void searchServersAsync(Server in0, string in1, object userState) {
            if ((this.searchServersOperationCompleted == null)) {
                this.searchServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchServersOperationCompleted);
            }
            this.InvokeAsync("searchServers", new object[] {
                        in0,
                        in1}, this.searchServersOperationCompleted, userState);
        }
        
        private void OnsearchServersOperationCompleted(object arg) {
            if ((this.searchServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchServersCompleted(this, new searchServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllCfServerNamesReturn")]
        public string[] retrieveAllCfServerNames(string in0) {
            object[] results = this.Invoke("retrieveAllCfServerNames", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllCfServerNamesAsync(string in0) {
            this.retrieveAllCfServerNamesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllCfServerNamesAsync(string in0, object userState) {
            if ((this.retrieveAllCfServerNamesOperationCompleted == null)) {
                this.retrieveAllCfServerNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllCfServerNamesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllCfServerNames", new object[] {
                        in0}, this.retrieveAllCfServerNamesOperationCompleted, userState);
        }
        
        private void OnretrieveAllCfServerNamesOperationCompleted(object arg) {
            if ((this.retrieveAllCfServerNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllCfServerNamesCompleted(this, new retrieveAllCfServerNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllServersReturn")]
        public Server[] retrieveAllServers(string in0) {
            object[] results = this.Invoke("retrieveAllServers", new object[] {
                        in0});
            return ((Server[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllServersAsync(string in0) {
            this.retrieveAllServersAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllServersAsync(string in0, object userState) {
            if ((this.retrieveAllServersOperationCompleted == null)) {
                this.retrieveAllServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllServersOperationCompleted);
            }
            this.InvokeAsync("retrieveAllServers", new object[] {
                        in0}, this.retrieveAllServersOperationCompleted, userState);
        }
        
        private void OnretrieveAllServersOperationCompleted(object arg) {
            if ((this.retrieveAllServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllServersCompleted(this, new retrieveAllServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllServerNamesInDeptReturn")]
        public string[] retrieveAllServerNamesInDept(string in0) {
            object[] results = this.Invoke("retrieveAllServerNamesInDept", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllServerNamesInDeptAsync(string in0) {
            this.retrieveAllServerNamesInDeptAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllServerNamesInDeptAsync(string in0, object userState) {
            if ((this.retrieveAllServerNamesInDeptOperationCompleted == null)) {
                this.retrieveAllServerNamesInDeptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllServerNamesInDeptOperationCompleted);
            }
            this.InvokeAsync("retrieveAllServerNamesInDept", new object[] {
                        in0}, this.retrieveAllServerNamesInDeptOperationCompleted, userState);
        }
        
        private void OnretrieveAllServerNamesInDeptOperationCompleted(object arg) {
            if ((this.retrieveAllServerNamesInDeptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllServerNamesInDeptCompleted(this, new retrieveAllServerNamesInDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllMonitorServersReturn")]
        public Server[] retrieveAllMonitorServers(string in0) {
            object[] results = this.Invoke("retrieveAllMonitorServers", new object[] {
                        in0});
            return ((Server[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllMonitorServersAsync(string in0) {
            this.retrieveAllMonitorServersAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllMonitorServersAsync(string in0, object userState) {
            if ((this.retrieveAllMonitorServersOperationCompleted == null)) {
                this.retrieveAllMonitorServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllMonitorServersOperationCompleted);
            }
            this.InvokeAsync("retrieveAllMonitorServers", new object[] {
                        in0}, this.retrieveAllMonitorServersOperationCompleted, userState);
        }
        
        private void OnretrieveAllMonitorServersOperationCompleted(object arg) {
            if ((this.retrieveAllMonitorServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllMonitorServersCompleted(this, new retrieveAllMonitorServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllServerNamesReturn")]
        public string[] retrieveAllServerNames(string in0) {
            object[] results = this.Invoke("retrieveAllServerNames", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllServerNamesAsync(string in0) {
            this.retrieveAllServerNamesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllServerNamesAsync(string in0, object userState) {
            if ((this.retrieveAllServerNamesOperationCompleted == null)) {
                this.retrieveAllServerNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllServerNamesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllServerNames", new object[] {
                        in0}, this.retrieveAllServerNamesOperationCompleted, userState);
        }
        
        private void OnretrieveAllServerNamesOperationCompleted(object arg) {
            if ((this.retrieveAllServerNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllServerNamesCompleted(this, new retrieveAllServerNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllMonitorNodesReturn")]
        public Node[] retrieveAllMonitorNodes(string in0) {
            object[] results = this.Invoke("retrieveAllMonitorNodes", new object[] {
                        in0});
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllMonitorNodesAsync(string in0) {
            this.retrieveAllMonitorNodesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllMonitorNodesAsync(string in0, object userState) {
            if ((this.retrieveAllMonitorNodesOperationCompleted == null)) {
                this.retrieveAllMonitorNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllMonitorNodesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllMonitorNodes", new object[] {
                        in0}, this.retrieveAllMonitorNodesOperationCompleted, userState);
        }
        
        private void OnretrieveAllMonitorNodesOperationCompleted(object arg) {
            if ((this.retrieveAllMonitorNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllMonitorNodesCompleted(this, new retrieveAllMonitorNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllNodeNamesReturn")]
        public string[] retrieveAllNodeNames(string in0) {
            object[] results = this.Invoke("retrieveAllNodeNames", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllNodeNamesAsync(string in0) {
            this.retrieveAllNodeNamesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllNodeNamesAsync(string in0, object userState) {
            if ((this.retrieveAllNodeNamesOperationCompleted == null)) {
                this.retrieveAllNodeNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllNodeNamesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllNodeNames", new object[] {
                        in0}, this.retrieveAllNodeNamesOperationCompleted, userState);
        }
        
        private void OnretrieveAllNodeNamesOperationCompleted(object arg) {
            if ((this.retrieveAllNodeNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllNodeNamesCompleted(this, new retrieveAllNodeNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteExpiredSessionIdsReturn")]
        public int deleteExpiredSessionIds(string in0) {
            object[] results = this.Invoke("deleteExpiredSessionIds", new object[] {
                        in0});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteExpiredSessionIdsAsync(string in0) {
            this.deleteExpiredSessionIdsAsync(in0, null);
        }
        
        /// <remarks/>
        public void deleteExpiredSessionIdsAsync(string in0, object userState) {
            if ((this.deleteExpiredSessionIdsOperationCompleted == null)) {
                this.deleteExpiredSessionIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteExpiredSessionIdsOperationCompleted);
            }
            this.InvokeAsync("deleteExpiredSessionIds", new object[] {
                        in0}, this.deleteExpiredSessionIdsOperationCompleted, userState);
        }
        
        private void OndeleteExpiredSessionIdsOperationCompleted(object arg) {
            if ((this.deleteExpiredSessionIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteExpiredSessionIdsCompleted(this, new deleteExpiredSessionIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteSessionIdReturn")]
        public int deleteSessionId(string in0, string in1) {
            object[] results = this.Invoke("deleteSessionId", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteSessionIdAsync(string in0, string in1) {
            this.deleteSessionIdAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteSessionIdAsync(string in0, string in1, object userState) {
            if ((this.deleteSessionIdOperationCompleted == null)) {
                this.deleteSessionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteSessionIdOperationCompleted);
            }
            this.InvokeAsync("deleteSessionId", new object[] {
                        in0,
                        in1}, this.deleteSessionIdOperationCompleted, userState);
        }
        
        private void OndeleteSessionIdOperationCompleted(object arg) {
            if ((this.deleteSessionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteSessionIdCompleted(this, new deleteSessionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getExpiredSessionIdsReturn")]
        public Session[] getExpiredSessionIds(string in0) {
            object[] results = this.Invoke("getExpiredSessionIds", new object[] {
                        in0});
            return ((Session[])(results[0]));
        }
        
        /// <remarks/>
        public void getExpiredSessionIdsAsync(string in0) {
            this.getExpiredSessionIdsAsync(in0, null);
        }
        
        /// <remarks/>
        public void getExpiredSessionIdsAsync(string in0, object userState) {
            if ((this.getExpiredSessionIdsOperationCompleted == null)) {
                this.getExpiredSessionIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExpiredSessionIdsOperationCompleted);
            }
            this.InvokeAsync("getExpiredSessionIds", new object[] {
                        in0}, this.getExpiredSessionIdsOperationCompleted, userState);
        }
        
        private void OngetExpiredSessionIdsOperationCompleted(object arg) {
            if ((this.getExpiredSessionIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExpiredSessionIdsCompleted(this, new getExpiredSessionIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("listActiveSessionIdsReturn")]
        public Session[] listActiveSessionIds(string in0) {
            object[] results = this.Invoke("listActiveSessionIds", new object[] {
                        in0});
            return ((Session[])(results[0]));
        }
        
        /// <remarks/>
        public void listActiveSessionIdsAsync(string in0) {
            this.listActiveSessionIdsAsync(in0, null);
        }
        
        /// <remarks/>
        public void listActiveSessionIdsAsync(string in0, object userState) {
            if ((this.listActiveSessionIdsOperationCompleted == null)) {
                this.listActiveSessionIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistActiveSessionIdsOperationCompleted);
            }
            this.InvokeAsync("listActiveSessionIds", new object[] {
                        in0}, this.listActiveSessionIdsOperationCompleted, userState);
        }
        
        private void OnlistActiveSessionIdsOperationCompleted(object arg) {
            if ((this.listActiveSessionIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listActiveSessionIdsCompleted(this, new listActiveSessionIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addAndReturnUserReturn")]
        public User addAndReturnUser(User in0, string in1) {
            object[] results = this.Invoke("addAndReturnUser", new object[] {
                        in0,
                        in1});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void addAndReturnUserAsync(User in0, string in1) {
            this.addAndReturnUserAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addAndReturnUserAsync(User in0, string in1, object userState) {
            if ((this.addAndReturnUserOperationCompleted == null)) {
                this.addAndReturnUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAndReturnUserOperationCompleted);
            }
            this.InvokeAsync("addAndReturnUser", new object[] {
                        in0,
                        in1}, this.addAndReturnUserOperationCompleted, userState);
        }
        
        private void OnaddAndReturnUserOperationCompleted(object arg) {
            if ((this.addAndReturnUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAndReturnUserCompleted(this, new addAndReturnUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersReturn")]
        public User[] retrieveAllUsers(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUsers", new object[] {
                        in0,
                        in1});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersAsync(string in0, string in1) {
            this.retrieveAllUsersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUsersOperationCompleted == null)) {
                this.retrieveAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsers", new object[] {
                        in0,
                        in1}, this.retrieveAllUsersOperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersOperationCompleted(object arg) {
            if ((this.retrieveAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersCompleted(this, new retrieveAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersInDeptReturn")]
        public User[] retrieveAllUsersInDept(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUsersInDept", new object[] {
                        in0,
                        in1});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersInDeptAsync(string in0, string in1) {
            this.retrieveAllUsersInDeptAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersInDeptAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUsersInDeptOperationCompleted == null)) {
                this.retrieveAllUsersInDeptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersInDeptOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsersInDept", new object[] {
                        in0,
                        in1}, this.retrieveAllUsersInDeptOperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersInDeptOperationCompleted(object arg) {
            if ((this.retrieveAllUsersInDeptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersInDeptCompleted(this, new retrieveAllUsersInDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="retrieveAllUsersInDept1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersInDeptReturn")]
        public User[] retrieveAllUsersInDept(string in0, string in1, string in2) {
            object[] results = this.Invoke("retrieveAllUsersInDept1", new object[] {
                        in0,
                        in1,
                        in2});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersInDept1Async(string in0, string in1, string in2) {
            this.retrieveAllUsersInDept1Async(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersInDept1Async(string in0, string in1, string in2, object userState) {
            if ((this.retrieveAllUsersInDept1OperationCompleted == null)) {
                this.retrieveAllUsersInDept1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersInDept1OperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsersInDept1", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveAllUsersInDept1OperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersInDept1OperationCompleted(object arg) {
            if ((this.retrieveAllUsersInDept1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersInDept1Completed(this, new retrieveAllUsersInDept1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUserIdsReturn")]
        public string[] retrieveAllUserIds(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUserIds", new object[] {
                        in0,
                        in1});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUserIdsAsync(string in0, string in1) {
            this.retrieveAllUserIdsAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUserIdsAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUserIdsOperationCompleted == null)) {
                this.retrieveAllUserIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUserIdsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUserIds", new object[] {
                        in0,
                        in1}, this.retrieveAllUserIdsOperationCompleted, userState);
        }
        
        private void OnretrieveAllUserIdsOperationCompleted(object arg) {
            if ((this.retrieveAllUserIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUserIdsCompleted(this, new retrieveAllUserIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="retrieveAllUserIds1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUserIdsReturn")]
        public string[] retrieveAllUserIds(string in0) {
            object[] results = this.Invoke("retrieveAllUserIds1", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUserIds1Async(string in0) {
            this.retrieveAllUserIds1Async(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllUserIds1Async(string in0, object userState) {
            if ((this.retrieveAllUserIds1OperationCompleted == null)) {
                this.retrieveAllUserIds1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUserIds1OperationCompleted);
            }
            this.InvokeAsync("retrieveAllUserIds1", new object[] {
                        in0}, this.retrieveAllUserIds1OperationCompleted, userState);
        }
        
        private void OnretrieveAllUserIds1OperationCompleted(object arg) {
            if ((this.retrieveAllUserIds1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUserIds1Completed(this, new retrieveAllUserIds1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveUserIdsReturn")]
        public string[] retrieveUserIds(string in0, string[] in1, string in2) {
            object[] results = this.Invoke("retrieveUserIds", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveUserIdsAsync(string in0, string[] in1, string in2) {
            this.retrieveUserIdsAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveUserIdsAsync(string in0, string[] in1, string in2, object userState) {
            if ((this.retrieveUserIdsOperationCompleted == null)) {
                this.retrieveUserIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveUserIdsOperationCompleted);
            }
            this.InvokeAsync("retrieveUserIds", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveUserIdsOperationCompleted, userState);
        }
        
        private void OnretrieveUserIdsOperationCompleted(object arg) {
            if ((this.retrieveUserIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveUserIdsCompleted(this, new retrieveUserIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUsersDepartmentReturn")]
        public string getUsersDepartment(string in0, string in1) {
            object[] results = this.Invoke("getUsersDepartment", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUsersDepartmentAsync(string in0, string in1) {
            this.getUsersDepartmentAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getUsersDepartmentAsync(string in0, string in1, object userState) {
            if ((this.getUsersDepartmentOperationCompleted == null)) {
                this.getUsersDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersDepartmentOperationCompleted);
            }
            this.InvokeAsync("getUsersDepartment", new object[] {
                        in0,
                        in1}, this.getUsersDepartmentOperationCompleted, userState);
        }
        
        private void OngetUsersDepartmentOperationCompleted(object arg) {
            if ((this.getUsersDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersDepartmentCompleted(this, new getUsersDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateTransferReturn")]
        public bool updateTransfer(Transfer in0, string in1, string in2) {
            object[] results = this.Invoke("updateTransfer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateTransferAsync(Transfer in0, string in1, string in2) {
            this.updateTransferAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateTransferAsync(Transfer in0, string in1, string in2, object userState) {
            if ((this.updateTransferOperationCompleted == null)) {
                this.updateTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTransferOperationCompleted);
            }
            this.InvokeAsync("updateTransfer", new object[] {
                        in0,
                        in1,
                        in2}, this.updateTransferOperationCompleted, userState);
        }
        
        private void OnupdateTransferOperationCompleted(object arg) {
            if ((this.updateTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTransferCompleted(this, new updateTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeTransferReturn")]
        public bool removeTransfer(string in0, string in1) {
            object[] results = this.Invoke("removeTransfer", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeTransferAsync(string in0, string in1) {
            this.removeTransferAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeTransferAsync(string in0, string in1, object userState) {
            if ((this.removeTransferOperationCompleted == null)) {
                this.removeTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveTransferOperationCompleted);
            }
            this.InvokeAsync("removeTransfer", new object[] {
                        in0,
                        in1}, this.removeTransferOperationCompleted, userState);
        }
        
        private void OnremoveTransferOperationCompleted(object arg) {
            if ((this.removeTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeTransferCompleted(this, new removeTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeExpiredTransfersReturn")]
        public bool removeExpiredTransfers(string in0) {
            object[] results = this.Invoke("removeExpiredTransfers", new object[] {
                        in0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeExpiredTransfersAsync(string in0) {
            this.removeExpiredTransfersAsync(in0, null);
        }
        
        /// <remarks/>
        public void removeExpiredTransfersAsync(string in0, object userState) {
            if ((this.removeExpiredTransfersOperationCompleted == null)) {
                this.removeExpiredTransfersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveExpiredTransfersOperationCompleted);
            }
            this.InvokeAsync("removeExpiredTransfers", new object[] {
                        in0}, this.removeExpiredTransfersOperationCompleted, userState);
        }
        
        private void OnremoveExpiredTransfersOperationCompleted(object arg) {
            if ((this.removeExpiredTransfersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeExpiredTransfersCompleted(this, new removeExpiredTransfersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllTransfersReturn")]
        public Transfer[] retrieveAllTransfers(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllTransfers", new object[] {
                        in0,
                        in1});
            return ((Transfer[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllTransfersAsync(string in0, string in1) {
            this.retrieveAllTransfersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllTransfersAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllTransfersOperationCompleted == null)) {
                this.retrieveAllTransfersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllTransfersOperationCompleted);
            }
            this.InvokeAsync("retrieveAllTransfers", new object[] {
                        in0,
                        in1}, this.retrieveAllTransfersOperationCompleted, userState);
        }
        
        private void OnretrieveAllTransfersOperationCompleted(object arg) {
            if ((this.retrieveAllTransfersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllTransfersCompleted(this, new retrieveAllTransfersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllExpiredTransfersReturn")]
        public Transfer[] retrieveAllExpiredTransfers(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllExpiredTransfers", new object[] {
                        in0,
                        in1});
            return ((Transfer[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllExpiredTransfersAsync(string in0, string in1) {
            this.retrieveAllExpiredTransfersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllExpiredTransfersAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllExpiredTransfersOperationCompleted == null)) {
                this.retrieveAllExpiredTransfersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllExpiredTransfersOperationCompleted);
            }
            this.InvokeAsync("retrieveAllExpiredTransfers", new object[] {
                        in0,
                        in1}, this.retrieveAllExpiredTransfersOperationCompleted, userState);
        }
        
        private void OnretrieveAllExpiredTransfersOperationCompleted(object arg) {
            if ((this.retrieveAllExpiredTransfersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllExpiredTransfersCompleted(this, new retrieveAllExpiredTransfersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllTransfersForUserReturn")]
        public Transfer[] retrieveAllTransfersForUser(string in0, string in1, string in2) {
            object[] results = this.Invoke("retrieveAllTransfersForUser", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Transfer[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllTransfersForUserAsync(string in0, string in1, string in2) {
            this.retrieveAllTransfersForUserAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveAllTransfersForUserAsync(string in0, string in1, string in2, object userState) {
            if ((this.retrieveAllTransfersForUserOperationCompleted == null)) {
                this.retrieveAllTransfersForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllTransfersForUserOperationCompleted);
            }
            this.InvokeAsync("retrieveAllTransfersForUser", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveAllTransfersForUserOperationCompleted, userState);
        }
        
        private void OnretrieveAllTransfersForUserOperationCompleted(object arg) {
            if ((this.retrieveAllTransfersForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllTransfersForUserCompleted(this, new retrieveAllTransfersForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchTransfersReturn")]
        public Transfer[] searchTransfers(Transfer in0, string in1, string in2) {
            object[] results = this.Invoke("searchTransfers", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Transfer[])(results[0]));
        }
        
        /// <remarks/>
        public void searchTransfersAsync(Transfer in0, string in1, string in2) {
            this.searchTransfersAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void searchTransfersAsync(Transfer in0, string in1, string in2, object userState) {
            if ((this.searchTransfersOperationCompleted == null)) {
                this.searchTransfersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchTransfersOperationCompleted);
            }
            this.InvokeAsync("searchTransfers", new object[] {
                        in0,
                        in1,
                        in2}, this.searchTransfersOperationCompleted, userState);
        }
        
        private void OnsearchTransfersOperationCompleted(object arg) {
            if ((this.searchTransfersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchTransfersCompleted(this, new searchTransfersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeExpiredFilesReturn")]
        public bool removeExpiredFiles(string in0) {
            object[] results = this.Invoke("removeExpiredFiles", new object[] {
                        in0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeExpiredFilesAsync(string in0) {
            this.removeExpiredFilesAsync(in0, null);
        }
        
        /// <remarks/>
        public void removeExpiredFilesAsync(string in0, object userState) {
            if ((this.removeExpiredFilesOperationCompleted == null)) {
                this.removeExpiredFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveExpiredFilesOperationCompleted);
            }
            this.InvokeAsync("removeExpiredFiles", new object[] {
                        in0}, this.removeExpiredFilesOperationCompleted, userState);
        }
        
        private void OnremoveExpiredFilesOperationCompleted(object arg) {
            if ((this.removeExpiredFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeExpiredFilesCompleted(this, new removeExpiredFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllFilesReturn")]
        public FileInfo[] retrieveAllFiles(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllFiles", new object[] {
                        in0,
                        in1});
            return ((FileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllFilesAsync(string in0, string in1) {
            this.retrieveAllFilesAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllFilesAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllFilesOperationCompleted == null)) {
                this.retrieveAllFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllFilesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllFiles", new object[] {
                        in0,
                        in1}, this.retrieveAllFilesOperationCompleted, userState);
        }
        
        private void OnretrieveAllFilesOperationCompleted(object arg) {
            if ((this.retrieveAllFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllFilesCompleted(this, new retrieveAllFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllExpiredFilesReturn")]
        public FileInfo[] retrieveAllExpiredFiles(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllExpiredFiles", new object[] {
                        in0,
                        in1});
            return ((FileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllExpiredFilesAsync(string in0, string in1) {
            this.retrieveAllExpiredFilesAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllExpiredFilesAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllExpiredFilesOperationCompleted == null)) {
                this.retrieveAllExpiredFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllExpiredFilesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllExpiredFiles", new object[] {
                        in0,
                        in1}, this.retrieveAllExpiredFilesOperationCompleted, userState);
        }
        
        private void OnretrieveAllExpiredFilesOperationCompleted(object arg) {
            if ((this.retrieveAllExpiredFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllExpiredFilesCompleted(this, new retrieveAllExpiredFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllFilesForUserReturn")]
        public FileInfo[] retrieveAllFilesForUser(string in0, string in1, string in2) {
            object[] results = this.Invoke("retrieveAllFilesForUser", new object[] {
                        in0,
                        in1,
                        in2});
            return ((FileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllFilesForUserAsync(string in0, string in1, string in2) {
            this.retrieveAllFilesForUserAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveAllFilesForUserAsync(string in0, string in1, string in2, object userState) {
            if ((this.retrieveAllFilesForUserOperationCompleted == null)) {
                this.retrieveAllFilesForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllFilesForUserOperationCompleted);
            }
            this.InvokeAsync("retrieveAllFilesForUser", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveAllFilesForUserOperationCompleted, userState);
        }
        
        private void OnretrieveAllFilesForUserOperationCompleted(object arg) {
            if ((this.retrieveAllFilesForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllFilesForUserCompleted(this, new retrieveAllFilesForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllRolesReturn")]
        public Role[] retrieveAllRoles(string in0) {
            object[] results = this.Invoke("retrieveAllRoles", new object[] {
                        in0});
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllRolesAsync(string in0) {
            this.retrieveAllRolesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllRolesAsync(string in0, object userState) {
            if ((this.retrieveAllRolesOperationCompleted == null)) {
                this.retrieveAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllRolesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllRoles", new object[] {
                        in0}, this.retrieveAllRolesOperationCompleted, userState);
        }
        
        private void OnretrieveAllRolesOperationCompleted(object arg) {
            if ((this.retrieveAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllRolesCompleted(this, new retrieveAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllRolesForUserReturn")]
        public Role[] retrieveAllRolesForUser(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllRolesForUser", new object[] {
                        in0,
                        in1});
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllRolesForUserAsync(string in0, string in1) {
            this.retrieveAllRolesForUserAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllRolesForUserAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllRolesForUserOperationCompleted == null)) {
                this.retrieveAllRolesForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllRolesForUserOperationCompleted);
            }
            this.InvokeAsync("retrieveAllRolesForUser", new object[] {
                        in0,
                        in1}, this.retrieveAllRolesForUserOperationCompleted, userState);
        }
        
        private void OnretrieveAllRolesForUserOperationCompleted(object arg) {
            if ((this.retrieveAllRolesForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllRolesForUserCompleted(this, new retrieveAllRolesForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersInRoleReturn")]
        public User[] retrieveAllUsersInRole(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUsersInRole", new object[] {
                        in0,
                        in1});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersInRoleAsync(string in0, string in1) {
            this.retrieveAllUsersInRoleAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersInRoleAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUsersInRoleOperationCompleted == null)) {
                this.retrieveAllUsersInRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersInRoleOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsersInRole", new object[] {
                        in0,
                        in1}, this.retrieveAllUsersInRoleOperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersInRoleOperationCompleted(object arg) {
            if ((this.retrieveAllUsersInRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersInRoleCompleted(this, new retrieveAllUsersInRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersNotInRoleReturn")]
        public User[] retrieveAllUsersNotInRole(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUsersNotInRole", new object[] {
                        in0,
                        in1});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersNotInRoleAsync(string in0, string in1) {
            this.retrieveAllUsersNotInRoleAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersNotInRoleAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUsersNotInRoleOperationCompleted == null)) {
                this.retrieveAllUsersNotInRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersNotInRoleOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsersNotInRole", new object[] {
                        in0,
                        in1}, this.retrieveAllUsersNotInRoleOperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersNotInRoleOperationCompleted(object arg) {
            if ((this.retrieveAllUsersNotInRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersNotInRoleCompleted(this, new retrieveAllUsersNotInRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addUserToRoleReturn")]
        public bool addUserToRole(string in0, string in1, string in2) {
            object[] results = this.Invoke("addUserToRole", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addUserToRoleAsync(string in0, string in1, string in2) {
            this.addUserToRoleAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void addUserToRoleAsync(string in0, string in1, string in2, object userState) {
            if ((this.addUserToRoleOperationCompleted == null)) {
                this.addUserToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserToRoleOperationCompleted);
            }
            this.InvokeAsync("addUserToRole", new object[] {
                        in0,
                        in1,
                        in2}, this.addUserToRoleOperationCompleted, userState);
        }
        
        private void OnaddUserToRoleOperationCompleted(object arg) {
            if ((this.addUserToRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserToRoleCompleted(this, new addUserToRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeUserFromRoleReturn")]
        public bool removeUserFromRole(string in0, string in1, string in2) {
            object[] results = this.Invoke("removeUserFromRole", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeUserFromRoleAsync(string in0, string in1, string in2) {
            this.removeUserFromRoleAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeUserFromRoleAsync(string in0, string in1, string in2, object userState) {
            if ((this.removeUserFromRoleOperationCompleted == null)) {
                this.removeUserFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveUserFromRoleOperationCompleted);
            }
            this.InvokeAsync("removeUserFromRole", new object[] {
                        in0,
                        in1,
                        in2}, this.removeUserFromRoleOperationCompleted, userState);
        }
        
        private void OnremoveUserFromRoleOperationCompleted(object arg) {
            if ((this.removeUserFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeUserFromRoleCompleted(this, new removeUserFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllGroupsReturn")]
        public Role[] retrieveAllGroups(string in0) {
            object[] results = this.Invoke("retrieveAllGroups", new object[] {
                        in0});
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllGroupsAsync(string in0) {
            this.retrieveAllGroupsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllGroupsAsync(string in0, object userState) {
            if ((this.retrieveAllGroupsOperationCompleted == null)) {
                this.retrieveAllGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllGroupsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllGroups", new object[] {
                        in0}, this.retrieveAllGroupsOperationCompleted, userState);
        }
        
        private void OnretrieveAllGroupsOperationCompleted(object arg) {
            if ((this.retrieveAllGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllGroupsCompleted(this, new retrieveAllGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllGroupsInDeptReturn")]
        public Role[] retrieveAllGroupsInDept(string in0) {
            object[] results = this.Invoke("retrieveAllGroupsInDept", new object[] {
                        in0});
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllGroupsInDeptAsync(string in0) {
            this.retrieveAllGroupsInDeptAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllGroupsInDeptAsync(string in0, object userState) {
            if ((this.retrieveAllGroupsInDeptOperationCompleted == null)) {
                this.retrieveAllGroupsInDeptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllGroupsInDeptOperationCompleted);
            }
            this.InvokeAsync("retrieveAllGroupsInDept", new object[] {
                        in0}, this.retrieveAllGroupsInDeptOperationCompleted, userState);
        }
        
        private void OnretrieveAllGroupsInDeptOperationCompleted(object arg) {
            if ((this.retrieveAllGroupsInDeptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllGroupsInDeptCompleted(this, new retrieveAllGroupsInDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllGroupsForUserReturn")]
        public Role[] retrieveAllGroupsForUser(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllGroupsForUser", new object[] {
                        in0,
                        in1});
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllGroupsForUserAsync(string in0, string in1) {
            this.retrieveAllGroupsForUserAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllGroupsForUserAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllGroupsForUserOperationCompleted == null)) {
                this.retrieveAllGroupsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllGroupsForUserOperationCompleted);
            }
            this.InvokeAsync("retrieveAllGroupsForUser", new object[] {
                        in0,
                        in1}, this.retrieveAllGroupsForUserOperationCompleted, userState);
        }
        
        private void OnretrieveAllGroupsForUserOperationCompleted(object arg) {
            if ((this.retrieveAllGroupsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllGroupsForUserCompleted(this, new retrieveAllGroupsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersInGroupReturn")]
        public User[] retrieveAllUsersInGroup(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUsersInGroup", new object[] {
                        in0,
                        in1});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersInGroupAsync(string in0, string in1) {
            this.retrieveAllUsersInGroupAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersInGroupAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUsersInGroupOperationCompleted == null)) {
                this.retrieveAllUsersInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersInGroupOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsersInGroup", new object[] {
                        in0,
                        in1}, this.retrieveAllUsersInGroupOperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersInGroupOperationCompleted(object arg) {
            if ((this.retrieveAllUsersInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersInGroupCompleted(this, new retrieveAllUsersInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUsersNotInGroupReturn")]
        public User[] retrieveAllUsersNotInGroup(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllUsersNotInGroup", new object[] {
                        in0,
                        in1});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUsersNotInGroupAsync(string in0, string in1) {
            this.retrieveAllUsersNotInGroupAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllUsersNotInGroupAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllUsersNotInGroupOperationCompleted == null)) {
                this.retrieveAllUsersNotInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUsersNotInGroupOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUsersNotInGroup", new object[] {
                        in0,
                        in1}, this.retrieveAllUsersNotInGroupOperationCompleted, userState);
        }
        
        private void OnretrieveAllUsersNotInGroupOperationCompleted(object arg) {
            if ((this.retrieveAllUsersNotInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUsersNotInGroupCompleted(this, new retrieveAllUsersNotInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllGroupIdsReturn")]
        public string[] retrieveAllGroupIds(string in0) {
            object[] results = this.Invoke("retrieveAllGroupIds", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllGroupIdsAsync(string in0) {
            this.retrieveAllGroupIdsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllGroupIdsAsync(string in0, object userState) {
            if ((this.retrieveAllGroupIdsOperationCompleted == null)) {
                this.retrieveAllGroupIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllGroupIdsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllGroupIds", new object[] {
                        in0}, this.retrieveAllGroupIdsOperationCompleted, userState);
        }
        
        private void OnretrieveAllGroupIdsOperationCompleted(object arg) {
            if ((this.retrieveAllGroupIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllGroupIdsCompleted(this, new retrieveAllGroupIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addUserToGroupReturn")]
        public bool addUserToGroup(string in0, string in1, string in2) {
            object[] results = this.Invoke("addUserToGroup", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addUserToGroupAsync(string in0, string in1, string in2) {
            this.addUserToGroupAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void addUserToGroupAsync(string in0, string in1, string in2, object userState) {
            if ((this.addUserToGroupOperationCompleted == null)) {
                this.addUserToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserToGroupOperationCompleted);
            }
            this.InvokeAsync("addUserToGroup", new object[] {
                        in0,
                        in1,
                        in2}, this.addUserToGroupOperationCompleted, userState);
        }
        
        private void OnaddUserToGroupOperationCompleted(object arg) {
            if ((this.addUserToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserToGroupCompleted(this, new addUserToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeUserFromGroupReturn")]
        public bool removeUserFromGroup(string in0, string in1, string in2) {
            object[] results = this.Invoke("removeUserFromGroup", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeUserFromGroupAsync(string in0, string in1, string in2) {
            this.removeUserFromGroupAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeUserFromGroupAsync(string in0, string in1, string in2, object userState) {
            if ((this.removeUserFromGroupOperationCompleted == null)) {
                this.removeUserFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveUserFromGroupOperationCompleted);
            }
            this.InvokeAsync("removeUserFromGroup", new object[] {
                        in0,
                        in1,
                        in2}, this.removeUserFromGroupOperationCompleted, userState);
        }
        
        private void OnremoveUserFromGroupOperationCompleted(object arg) {
            if ((this.removeUserFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeUserFromGroupCompleted(this, new removeUserFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllConfigsReturn")]
        public Config[] retrieveAllConfigs(string in0) {
            object[] results = this.Invoke("retrieveAllConfigs", new object[] {
                        in0});
            return ((Config[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllConfigsAsync(string in0) {
            this.retrieveAllConfigsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllConfigsAsync(string in0, object userState) {
            if ((this.retrieveAllConfigsOperationCompleted == null)) {
                this.retrieveAllConfigsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllConfigsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllConfigs", new object[] {
                        in0}, this.retrieveAllConfigsOperationCompleted, userState);
        }
        
        private void OnretrieveAllConfigsOperationCompleted(object arg) {
            if ((this.retrieveAllConfigsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllConfigsCompleted(this, new retrieveAllConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllAuditsReturn")]
        public AuditBase[] retrieveAllAudits(string in0, string in1, string in2) {
            object[] results = this.Invoke("retrieveAllAudits", new object[] {
                        in0,
                        in1,
                        in2});
            return ((AuditBase[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllAuditsAsync(string in0, string in1, string in2) {
            this.retrieveAllAuditsAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveAllAuditsAsync(string in0, string in1, string in2, object userState) {
            if ((this.retrieveAllAuditsOperationCompleted == null)) {
                this.retrieveAllAuditsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllAuditsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllAudits", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveAllAuditsOperationCompleted, userState);
        }
        
        private void OnretrieveAllAuditsOperationCompleted(object arg) {
            if ((this.retrieveAllAuditsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllAuditsCompleted(this, new retrieveAllAuditsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllAuditsForUserReturn")]
        public AuditBase[] retrieveAllAuditsForUser(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("retrieveAllAuditsForUser", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((AuditBase[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllAuditsForUserAsync(string in0, string in1, string in2, string in3) {
            this.retrieveAllAuditsForUserAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void retrieveAllAuditsForUserAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.retrieveAllAuditsForUserOperationCompleted == null)) {
                this.retrieveAllAuditsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllAuditsForUserOperationCompleted);
            }
            this.InvokeAsync("retrieveAllAuditsForUser", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.retrieveAllAuditsForUserOperationCompleted, userState);
        }
        
        private void OnretrieveAllAuditsForUserOperationCompleted(object arg) {
            if ((this.retrieveAllAuditsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllAuditsForUserCompleted(this, new retrieveAllAuditsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addServerCredentialReturn")]
        public bool addServerCredential(ServerCredentials in0, string in1) {
            object[] results = this.Invoke("addServerCredential", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addServerCredentialAsync(ServerCredentials in0, string in1) {
            this.addServerCredentialAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addServerCredentialAsync(ServerCredentials in0, string in1, object userState) {
            if ((this.addServerCredentialOperationCompleted == null)) {
                this.addServerCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddServerCredentialOperationCompleted);
            }
            this.InvokeAsync("addServerCredential", new object[] {
                        in0,
                        in1}, this.addServerCredentialOperationCompleted, userState);
        }
        
        private void OnaddServerCredentialOperationCompleted(object arg) {
            if ((this.addServerCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addServerCredentialCompleted(this, new addServerCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAuditsOlderThanDaysReturn")]
        public bool removeAuditsOlderThanDays(int in0, int in1, string in2) {
            object[] results = this.Invoke("removeAuditsOlderThanDays", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAuditsOlderThanDaysAsync(int in0, int in1, string in2) {
            this.removeAuditsOlderThanDaysAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeAuditsOlderThanDaysAsync(int in0, int in1, string in2, object userState) {
            if ((this.removeAuditsOlderThanDaysOperationCompleted == null)) {
                this.removeAuditsOlderThanDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAuditsOlderThanDaysOperationCompleted);
            }
            this.InvokeAsync("removeAuditsOlderThanDays", new object[] {
                        in0,
                        in1,
                        in2}, this.removeAuditsOlderThanDaysOperationCompleted, userState);
        }
        
        private void OnremoveAuditsOlderThanDaysOperationCompleted(object arg) {
            if ((this.removeAuditsOlderThanDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAuditsOlderThanDaysCompleted(this, new removeAuditsOlderThanDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAuditsOlderThanDateReturn")]
        public bool removeAuditsOlderThanDate(DateTime in0, int in1, string in2) {
            object[] results = this.Invoke("removeAuditsOlderThanDate", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAuditsOlderThanDateAsync(DateTime in0, int in1, string in2) {
            this.removeAuditsOlderThanDateAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeAuditsOlderThanDateAsync(DateTime in0, int in1, string in2, object userState) {
            if ((this.removeAuditsOlderThanDateOperationCompleted == null)) {
                this.removeAuditsOlderThanDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAuditsOlderThanDateOperationCompleted);
            }
            this.InvokeAsync("removeAuditsOlderThanDate", new object[] {
                        in0,
                        in1,
                        in2}, this.removeAuditsOlderThanDateOperationCompleted, userState);
        }
        
        private void OnremoveAuditsOlderThanDateOperationCompleted(object arg) {
            if ((this.removeAuditsOlderThanDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAuditsOlderThanDateCompleted(this, new removeAuditsOlderThanDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateServerCredentialReturn")]
        public bool updateServerCredential(ServerCredentials in0, string in1) {
            object[] results = this.Invoke("updateServerCredential", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateServerCredentialAsync(ServerCredentials in0, string in1) {
            this.updateServerCredentialAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateServerCredentialAsync(ServerCredentials in0, string in1, object userState) {
            if ((this.updateServerCredentialOperationCompleted == null)) {
                this.updateServerCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateServerCredentialOperationCompleted);
            }
            this.InvokeAsync("updateServerCredential", new object[] {
                        in0,
                        in1}, this.updateServerCredentialOperationCompleted, userState);
        }
        
        private void OnupdateServerCredentialOperationCompleted(object arg) {
            if ((this.updateServerCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateServerCredentialCompleted(this, new updateServerCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeServerCredentialReturn")]
        public bool removeServerCredential(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("removeServerCredential", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeServerCredentialAsync(string in0, string in1, string in2, string in3) {
            this.removeServerCredentialAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void removeServerCredentialAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.removeServerCredentialOperationCompleted == null)) {
                this.removeServerCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveServerCredentialOperationCompleted);
            }
            this.InvokeAsync("removeServerCredential", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.removeServerCredentialOperationCompleted, userState);
        }
        
        private void OnremoveServerCredentialOperationCompleted(object arg) {
            if ((this.removeServerCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeServerCredentialCompleted(this, new removeServerCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllServerCredentialsReturn")]
        public ServerCredentials[] retrieveAllServerCredentials(string in0) {
            object[] results = this.Invoke("retrieveAllServerCredentials", new object[] {
                        in0});
            return ((ServerCredentials[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllServerCredentialsAsync(string in0) {
            this.retrieveAllServerCredentialsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllServerCredentialsAsync(string in0, object userState) {
            if ((this.retrieveAllServerCredentialsOperationCompleted == null)) {
                this.retrieveAllServerCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllServerCredentialsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllServerCredentials", new object[] {
                        in0}, this.retrieveAllServerCredentialsOperationCompleted, userState);
        }
        
        private void OnretrieveAllServerCredentialsOperationCompleted(object arg) {
            if ((this.retrieveAllServerCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllServerCredentialsCompleted(this, new retrieveAllServerCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getServerCredentialReturn")]
        public ServerCredentials getServerCredential(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("getServerCredential", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((ServerCredentials)(results[0]));
        }
        
        /// <remarks/>
        public void getServerCredentialAsync(string in0, string in1, string in2, string in3) {
            this.getServerCredentialAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void getServerCredentialAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.getServerCredentialOperationCompleted == null)) {
                this.getServerCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerCredentialOperationCompleted);
            }
            this.InvokeAsync("getServerCredential", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.getServerCredentialOperationCompleted, userState);
        }
        
        private void OngetServerCredentialOperationCompleted(object arg) {
            if ((this.getServerCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerCredentialCompleted(this, new getServerCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchServerCredentialsReturn")]
        public ServerCredentials[] searchServerCredentials(ServerCredentials in0, string in1) {
            object[] results = this.Invoke("searchServerCredentials", new object[] {
                        in0,
                        in1});
            return ((ServerCredentials[])(results[0]));
        }
        
        /// <remarks/>
        public void searchServerCredentialsAsync(ServerCredentials in0, string in1) {
            this.searchServerCredentialsAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void searchServerCredentialsAsync(ServerCredentials in0, string in1, object userState) {
            if ((this.searchServerCredentialsOperationCompleted == null)) {
                this.searchServerCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchServerCredentialsOperationCompleted);
            }
            this.InvokeAsync("searchServerCredentials", new object[] {
                        in0,
                        in1}, this.searchServerCredentialsOperationCompleted, userState);
        }
        
        private void OnsearchServerCredentialsOperationCompleted(object arg) {
            if ((this.searchServerCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchServerCredentialsCompleted(this, new searchServerCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addUserProfileReturn")]
        public bool addUserProfile(UserProfile in0, string in1) {
            object[] results = this.Invoke("addUserProfile", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addUserProfileAsync(UserProfile in0, string in1) {
            this.addUserProfileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addUserProfileAsync(UserProfile in0, string in1, object userState) {
            if ((this.addUserProfileOperationCompleted == null)) {
                this.addUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserProfileOperationCompleted);
            }
            this.InvokeAsync("addUserProfile", new object[] {
                        in0,
                        in1}, this.addUserProfileOperationCompleted, userState);
        }
        
        private void OnaddUserProfileOperationCompleted(object arg) {
            if ((this.addUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserProfileCompleted(this, new addUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateUserProfileReturn")]
        public bool updateUserProfile(UserProfile in0, string in1) {
            object[] results = this.Invoke("updateUserProfile", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateUserProfileAsync(UserProfile in0, string in1) {
            this.updateUserProfileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateUserProfileAsync(UserProfile in0, string in1, object userState) {
            if ((this.updateUserProfileOperationCompleted == null)) {
                this.updateUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUserProfileOperationCompleted);
            }
            this.InvokeAsync("updateUserProfile", new object[] {
                        in0,
                        in1}, this.updateUserProfileOperationCompleted, userState);
        }
        
        private void OnupdateUserProfileOperationCompleted(object arg) {
            if ((this.updateUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUserProfileCompleted(this, new updateUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeUserProfileReturn")]
        public bool removeUserProfile(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("removeUserProfile", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeUserProfileAsync(string in0, string in1, string in2, string in3) {
            this.removeUserProfileAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void removeUserProfileAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.removeUserProfileOperationCompleted == null)) {
                this.removeUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveUserProfileOperationCompleted);
            }
            this.InvokeAsync("removeUserProfile", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.removeUserProfileOperationCompleted, userState);
        }
        
        private void OnremoveUserProfileOperationCompleted(object arg) {
            if ((this.removeUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeUserProfileCompleted(this, new removeUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUserProfilesReturn")]
        public UserProfile[] retrieveAllUserProfiles(string in0) {
            object[] results = this.Invoke("retrieveAllUserProfiles", new object[] {
                        in0});
            return ((UserProfile[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUserProfilesAsync(string in0) {
            this.retrieveAllUserProfilesAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllUserProfilesAsync(string in0, object userState) {
            if ((this.retrieveAllUserProfilesOperationCompleted == null)) {
                this.retrieveAllUserProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUserProfilesOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUserProfiles", new object[] {
                        in0}, this.retrieveAllUserProfilesOperationCompleted, userState);
        }
        
        private void OnretrieveAllUserProfilesOperationCompleted(object arg) {
            if ((this.retrieveAllUserProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUserProfilesCompleted(this, new retrieveAllUserProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchUserProfileReturn")]
        public UserProfile[] searchUserProfile(UserProfile in0, string in1) {
            object[] results = this.Invoke("searchUserProfile", new object[] {
                        in0,
                        in1});
            return ((UserProfile[])(results[0]));
        }
        
        /// <remarks/>
        public void searchUserProfileAsync(UserProfile in0, string in1) {
            this.searchUserProfileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void searchUserProfileAsync(UserProfile in0, string in1, object userState) {
            if ((this.searchUserProfileOperationCompleted == null)) {
                this.searchUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchUserProfileOperationCompleted);
            }
            this.InvokeAsync("searchUserProfile", new object[] {
                        in0,
                        in1}, this.searchUserProfileOperationCompleted, userState);
        }
        
        private void OnsearchUserProfileOperationCompleted(object arg) {
            if ((this.searchUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchUserProfileCompleted(this, new searchUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCheckpointReturn")]
        public Checkpoint getCheckpoint(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("getCheckpoint", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((Checkpoint)(results[0]));
        }
        
        /// <remarks/>
        public void getCheckpointAsync(string in0, string in1, string in2, string in3) {
            this.getCheckpointAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void getCheckpointAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.getCheckpointOperationCompleted == null)) {
                this.getCheckpointOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCheckpointOperationCompleted);
            }
            this.InvokeAsync("getCheckpoint", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.getCheckpointOperationCompleted, userState);
        }
        
        private void OngetCheckpointOperationCompleted(object arg) {
            if ((this.getCheckpointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCheckpointCompleted(this, new getCheckpointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeCheckpointReturn")]
        public bool removeCheckpoint(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("removeCheckpoint", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeCheckpointAsync(string in0, string in1, string in2, string in3) {
            this.removeCheckpointAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void removeCheckpointAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.removeCheckpointOperationCompleted == null)) {
                this.removeCheckpointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveCheckpointOperationCompleted);
            }
            this.InvokeAsync("removeCheckpoint", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.removeCheckpointOperationCompleted, userState);
        }
        
        private void OnremoveCheckpointOperationCompleted(object arg) {
            if ((this.removeCheckpointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeCheckpointCompleted(this, new removeCheckpointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchCheckpointsReturn")]
        public Checkpoint[] searchCheckpoints(Checkpoint in0, string in1) {
            object[] results = this.Invoke("searchCheckpoints", new object[] {
                        in0,
                        in1});
            return ((Checkpoint[])(results[0]));
        }
        
        /// <remarks/>
        public void searchCheckpointsAsync(Checkpoint in0, string in1) {
            this.searchCheckpointsAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void searchCheckpointsAsync(Checkpoint in0, string in1, object userState) {
            if ((this.searchCheckpointsOperationCompleted == null)) {
                this.searchCheckpointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchCheckpointsOperationCompleted);
            }
            this.InvokeAsync("searchCheckpoints", new object[] {
                        in0,
                        in1}, this.searchCheckpointsOperationCompleted, userState);
        }
        
        private void OnsearchCheckpointsOperationCompleted(object arg) {
            if ((this.searchCheckpointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchCheckpointsCompleted(this, new searchCheckpointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllCheckpointsReturn")]
        public Checkpoint[] retrieveAllCheckpoints(string in0) {
            object[] results = this.Invoke("retrieveAllCheckpoints", new object[] {
                        in0});
            return ((Checkpoint[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllCheckpointsAsync(string in0) {
            this.retrieveAllCheckpointsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllCheckpointsAsync(string in0, object userState) {
            if ((this.retrieveAllCheckpointsOperationCompleted == null)) {
                this.retrieveAllCheckpointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllCheckpointsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllCheckpoints", new object[] {
                        in0}, this.retrieveAllCheckpointsOperationCompleted, userState);
        }
        
        private void OnretrieveAllCheckpointsOperationCompleted(object arg) {
            if ((this.retrieveAllCheckpointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllCheckpointsCompleted(this, new retrieveAllCheckpointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllCFSrvConfigsReturn")]
        public CFServerConfig[] retrieveAllCFSrvConfigs(string in0) {
            object[] results = this.Invoke("retrieveAllCFSrvConfigs", new object[] {
                        in0});
            return ((CFServerConfig[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllCFSrvConfigsAsync(string in0) {
            this.retrieveAllCFSrvConfigsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllCFSrvConfigsAsync(string in0, object userState) {
            if ((this.retrieveAllCFSrvConfigsOperationCompleted == null)) {
                this.retrieveAllCFSrvConfigsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllCFSrvConfigsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllCFSrvConfigs", new object[] {
                        in0}, this.retrieveAllCFSrvConfigsOperationCompleted, userState);
        }
        
        private void OnretrieveAllCFSrvConfigsOperationCompleted(object arg) {
            if ((this.retrieveAllCFSrvConfigsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllCFSrvConfigsCompleted(this, new retrieveAllCFSrvConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeCFSrvConfigReturn")]
        public bool removeCFSrvConfig(string in0, string in1) {
            object[] results = this.Invoke("removeCFSrvConfig", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeCFSrvConfigAsync(string in0, string in1) {
            this.removeCFSrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeCFSrvConfigAsync(string in0, string in1, object userState) {
            if ((this.removeCFSrvConfigOperationCompleted == null)) {
                this.removeCFSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveCFSrvConfigOperationCompleted);
            }
            this.InvokeAsync("removeCFSrvConfig", new object[] {
                        in0,
                        in1}, this.removeCFSrvConfigOperationCompleted, userState);
        }
        
        private void OnremoveCFSrvConfigOperationCompleted(object arg) {
            if ((this.removeCFSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeCFSrvConfigCompleted(this, new removeCFSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateAS2SrvConfigReturn")]
        public bool updateAS2SrvConfig(AS2SrvCfg in0, string in1, string in2) {
            object[] results = this.Invoke("updateAS2SrvConfig", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateAS2SrvConfigAsync(AS2SrvCfg in0, string in1, string in2) {
            this.updateAS2SrvConfigAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateAS2SrvConfigAsync(AS2SrvCfg in0, string in1, string in2, object userState) {
            if ((this.updateAS2SrvConfigOperationCompleted == null)) {
                this.updateAS2SrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAS2SrvConfigOperationCompleted);
            }
            this.InvokeAsync("updateAS2SrvConfig", new object[] {
                        in0,
                        in1,
                        in2}, this.updateAS2SrvConfigOperationCompleted, userState);
        }
        
        private void OnupdateAS2SrvConfigOperationCompleted(object arg) {
            if ((this.updateAS2SrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAS2SrvConfigCompleted(this, new updateAS2SrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAS2SrvConfigReturn")]
        public AS2SrvCfg getAS2SrvConfig(string in0, string in1) {
            object[] results = this.Invoke("getAS2SrvConfig", new object[] {
                        in0,
                        in1});
            return ((AS2SrvCfg)(results[0]));
        }
        
        /// <remarks/>
        public void getAS2SrvConfigAsync(string in0, string in1) {
            this.getAS2SrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getAS2SrvConfigAsync(string in0, string in1, object userState) {
            if ((this.getAS2SrvConfigOperationCompleted == null)) {
                this.getAS2SrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAS2SrvConfigOperationCompleted);
            }
            this.InvokeAsync("getAS2SrvConfig", new object[] {
                        in0,
                        in1}, this.getAS2SrvConfigOperationCompleted, userState);
        }
        
        private void OngetAS2SrvConfigOperationCompleted(object arg) {
            if ((this.getAS2SrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAS2SrvConfigCompleted(this, new getAS2SrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getAS2SrvConfig1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAS2SrvConfigReturn")]
        public AS2SrvCfg getAS2SrvConfig(string in0) {
            object[] results = this.Invoke("getAS2SrvConfig1", new object[] {
                        in0});
            return ((AS2SrvCfg)(results[0]));
        }
        
        /// <remarks/>
        public void getAS2SrvConfig1Async(string in0) {
            this.getAS2SrvConfig1Async(in0, null);
        }
        
        /// <remarks/>
        public void getAS2SrvConfig1Async(string in0, object userState) {
            if ((this.getAS2SrvConfig1OperationCompleted == null)) {
                this.getAS2SrvConfig1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAS2SrvConfig1OperationCompleted);
            }
            this.InvokeAsync("getAS2SrvConfig1", new object[] {
                        in0}, this.getAS2SrvConfig1OperationCompleted, userState);
        }
        
        private void OngetAS2SrvConfig1OperationCompleted(object arg) {
            if ((this.getAS2SrvConfig1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAS2SrvConfig1Completed(this, new getAS2SrvConfig1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllAS2SrvConfigsReturn")]
        public AS2SrvCfg[] retrieveAllAS2SrvConfigs(string in0) {
            object[] results = this.Invoke("retrieveAllAS2SrvConfigs", new object[] {
                        in0});
            return ((AS2SrvCfg[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllAS2SrvConfigsAsync(string in0) {
            this.retrieveAllAS2SrvConfigsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllAS2SrvConfigsAsync(string in0, object userState) {
            if ((this.retrieveAllAS2SrvConfigsOperationCompleted == null)) {
                this.retrieveAllAS2SrvConfigsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllAS2SrvConfigsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllAS2SrvConfigs", new object[] {
                        in0}, this.retrieveAllAS2SrvConfigsOperationCompleted, userState);
        }
        
        private void OnretrieveAllAS2SrvConfigsOperationCompleted(object arg) {
            if ((this.retrieveAllAS2SrvConfigsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllAS2SrvConfigsCompleted(this, new retrieveAllAS2SrvConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAS2SrvConfigReturn")]
        public bool removeAS2SrvConfig(string in0, string in1) {
            object[] results = this.Invoke("removeAS2SrvConfig", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAS2SrvConfigAsync(string in0, string in1) {
            this.removeAS2SrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeAS2SrvConfigAsync(string in0, string in1, object userState) {
            if ((this.removeAS2SrvConfigOperationCompleted == null)) {
                this.removeAS2SrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAS2SrvConfigOperationCompleted);
            }
            this.InvokeAsync("removeAS2SrvConfig", new object[] {
                        in0,
                        in1}, this.removeAS2SrvConfigOperationCompleted, userState);
        }
        
        private void OnremoveAS2SrvConfigOperationCompleted(object arg) {
            if ((this.removeAS2SrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAS2SrvConfigCompleted(this, new removeAS2SrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateFtpSrvConfigReturn")]
        public bool updateFtpSrvConfig(FTPServerConfig in0, string in1, string in2) {
            object[] results = this.Invoke("updateFtpSrvConfig", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateFtpSrvConfigAsync(FTPServerConfig in0, string in1, string in2) {
            this.updateFtpSrvConfigAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateFtpSrvConfigAsync(FTPServerConfig in0, string in1, string in2, object userState) {
            if ((this.updateFtpSrvConfigOperationCompleted == null)) {
                this.updateFtpSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateFtpSrvConfigOperationCompleted);
            }
            this.InvokeAsync("updateFtpSrvConfig", new object[] {
                        in0,
                        in1,
                        in2}, this.updateFtpSrvConfigOperationCompleted, userState);
        }
        
        private void OnupdateFtpSrvConfigOperationCompleted(object arg) {
            if ((this.updateFtpSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateFtpSrvConfigCompleted(this, new updateFtpSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFtpSrvConfigReturn")]
        public FTPServerConfig getFtpSrvConfig(string in0, string in1) {
            object[] results = this.Invoke("getFtpSrvConfig", new object[] {
                        in0,
                        in1});
            return ((FTPServerConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getFtpSrvConfigAsync(string in0, string in1) {
            this.getFtpSrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getFtpSrvConfigAsync(string in0, string in1, object userState) {
            if ((this.getFtpSrvConfigOperationCompleted == null)) {
                this.getFtpSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFtpSrvConfigOperationCompleted);
            }
            this.InvokeAsync("getFtpSrvConfig", new object[] {
                        in0,
                        in1}, this.getFtpSrvConfigOperationCompleted, userState);
        }
        
        private void OngetFtpSrvConfigOperationCompleted(object arg) {
            if ((this.getFtpSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFtpSrvConfigCompleted(this, new getFtpSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getFtpSrvConfig1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFtpSrvConfigReturn")]
        public FTPServerConfig getFtpSrvConfig(string in0) {
            object[] results = this.Invoke("getFtpSrvConfig1", new object[] {
                        in0});
            return ((FTPServerConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getFtpSrvConfig1Async(string in0) {
            this.getFtpSrvConfig1Async(in0, null);
        }
        
        /// <remarks/>
        public void getFtpSrvConfig1Async(string in0, object userState) {
            if ((this.getFtpSrvConfig1OperationCompleted == null)) {
                this.getFtpSrvConfig1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFtpSrvConfig1OperationCompleted);
            }
            this.InvokeAsync("getFtpSrvConfig1", new object[] {
                        in0}, this.getFtpSrvConfig1OperationCompleted, userState);
        }
        
        private void OngetFtpSrvConfig1OperationCompleted(object arg) {
            if ((this.getFtpSrvConfig1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFtpSrvConfig1Completed(this, new getFtpSrvConfig1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("FTPServerStartReturn")]
        public string FTPServerStart(string in0) {
            object[] results = this.Invoke("FTPServerStart", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FTPServerStartAsync(string in0) {
            this.FTPServerStartAsync(in0, null);
        }
        
        /// <remarks/>
        public void FTPServerStartAsync(string in0, object userState) {
            if ((this.FTPServerStartOperationCompleted == null)) {
                this.FTPServerStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFTPServerStartOperationCompleted);
            }
            this.InvokeAsync("FTPServerStart", new object[] {
                        in0}, this.FTPServerStartOperationCompleted, userState);
        }
        
        private void OnFTPServerStartOperationCompleted(object arg) {
            if ((this.FTPServerStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FTPServerStartCompleted(this, new FTPServerStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("FTPServerStopReturn")]
        public string FTPServerStop(string in0) {
            object[] results = this.Invoke("FTPServerStop", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FTPServerStopAsync(string in0) {
            this.FTPServerStopAsync(in0, null);
        }
        
        /// <remarks/>
        public void FTPServerStopAsync(string in0, object userState) {
            if ((this.FTPServerStopOperationCompleted == null)) {
                this.FTPServerStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFTPServerStopOperationCompleted);
            }
            this.InvokeAsync("FTPServerStop", new object[] {
                        in0}, this.FTPServerStopOperationCompleted, userState);
        }
        
        private void OnFTPServerStopOperationCompleted(object arg) {
            if ((this.FTPServerStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FTPServerStopCompleted(this, new FTPServerStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFTPServerStatusReturn")]
        public string getFTPServerStatus(string in0) {
            object[] results = this.Invoke("getFTPServerStatus", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFTPServerStatusAsync(string in0) {
            this.getFTPServerStatusAsync(in0, null);
        }
        
        /// <remarks/>
        public void getFTPServerStatusAsync(string in0, object userState) {
            if ((this.getFTPServerStatusOperationCompleted == null)) {
                this.getFTPServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFTPServerStatusOperationCompleted);
            }
            this.InvokeAsync("getFTPServerStatus", new object[] {
                        in0}, this.getFTPServerStatusOperationCompleted, userState);
        }
        
        private void OngetFTPServerStatusOperationCompleted(object arg) {
            if ((this.getFTPServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFTPServerStatusCompleted(this, new getFTPServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllFTPSrvConfigsReturn")]
        public FTPServerConfig[] retrieveAllFTPSrvConfigs(string in0) {
            object[] results = this.Invoke("retrieveAllFTPSrvConfigs", new object[] {
                        in0});
            return ((FTPServerConfig[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllFTPSrvConfigsAsync(string in0) {
            this.retrieveAllFTPSrvConfigsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllFTPSrvConfigsAsync(string in0, object userState) {
            if ((this.retrieveAllFTPSrvConfigsOperationCompleted == null)) {
                this.retrieveAllFTPSrvConfigsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllFTPSrvConfigsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllFTPSrvConfigs", new object[] {
                        in0}, this.retrieveAllFTPSrvConfigsOperationCompleted, userState);
        }
        
        private void OnretrieveAllFTPSrvConfigsOperationCompleted(object arg) {
            if ((this.retrieveAllFTPSrvConfigsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllFTPSrvConfigsCompleted(this, new retrieveAllFTPSrvConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeFTPSrvConfigReturn")]
        public bool removeFTPSrvConfig(string in0, string in1) {
            object[] results = this.Invoke("removeFTPSrvConfig", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeFTPSrvConfigAsync(string in0, string in1) {
            this.removeFTPSrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeFTPSrvConfigAsync(string in0, string in1, object userState) {
            if ((this.removeFTPSrvConfigOperationCompleted == null)) {
                this.removeFTPSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveFTPSrvConfigOperationCompleted);
            }
            this.InvokeAsync("removeFTPSrvConfig", new object[] {
                        in0,
                        in1}, this.removeFTPSrvConfigOperationCompleted, userState);
        }
        
        private void OnremoveFTPSrvConfigOperationCompleted(object arg) {
            if ((this.removeFTPSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeFTPSrvConfigCompleted(this, new removeFTPSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addDepartmentReturn")]
        public bool addDepartment(Department in0, string in1) {
            object[] results = this.Invoke("addDepartment", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addDepartmentAsync(Department in0, string in1) {
            this.addDepartmentAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addDepartmentAsync(Department in0, string in1, object userState) {
            if ((this.addDepartmentOperationCompleted == null)) {
                this.addDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDepartmentOperationCompleted);
            }
            this.InvokeAsync("addDepartment", new object[] {
                        in0,
                        in1}, this.addDepartmentOperationCompleted, userState);
        }
        
        private void OnaddDepartmentOperationCompleted(object arg) {
            if ((this.addDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDepartmentCompleted(this, new addDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateDepartmentReturn")]
        public bool updateDepartment(Department in0, string in1, string in2) {
            object[] results = this.Invoke("updateDepartment", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateDepartmentAsync(Department in0, string in1, string in2) {
            this.updateDepartmentAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateDepartmentAsync(Department in0, string in1, string in2, object userState) {
            if ((this.updateDepartmentOperationCompleted == null)) {
                this.updateDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDepartmentOperationCompleted);
            }
            this.InvokeAsync("updateDepartment", new object[] {
                        in0,
                        in1,
                        in2}, this.updateDepartmentOperationCompleted, userState);
        }
        
        private void OnupdateDepartmentOperationCompleted(object arg) {
            if ((this.updateDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDepartmentCompleted(this, new updateDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeDepartmentReturn")]
        public bool removeDepartment(string in0, string in1) {
            object[] results = this.Invoke("removeDepartment", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeDepartmentAsync(string in0, string in1) {
            this.removeDepartmentAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeDepartmentAsync(string in0, string in1, object userState) {
            if ((this.removeDepartmentOperationCompleted == null)) {
                this.removeDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveDepartmentOperationCompleted);
            }
            this.InvokeAsync("removeDepartment", new object[] {
                        in0,
                        in1}, this.removeDepartmentOperationCompleted, userState);
        }
        
        private void OnremoveDepartmentOperationCompleted(object arg) {
            if ((this.removeDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeDepartmentCompleted(this, new removeDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllDepartmentsReturn")]
        public Department[] retrieveAllDepartments(string in0) {
            object[] results = this.Invoke("retrieveAllDepartments", new object[] {
                        in0});
            return ((Department[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllDepartmentsAsync(string in0) {
            this.retrieveAllDepartmentsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllDepartmentsAsync(string in0, object userState) {
            if ((this.retrieveAllDepartmentsOperationCompleted == null)) {
                this.retrieveAllDepartmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllDepartmentsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllDepartments", new object[] {
                        in0}, this.retrieveAllDepartmentsOperationCompleted, userState);
        }
        
        private void OnretrieveAllDepartmentsOperationCompleted(object arg) {
            if ((this.retrieveAllDepartmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllDepartmentsCompleted(this, new retrieveAllDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addTransferToBankReturn")]
        public string addTransferToBank(FTTransfer in0, string in1) {
            object[] results = this.Invoke("addTransferToBank", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addTransferToBankAsync(FTTransfer in0, string in1) {
            this.addTransferToBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addTransferToBankAsync(FTTransfer in0, string in1, object userState) {
            if ((this.addTransferToBankOperationCompleted == null)) {
                this.addTransferToBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTransferToBankOperationCompleted);
            }
            this.InvokeAsync("addTransferToBank", new object[] {
                        in0,
                        in1}, this.addTransferToBankOperationCompleted, userState);
        }
        
        private void OnaddTransferToBankOperationCompleted(object arg) {
            if ((this.addTransferToBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTransferToBankCompleted(this, new addTransferToBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateTransferInBankReturn")]
        public bool updateTransferInBank(FTTransfer in0, string in1) {
            object[] results = this.Invoke("updateTransferInBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateTransferInBankAsync(FTTransfer in0, string in1) {
            this.updateTransferInBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateTransferInBankAsync(FTTransfer in0, string in1, object userState) {
            if ((this.updateTransferInBankOperationCompleted == null)) {
                this.updateTransferInBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTransferInBankOperationCompleted);
            }
            this.InvokeAsync("updateTransferInBank", new object[] {
                        in0,
                        in1}, this.updateTransferInBankOperationCompleted, userState);
        }
        
        private void OnupdateTransferInBankOperationCompleted(object arg) {
            if ((this.updateTransferInBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTransferInBankCompleted(this, new updateTransferInBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteTransferFromBankReturn")]
        public bool deleteTransferFromBank(FTTransfer in0, string in1) {
            object[] results = this.Invoke("deleteTransferFromBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTransferFromBankAsync(FTTransfer in0, string in1) {
            this.deleteTransferFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteTransferFromBankAsync(FTTransfer in0, string in1, object userState) {
            if ((this.deleteTransferFromBankOperationCompleted == null)) {
                this.deleteTransferFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTransferFromBankOperationCompleted);
            }
            this.InvokeAsync("deleteTransferFromBank", new object[] {
                        in0,
                        in1}, this.deleteTransferFromBankOperationCompleted, userState);
        }
        
        private void OndeleteTransferFromBankOperationCompleted(object arg) {
            if ((this.deleteTransferFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTransferFromBankCompleted(this, new deleteTransferFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getTransferFromBankReturn")]
        public FTTransfer getTransferFromBank(FTTransfer in0, string in1) {
            object[] results = this.Invoke("getTransferFromBank", new object[] {
                        in0,
                        in1});
            return ((FTTransfer)(results[0]));
        }
        
        /// <remarks/>
        public void getTransferFromBankAsync(FTTransfer in0, string in1) {
            this.getTransferFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getTransferFromBankAsync(FTTransfer in0, string in1, object userState) {
            if ((this.getTransferFromBankOperationCompleted == null)) {
                this.getTransferFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransferFromBankOperationCompleted);
            }
            this.InvokeAsync("getTransferFromBank", new object[] {
                        in0,
                        in1}, this.getTransferFromBankOperationCompleted, userState);
        }
        
        private void OngetTransferFromBankOperationCompleted(object arg) {
            if ((this.getTransferFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransferFromBankCompleted(this, new getTransferFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllTransfersFromBankReturn")]
        public FTTransfer[] retrieveAllTransfersFromBank(string in0) {
            object[] results = this.Invoke("retrieveAllTransfersFromBank", new object[] {
                        in0});
            return ((FTTransfer[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllTransfersFromBankAsync(string in0) {
            this.retrieveAllTransfersFromBankAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllTransfersFromBankAsync(string in0, object userState) {
            if ((this.retrieveAllTransfersFromBankOperationCompleted == null)) {
                this.retrieveAllTransfersFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllTransfersFromBankOperationCompleted);
            }
            this.InvokeAsync("retrieveAllTransfersFromBank", new object[] {
                        in0}, this.retrieveAllTransfersFromBankOperationCompleted, userState);
        }
        
        private void OnretrieveAllTransfersFromBankOperationCompleted(object arg) {
            if ((this.retrieveAllTransfersFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllTransfersFromBankCompleted(this, new retrieveAllTransfersFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchFTTransfersReturn")]
        public FTTransfer[] searchFTTransfers(FTTransfer in0, string in1) {
            object[] results = this.Invoke("searchFTTransfers", new object[] {
                        in0,
                        in1});
            return ((FTTransfer[])(results[0]));
        }
        
        /// <remarks/>
        public void searchFTTransfersAsync(FTTransfer in0, string in1) {
            this.searchFTTransfersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void searchFTTransfersAsync(FTTransfer in0, string in1, object userState) {
            if ((this.searchFTTransfersOperationCompleted == null)) {
                this.searchFTTransfersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchFTTransfersOperationCompleted);
            }
            this.InvokeAsync("searchFTTransfers", new object[] {
                        in0,
                        in1}, this.searchFTTransfersOperationCompleted, userState);
        }
        
        private void OnsearchFTTransfersOperationCompleted(object arg) {
            if ((this.searchFTTransfersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchFTTransfersCompleted(this, new searchFTTransfersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("submitTransferToServerReturn")]
        public string submitTransferToServer(FTTransfer in0, string in1) {
            object[] results = this.Invoke("submitTransferToServer", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void submitTransferToServerAsync(FTTransfer in0, string in1) {
            this.submitTransferToServerAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void submitTransferToServerAsync(FTTransfer in0, string in1, object userState) {
            if ((this.submitTransferToServerOperationCompleted == null)) {
                this.submitTransferToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubmitTransferToServerOperationCompleted);
            }
            this.InvokeAsync("submitTransferToServer", new object[] {
                        in0,
                        in1}, this.submitTransferToServerOperationCompleted, userState);
        }
        
        private void OnsubmitTransferToServerOperationCompleted(object arg) {
            if ((this.submitTransferToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.submitTransferToServerCompleted(this, new submitTransferToServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addNodeToBankReturn")]
        public string addNodeToBank(NodeFT in0, string in1) {
            object[] results = this.Invoke("addNodeToBank", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addNodeToBankAsync(NodeFT in0, string in1) {
            this.addNodeToBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addNodeToBankAsync(NodeFT in0, string in1, object userState) {
            if ((this.addNodeToBankOperationCompleted == null)) {
                this.addNodeToBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddNodeToBankOperationCompleted);
            }
            this.InvokeAsync("addNodeToBank", new object[] {
                        in0,
                        in1}, this.addNodeToBankOperationCompleted, userState);
        }
        
        private void OnaddNodeToBankOperationCompleted(object arg) {
            if ((this.addNodeToBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addNodeToBankCompleted(this, new addNodeToBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateNodeInBankReturn")]
        public bool updateNodeInBank(NodeFT in0, string in1) {
            object[] results = this.Invoke("updateNodeInBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateNodeInBankAsync(NodeFT in0, string in1) {
            this.updateNodeInBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateNodeInBankAsync(NodeFT in0, string in1, object userState) {
            if ((this.updateNodeInBankOperationCompleted == null)) {
                this.updateNodeInBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateNodeInBankOperationCompleted);
            }
            this.InvokeAsync("updateNodeInBank", new object[] {
                        in0,
                        in1}, this.updateNodeInBankOperationCompleted, userState);
        }
        
        private void OnupdateNodeInBankOperationCompleted(object arg) {
            if ((this.updateNodeInBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateNodeInBankCompleted(this, new updateNodeInBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteNodeFromBankReturn")]
        public bool deleteNodeFromBank(NodeFT in0, string in1) {
            object[] results = this.Invoke("deleteNodeFromBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteNodeFromBankAsync(NodeFT in0, string in1) {
            this.deleteNodeFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteNodeFromBankAsync(NodeFT in0, string in1, object userState) {
            if ((this.deleteNodeFromBankOperationCompleted == null)) {
                this.deleteNodeFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteNodeFromBankOperationCompleted);
            }
            this.InvokeAsync("deleteNodeFromBank", new object[] {
                        in0,
                        in1}, this.deleteNodeFromBankOperationCompleted, userState);
        }
        
        private void OndeleteNodeFromBankOperationCompleted(object arg) {
            if ((this.deleteNodeFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteNodeFromBankCompleted(this, new deleteNodeFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getNodeFromServerReturn")]
        public NodeFT getNodeFromServer(string in0, Server in1, string in2) {
            object[] results = this.Invoke("getNodeFromServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((NodeFT)(results[0]));
        }
        
        /// <remarks/>
        public void getNodeFromServerAsync(string in0, Server in1, string in2) {
            this.getNodeFromServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getNodeFromServerAsync(string in0, Server in1, string in2, object userState) {
            if ((this.getNodeFromServerOperationCompleted == null)) {
                this.getNodeFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeFromServerOperationCompleted);
            }
            this.InvokeAsync("getNodeFromServer", new object[] {
                        in0,
                        in1,
                        in2}, this.getNodeFromServerOperationCompleted, userState);
        }
        
        private void OngetNodeFromServerOperationCompleted(object arg) {
            if ((this.getNodeFromServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeFromServerCompleted(this, new getNodeFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllNodesFromServerReturn")]
        public NodeFT[] retrieveAllNodesFromServer(Server in0, string in1) {
            object[] results = this.Invoke("retrieveAllNodesFromServer", new object[] {
                        in0,
                        in1});
            return ((NodeFT[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllNodesFromServerAsync(Server in0, string in1) {
            this.retrieveAllNodesFromServerAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllNodesFromServerAsync(Server in0, string in1, object userState) {
            if ((this.retrieveAllNodesFromServerOperationCompleted == null)) {
                this.retrieveAllNodesFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllNodesFromServerOperationCompleted);
            }
            this.InvokeAsync("retrieveAllNodesFromServer", new object[] {
                        in0,
                        in1}, this.retrieveAllNodesFromServerOperationCompleted, userState);
        }
        
        private void OnretrieveAllNodesFromServerOperationCompleted(object arg) {
            if ((this.retrieveAllNodesFromServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllNodesFromServerCompleted(this, new retrieveAllNodesFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addNodeToServerReturn")]
        public bool addNodeToServer(NodeFT in0, Server in1, string in2) {
            object[] results = this.Invoke("addNodeToServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addNodeToServerAsync(NodeFT in0, Server in1, string in2) {
            this.addNodeToServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void addNodeToServerAsync(NodeFT in0, Server in1, string in2, object userState) {
            if ((this.addNodeToServerOperationCompleted == null)) {
                this.addNodeToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddNodeToServerOperationCompleted);
            }
            this.InvokeAsync("addNodeToServer", new object[] {
                        in0,
                        in1,
                        in2}, this.addNodeToServerOperationCompleted, userState);
        }
        
        private void OnaddNodeToServerOperationCompleted(object arg) {
            if ((this.addNodeToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addNodeToServerCompleted(this, new addNodeToServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteNodeFromServerReturn")]
        public bool deleteNodeFromServer(NodeFT in0, Server in1, string in2) {
            object[] results = this.Invoke("deleteNodeFromServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteNodeFromServerAsync(NodeFT in0, Server in1, string in2) {
            this.deleteNodeFromServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void deleteNodeFromServerAsync(NodeFT in0, Server in1, string in2, object userState) {
            if ((this.deleteNodeFromServerOperationCompleted == null)) {
                this.deleteNodeFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteNodeFromServerOperationCompleted);
            }
            this.InvokeAsync("deleteNodeFromServer", new object[] {
                        in0,
                        in1,
                        in2}, this.deleteNodeFromServerOperationCompleted, userState);
        }
        
        private void OndeleteNodeFromServerOperationCompleted(object arg) {
            if ((this.deleteNodeFromServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteNodeFromServerCompleted(this, new deleteNodeFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDailyStatisticsReturn")]
        public DailyStatistics getDailyStatistics(string in0) {
            object[] results = this.Invoke("getDailyStatistics", new object[] {
                        in0});
            return ((DailyStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void getDailyStatisticsAsync(string in0) {
            this.getDailyStatisticsAsync(in0, null);
        }
        
        /// <remarks/>
        public void getDailyStatisticsAsync(string in0, object userState) {
            if ((this.getDailyStatisticsOperationCompleted == null)) {
                this.getDailyStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDailyStatisticsOperationCompleted);
            }
            this.InvokeAsync("getDailyStatistics", new object[] {
                        in0}, this.getDailyStatisticsOperationCompleted, userState);
        }
        
        private void OngetDailyStatisticsOperationCompleted(object arg) {
            if ((this.getDailyStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDailyStatisticsCompleted(this, new getDailyStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllNodeFTsFromBankReturn")]
        public NodeFT[] retrieveAllNodeFTsFromBank(string in0) {
            object[] results = this.Invoke("retrieveAllNodeFTsFromBank", new object[] {
                        in0});
            return ((NodeFT[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllNodeFTsFromBankAsync(string in0) {
            this.retrieveAllNodeFTsFromBankAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllNodeFTsFromBankAsync(string in0, object userState) {
            if ((this.retrieveAllNodeFTsFromBankOperationCompleted == null)) {
                this.retrieveAllNodeFTsFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllNodeFTsFromBankOperationCompleted);
            }
            this.InvokeAsync("retrieveAllNodeFTsFromBank", new object[] {
                        in0}, this.retrieveAllNodeFTsFromBankOperationCompleted, userState);
        }
        
        private void OnretrieveAllNodeFTsFromBankOperationCompleted(object arg) {
            if ((this.retrieveAllNodeFTsFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllNodeFTsFromBankCompleted(this, new retrieveAllNodeFTsFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getNodeFromBankReturn")]
        public NodeFT getNodeFromBank(NodeFT in0, string in1) {
            object[] results = this.Invoke("getNodeFromBank", new object[] {
                        in0,
                        in1});
            return ((NodeFT)(results[0]));
        }
        
        /// <remarks/>
        public void getNodeFromBankAsync(NodeFT in0, string in1) {
            this.getNodeFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getNodeFromBankAsync(NodeFT in0, string in1, object userState) {
            if ((this.getNodeFromBankOperationCompleted == null)) {
                this.getNodeFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeFromBankOperationCompleted);
            }
            this.InvokeAsync("getNodeFromBank", new object[] {
                        in0,
                        in1}, this.getNodeFromBankOperationCompleted, userState);
        }
        
        private void OngetNodeFromBankOperationCompleted(object arg) {
            if ((this.getNodeFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeFromBankCompleted(this, new getNodeFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCollectorRemoteStatusReturn")]
        public string getCollectorRemoteStatus(string in0, string in1) {
            object[] results = this.Invoke("getCollectorRemoteStatus", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCollectorRemoteStatusAsync(string in0, string in1) {
            this.getCollectorRemoteStatusAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCollectorRemoteStatusAsync(string in0, string in1, object userState) {
            if ((this.getCollectorRemoteStatusOperationCompleted == null)) {
                this.getCollectorRemoteStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCollectorRemoteStatusOperationCompleted);
            }
            this.InvokeAsync("getCollectorRemoteStatus", new object[] {
                        in0,
                        in1}, this.getCollectorRemoteStatusOperationCompleted, userState);
        }
        
        private void OngetCollectorRemoteStatusOperationCompleted(object arg) {
            if ((this.getCollectorRemoteStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCollectorRemoteStatusCompleted(this, new getCollectorRemoteStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("collectorRemoteStartReturn")]
        public string collectorRemoteStart(string in0, string in1) {
            object[] results = this.Invoke("collectorRemoteStart", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void collectorRemoteStartAsync(string in0, string in1) {
            this.collectorRemoteStartAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void collectorRemoteStartAsync(string in0, string in1, object userState) {
            if ((this.collectorRemoteStartOperationCompleted == null)) {
                this.collectorRemoteStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OncollectorRemoteStartOperationCompleted);
            }
            this.InvokeAsync("collectorRemoteStart", new object[] {
                        in0,
                        in1}, this.collectorRemoteStartOperationCompleted, userState);
        }
        
        private void OncollectorRemoteStartOperationCompleted(object arg) {
            if ((this.collectorRemoteStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.collectorRemoteStartCompleted(this, new collectorRemoteStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("collectorRemoteStopReturn")]
        public string collectorRemoteStop(string in0, string in1) {
            object[] results = this.Invoke("collectorRemoteStop", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void collectorRemoteStopAsync(string in0, string in1) {
            this.collectorRemoteStopAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void collectorRemoteStopAsync(string in0, string in1, object userState) {
            if ((this.collectorRemoteStopOperationCompleted == null)) {
                this.collectorRemoteStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OncollectorRemoteStopOperationCompleted);
            }
            this.InvokeAsync("collectorRemoteStop", new object[] {
                        in0,
                        in1}, this.collectorRemoteStopOperationCompleted, userState);
        }
        
        private void OncollectorRemoteStopOperationCompleted(object arg) {
            if ((this.collectorRemoteStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.collectorRemoteStopCompleted(this, new collectorRemoteStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllAlertsReturn")]
        public Alert[] retrieveAllAlerts(string in0) {
            object[] results = this.Invoke("retrieveAllAlerts", new object[] {
                        in0});
            return ((Alert[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllAlertsAsync(string in0) {
            this.retrieveAllAlertsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllAlertsAsync(string in0, object userState) {
            if ((this.retrieveAllAlertsOperationCompleted == null)) {
                this.retrieveAllAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllAlertsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllAlerts", new object[] {
                        in0}, this.retrieveAllAlertsOperationCompleted, userState);
        }
        
        private void OnretrieveAllAlertsOperationCompleted(object arg) {
            if ((this.retrieveAllAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllAlertsCompleted(this, new retrieveAllAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addProfileToBankReturn")]
        public string addProfileToBank(Profile in0, string in1) {
            object[] results = this.Invoke("addProfileToBank", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addProfileToBankAsync(Profile in0, string in1) {
            this.addProfileToBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addProfileToBankAsync(Profile in0, string in1, object userState) {
            if ((this.addProfileToBankOperationCompleted == null)) {
                this.addProfileToBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddProfileToBankOperationCompleted);
            }
            this.InvokeAsync("addProfileToBank", new object[] {
                        in0,
                        in1}, this.addProfileToBankOperationCompleted, userState);
        }
        
        private void OnaddProfileToBankOperationCompleted(object arg) {
            if ((this.addProfileToBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addProfileToBankCompleted(this, new addProfileToBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateProfileInBankReturn")]
        public bool updateProfileInBank(Profile in0, string in1) {
            object[] results = this.Invoke("updateProfileInBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateProfileInBankAsync(Profile in0, string in1) {
            this.updateProfileInBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateProfileInBankAsync(Profile in0, string in1, object userState) {
            if ((this.updateProfileInBankOperationCompleted == null)) {
                this.updateProfileInBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateProfileInBankOperationCompleted);
            }
            this.InvokeAsync("updateProfileInBank", new object[] {
                        in0,
                        in1}, this.updateProfileInBankOperationCompleted, userState);
        }
        
        private void OnupdateProfileInBankOperationCompleted(object arg) {
            if ((this.updateProfileInBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateProfileInBankCompleted(this, new updateProfileInBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteProfileFromBankReturn")]
        public bool deleteProfileFromBank(Profile in0, string in1) {
            object[] results = this.Invoke("deleteProfileFromBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteProfileFromBankAsync(Profile in0, string in1) {
            this.deleteProfileFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteProfileFromBankAsync(Profile in0, string in1, object userState) {
            if ((this.deleteProfileFromBankOperationCompleted == null)) {
                this.deleteProfileFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteProfileFromBankOperationCompleted);
            }
            this.InvokeAsync("deleteProfileFromBank", new object[] {
                        in0,
                        in1}, this.deleteProfileFromBankOperationCompleted, userState);
        }
        
        private void OndeleteProfileFromBankOperationCompleted(object arg) {
            if ((this.deleteProfileFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteProfileFromBankCompleted(this, new deleteProfileFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProfileFromBankReturn")]
        public Profile getProfileFromBank(Profile in0, string in1) {
            object[] results = this.Invoke("getProfileFromBank", new object[] {
                        in0,
                        in1});
            return ((Profile)(results[0]));
        }
        
        /// <remarks/>
        public void getProfileFromBankAsync(Profile in0, string in1) {
            this.getProfileFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getProfileFromBankAsync(Profile in0, string in1, object userState) {
            if ((this.getProfileFromBankOperationCompleted == null)) {
                this.getProfileFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProfileFromBankOperationCompleted);
            }
            this.InvokeAsync("getProfileFromBank", new object[] {
                        in0,
                        in1}, this.getProfileFromBankOperationCompleted, userState);
        }
        
        private void OngetProfileFromBankOperationCompleted(object arg) {
            if ((this.getProfileFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProfileFromBankCompleted(this, new getProfileFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllProfilesFromBankReturn")]
        public Profile[] retrieveAllProfilesFromBank(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllProfilesFromBank", new object[] {
                        in0,
                        in1});
            return ((Profile[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllProfilesFromBankAsync(string in0, string in1) {
            this.retrieveAllProfilesFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllProfilesFromBankAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllProfilesFromBankOperationCompleted == null)) {
                this.retrieveAllProfilesFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllProfilesFromBankOperationCompleted);
            }
            this.InvokeAsync("retrieveAllProfilesFromBank", new object[] {
                        in0,
                        in1}, this.retrieveAllProfilesFromBankOperationCompleted, userState);
        }
        
        private void OnretrieveAllProfilesFromBankOperationCompleted(object arg) {
            if ((this.retrieveAllProfilesFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllProfilesFromBankCompleted(this, new retrieveAllProfilesFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addProfileToServerReturn")]
        public bool addProfileToServer(Profile in0, Server in1, string in2) {
            object[] results = this.Invoke("addProfileToServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addProfileToServerAsync(Profile in0, Server in1, string in2) {
            this.addProfileToServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void addProfileToServerAsync(Profile in0, Server in1, string in2, object userState) {
            if ((this.addProfileToServerOperationCompleted == null)) {
                this.addProfileToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddProfileToServerOperationCompleted);
            }
            this.InvokeAsync("addProfileToServer", new object[] {
                        in0,
                        in1,
                        in2}, this.addProfileToServerOperationCompleted, userState);
        }
        
        private void OnaddProfileToServerOperationCompleted(object arg) {
            if ((this.addProfileToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addProfileToServerCompleted(this, new addProfileToServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteProfileFromServerReturn")]
        public bool deleteProfileFromServer(Profile in0, Server in1, string in2) {
            object[] results = this.Invoke("deleteProfileFromServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteProfileFromServerAsync(Profile in0, Server in1, string in2) {
            this.deleteProfileFromServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void deleteProfileFromServerAsync(Profile in0, Server in1, string in2, object userState) {
            if ((this.deleteProfileFromServerOperationCompleted == null)) {
                this.deleteProfileFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteProfileFromServerOperationCompleted);
            }
            this.InvokeAsync("deleteProfileFromServer", new object[] {
                        in0,
                        in1,
                        in2}, this.deleteProfileFromServerOperationCompleted, userState);
        }
        
        private void OndeleteProfileFromServerOperationCompleted(object arg) {
            if ((this.deleteProfileFromServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteProfileFromServerCompleted(this, new deleteProfileFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addSearchAuditToBankReturn")]
        public string addSearchAuditToBank(SearchAudit in0, string in1) {
            object[] results = this.Invoke("addSearchAuditToBank", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addSearchAuditToBankAsync(SearchAudit in0, string in1) {
            this.addSearchAuditToBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addSearchAuditToBankAsync(SearchAudit in0, string in1, object userState) {
            if ((this.addSearchAuditToBankOperationCompleted == null)) {
                this.addSearchAuditToBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSearchAuditToBankOperationCompleted);
            }
            this.InvokeAsync("addSearchAuditToBank", new object[] {
                        in0,
                        in1}, this.addSearchAuditToBankOperationCompleted, userState);
        }
        
        private void OnaddSearchAuditToBankOperationCompleted(object arg) {
            if ((this.addSearchAuditToBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSearchAuditToBankCompleted(this, new addSearchAuditToBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateSearchAuditInBankReturn")]
        public bool updateSearchAuditInBank(SearchAudit in0, string in1) {
            object[] results = this.Invoke("updateSearchAuditInBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateSearchAuditInBankAsync(SearchAudit in0, string in1) {
            this.updateSearchAuditInBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateSearchAuditInBankAsync(SearchAudit in0, string in1, object userState) {
            if ((this.updateSearchAuditInBankOperationCompleted == null)) {
                this.updateSearchAuditInBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSearchAuditInBankOperationCompleted);
            }
            this.InvokeAsync("updateSearchAuditInBank", new object[] {
                        in0,
                        in1}, this.updateSearchAuditInBankOperationCompleted, userState);
        }
        
        private void OnupdateSearchAuditInBankOperationCompleted(object arg) {
            if ((this.updateSearchAuditInBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSearchAuditInBankCompleted(this, new updateSearchAuditInBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("deleteSearchAuditFromBankReturn")]
        public bool deleteSearchAuditFromBank(SearchAudit in0, string in1) {
            object[] results = this.Invoke("deleteSearchAuditFromBank", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteSearchAuditFromBankAsync(SearchAudit in0, string in1) {
            this.deleteSearchAuditFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteSearchAuditFromBankAsync(SearchAudit in0, string in1, object userState) {
            if ((this.deleteSearchAuditFromBankOperationCompleted == null)) {
                this.deleteSearchAuditFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteSearchAuditFromBankOperationCompleted);
            }
            this.InvokeAsync("deleteSearchAuditFromBank", new object[] {
                        in0,
                        in1}, this.deleteSearchAuditFromBankOperationCompleted, userState);
        }
        
        private void OndeleteSearchAuditFromBankOperationCompleted(object arg) {
            if ((this.deleteSearchAuditFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteSearchAuditFromBankCompleted(this, new deleteSearchAuditFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSearchAuditFromBankReturn")]
        public SearchAudit getSearchAuditFromBank(SearchAudit in0, string in1) {
            object[] results = this.Invoke("getSearchAuditFromBank", new object[] {
                        in0,
                        in1});
            return ((SearchAudit)(results[0]));
        }
        
        /// <remarks/>
        public void getSearchAuditFromBankAsync(SearchAudit in0, string in1) {
            this.getSearchAuditFromBankAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getSearchAuditFromBankAsync(SearchAudit in0, string in1, object userState) {
            if ((this.getSearchAuditFromBankOperationCompleted == null)) {
                this.getSearchAuditFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSearchAuditFromBankOperationCompleted);
            }
            this.InvokeAsync("getSearchAuditFromBank", new object[] {
                        in0,
                        in1}, this.getSearchAuditFromBankOperationCompleted, userState);
        }
        
        private void OngetSearchAuditFromBankOperationCompleted(object arg) {
            if ((this.getSearchAuditFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSearchAuditFromBankCompleted(this, new getSearchAuditFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchAuditInServerReturn")]
        public AuditBase[] searchAuditInServer(SearchAudit in0, Server in1, AuditBase in2, string in3) {
            object[] results = this.Invoke("searchAuditInServer", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((AuditBase[])(results[0]));
        }
        
        /// <remarks/>
        public void searchAuditInServerAsync(SearchAudit in0, Server in1, AuditBase in2, string in3) {
            this.searchAuditInServerAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void searchAuditInServerAsync(SearchAudit in0, Server in1, AuditBase in2, string in3, object userState) {
            if ((this.searchAuditInServerOperationCompleted == null)) {
                this.searchAuditInServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchAuditInServerOperationCompleted);
            }
            this.InvokeAsync("searchAuditInServer", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.searchAuditInServerOperationCompleted, userState);
        }
        
        private void OnsearchAuditInServerOperationCompleted(object arg) {
            if ((this.searchAuditInServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchAuditInServerCompleted(this, new searchAuditInServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateSshSrvConfigReturn")]
        public bool updateSshSrvConfig(SshServerConfig in0, string in1, string in2) {
            object[] results = this.Invoke("updateSshSrvConfig", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateSshSrvConfigAsync(SshServerConfig in0, string in1, string in2) {
            this.updateSshSrvConfigAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateSshSrvConfigAsync(SshServerConfig in0, string in1, string in2, object userState) {
            if ((this.updateSshSrvConfigOperationCompleted == null)) {
                this.updateSshSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSshSrvConfigOperationCompleted);
            }
            this.InvokeAsync("updateSshSrvConfig", new object[] {
                        in0,
                        in1,
                        in2}, this.updateSshSrvConfigOperationCompleted, userState);
        }
        
        private void OnupdateSshSrvConfigOperationCompleted(object arg) {
            if ((this.updateSshSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSshSrvConfigCompleted(this, new updateSshSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSshSrvConfigReturn")]
        public SshServerConfig getSshSrvConfig(string in0, string in1) {
            object[] results = this.Invoke("getSshSrvConfig", new object[] {
                        in0,
                        in1});
            return ((SshServerConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getSshSrvConfigAsync(string in0, string in1) {
            this.getSshSrvConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getSshSrvConfigAsync(string in0, string in1, object userState) {
            if ((this.getSshSrvConfigOperationCompleted == null)) {
                this.getSshSrvConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSshSrvConfigOperationCompleted);
            }
            this.InvokeAsync("getSshSrvConfig", new object[] {
                        in0,
                        in1}, this.getSshSrvConfigOperationCompleted, userState);
        }
        
        private void OngetSshSrvConfigOperationCompleted(object arg) {
            if ((this.getSshSrvConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSshSrvConfigCompleted(this, new getSshSrvConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getSshSrvConfig1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSshSrvConfigReturn")]
        public SshServerConfig getSshSrvConfig(string in0) {
            object[] results = this.Invoke("getSshSrvConfig1", new object[] {
                        in0});
            return ((SshServerConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getSshSrvConfig1Async(string in0) {
            this.getSshSrvConfig1Async(in0, null);
        }
        
        /// <remarks/>
        public void getSshSrvConfig1Async(string in0, object userState) {
            if ((this.getSshSrvConfig1OperationCompleted == null)) {
                this.getSshSrvConfig1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSshSrvConfig1OperationCompleted);
            }
            this.InvokeAsync("getSshSrvConfig1", new object[] {
                        in0}, this.getSshSrvConfig1OperationCompleted, userState);
        }
        
        private void OngetSshSrvConfig1OperationCompleted(object arg) {
            if ((this.getSshSrvConfig1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSshSrvConfig1Completed(this, new getSshSrvConfig1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllSshSrvConfigsReturn")]
        public SshServerConfig[] retrieveAllSshSrvConfigs(string in0) {
            object[] results = this.Invoke("retrieveAllSshSrvConfigs", new object[] {
                        in0});
            return ((SshServerConfig[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllSshSrvConfigsAsync(string in0) {
            this.retrieveAllSshSrvConfigsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllSshSrvConfigsAsync(string in0, object userState) {
            if ((this.retrieveAllSshSrvConfigsOperationCompleted == null)) {
                this.retrieveAllSshSrvConfigsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllSshSrvConfigsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllSshSrvConfigs", new object[] {
                        in0}, this.retrieveAllSshSrvConfigsOperationCompleted, userState);
        }
        
        private void OnretrieveAllSshSrvConfigsOperationCompleted(object arg) {
            if ((this.retrieveAllSshSrvConfigsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllSshSrvConfigsCompleted(this, new retrieveAllSshSrvConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAlertAuditReturn")]
        public bool removeAlertAudit(string in0, string in1) {
            object[] results = this.Invoke("removeAlertAudit", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAlertAuditAsync(string in0, string in1) {
            this.removeAlertAuditAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeAlertAuditAsync(string in0, string in1, object userState) {
            if ((this.removeAlertAuditOperationCompleted == null)) {
                this.removeAlertAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAlertAuditOperationCompleted);
            }
            this.InvokeAsync("removeAlertAudit", new object[] {
                        in0,
                        in1}, this.removeAlertAuditOperationCompleted, userState);
        }
        
        private void OnremoveAlertAuditOperationCompleted(object arg) {
            if ((this.removeAlertAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAlertAuditCompleted(this, new removeAlertAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAlertAuditReturn")]
        public AuditBase getAlertAudit(string in0, string in1) {
            object[] results = this.Invoke("getAlertAudit", new object[] {
                        in0,
                        in1});
            return ((AuditBase)(results[0]));
        }
        
        /// <remarks/>
        public void getAlertAuditAsync(string in0, string in1) {
            this.getAlertAuditAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getAlertAuditAsync(string in0, string in1, object userState) {
            if ((this.getAlertAuditOperationCompleted == null)) {
                this.getAlertAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAlertAuditOperationCompleted);
            }
            this.InvokeAsync("getAlertAudit", new object[] {
                        in0,
                        in1}, this.getAlertAuditOperationCompleted, userState);
        }
        
        private void OngetAlertAuditOperationCompleted(object arg) {
            if ((this.getAlertAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAlertAuditCompleted(this, new getAlertAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllAlertAuditsReturn")]
        public AuditAlert[] retrieveAllAlertAudits(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllAlertAudits", new object[] {
                        in0,
                        in1});
            return ((AuditAlert[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllAlertAuditsAsync(string in0, string in1) {
            this.retrieveAllAlertAuditsAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllAlertAuditsAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllAlertAuditsOperationCompleted == null)) {
                this.retrieveAllAlertAuditsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllAlertAuditsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllAlertAudits", new object[] {
                        in0,
                        in1}, this.retrieveAllAlertAuditsOperationCompleted, userState);
        }
        
        private void OnretrieveAllAlertAuditsOperationCompleted(object arg) {
            if ((this.retrieveAllAlertAuditsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllAlertAuditsCompleted(this, new retrieveAllAlertAuditsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchAlertAuditsReturn")]
        public AuditAlert[] searchAlertAudits(AuditAlert in0, string in1, string in2) {
            object[] results = this.Invoke("searchAlertAudits", new object[] {
                        in0,
                        in1,
                        in2});
            return ((AuditAlert[])(results[0]));
        }
        
        /// <remarks/>
        public void searchAlertAuditsAsync(AuditAlert in0, string in1, string in2) {
            this.searchAlertAuditsAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void searchAlertAuditsAsync(AuditAlert in0, string in1, string in2, object userState) {
            if ((this.searchAlertAuditsOperationCompleted == null)) {
                this.searchAlertAuditsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchAlertAuditsOperationCompleted);
            }
            this.InvokeAsync("searchAlertAudits", new object[] {
                        in0,
                        in1,
                        in2}, this.searchAlertAuditsOperationCompleted, userState);
        }
        
        private void OnsearchAlertAuditsOperationCompleted(object arg) {
            if ((this.searchAlertAuditsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchAlertAuditsCompleted(this, new searchAlertAuditsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllUserServerKeysReturn")]
        public Key[] retrieveAllUserServerKeys(int in0, string in1, string in2) {
            object[] results = this.Invoke("retrieveAllUserServerKeys", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllUserServerKeysAsync(int in0, string in1, string in2) {
            this.retrieveAllUserServerKeysAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveAllUserServerKeysAsync(int in0, string in1, string in2, object userState) {
            if ((this.retrieveAllUserServerKeysOperationCompleted == null)) {
                this.retrieveAllUserServerKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllUserServerKeysOperationCompleted);
            }
            this.InvokeAsync("retrieveAllUserServerKeys", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveAllUserServerKeysOperationCompleted, userState);
        }
        
        private void OnretrieveAllUserServerKeysOperationCompleted(object arg) {
            if ((this.retrieveAllUserServerKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllUserServerKeysCompleted(this, new retrieveAllUserServerKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllPrivateKeysReturn")]
        public Key[] retrieveAllPrivateKeys(int in0, string in1) {
            object[] results = this.Invoke("retrieveAllPrivateKeys", new object[] {
                        in0,
                        in1});
            return ((Key[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllPrivateKeysAsync(int in0, string in1) {
            this.retrieveAllPrivateKeysAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllPrivateKeysAsync(int in0, string in1, object userState) {
            if ((this.retrieveAllPrivateKeysOperationCompleted == null)) {
                this.retrieveAllPrivateKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllPrivateKeysOperationCompleted);
            }
            this.InvokeAsync("retrieveAllPrivateKeys", new object[] {
                        in0,
                        in1}, this.retrieveAllPrivateKeysOperationCompleted, userState);
        }
        
        private void OnretrieveAllPrivateKeysOperationCompleted(object arg) {
            if ((this.retrieveAllPrivateKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllPrivateKeysCompleted(this, new retrieveAllPrivateKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllPrivateKeyIdsReturn")]
        public Key[] retrieveAllPrivateKeyIds(int in0, string in1) {
            object[] results = this.Invoke("retrieveAllPrivateKeyIds", new object[] {
                        in0,
                        in1});
            return ((Key[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllPrivateKeyIdsAsync(int in0, string in1) {
            this.retrieveAllPrivateKeyIdsAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllPrivateKeyIdsAsync(int in0, string in1, object userState) {
            if ((this.retrieveAllPrivateKeyIdsOperationCompleted == null)) {
                this.retrieveAllPrivateKeyIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllPrivateKeyIdsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllPrivateKeyIds", new object[] {
                        in0,
                        in1}, this.retrieveAllPrivateKeyIdsOperationCompleted, userState);
        }
        
        private void OnretrieveAllPrivateKeyIdsOperationCompleted(object arg) {
            if ((this.retrieveAllPrivateKeyIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllPrivateKeyIdsCompleted(this, new retrieveAllPrivateKeyIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSystemPublicKeyReturn", DataType="base64Binary")]
        public byte[] getSystemPublicKey(int in0, string in1) {
            object[] results = this.Invoke("getSystemPublicKey", new object[] {
                        in0,
                        in1});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getSystemPublicKeyAsync(int in0, string in1) {
            this.getSystemPublicKeyAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getSystemPublicKeyAsync(int in0, string in1, object userState) {
            if ((this.getSystemPublicKeyOperationCompleted == null)) {
                this.getSystemPublicKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSystemPublicKeyOperationCompleted);
            }
            this.InvokeAsync("getSystemPublicKey", new object[] {
                        in0,
                        in1}, this.getSystemPublicKeyOperationCompleted, userState);
        }
        
        private void OngetSystemPublicKeyOperationCompleted(object arg) {
            if ((this.getSystemPublicKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSystemPublicKeyCompleted(this, new getSystemPublicKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("validateAddKeyReturn")]
        public Key validateAddKey(int in0, Key in1, string in2) {
            object[] results = this.Invoke("validateAddKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void validateAddKeyAsync(int in0, Key in1, string in2) {
            this.validateAddKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void validateAddKeyAsync(int in0, Key in1, string in2, object userState) {
            if ((this.validateAddKeyOperationCompleted == null)) {
                this.validateAddKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateAddKeyOperationCompleted);
            }
            this.InvokeAsync("validateAddKey", new object[] {
                        in0,
                        in1,
                        in2}, this.validateAddKeyOperationCompleted, userState);
        }
        
        private void OnvalidateAddKeyOperationCompleted(object arg) {
            if ((this.validateAddKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateAddKeyCompleted(this, new validateAddKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("validateUpdateKeyReturn")]
        public Key validateUpdateKey(int in0, Key in1, string in2) {
            object[] results = this.Invoke("validateUpdateKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void validateUpdateKeyAsync(int in0, Key in1, string in2) {
            this.validateUpdateKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void validateUpdateKeyAsync(int in0, Key in1, string in2, object userState) {
            if ((this.validateUpdateKeyOperationCompleted == null)) {
                this.validateUpdateKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateUpdateKeyOperationCompleted);
            }
            this.InvokeAsync("validateUpdateKey", new object[] {
                        in0,
                        in1,
                        in2}, this.validateUpdateKeyOperationCompleted, userState);
        }
        
        private void OnvalidateUpdateKeyOperationCompleted(object arg) {
            if ((this.validateUpdateKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateUpdateKeyCompleted(this, new validateUpdateKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getPublicSystemKeyByIdReturn")]
        public Key getPublicSystemKeyById(int in0, string in1, string in2) {
            object[] results = this.Invoke("getPublicSystemKeyById", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void getPublicSystemKeyByIdAsync(int in0, string in1, string in2) {
            this.getPublicSystemKeyByIdAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getPublicSystemKeyByIdAsync(int in0, string in1, string in2, object userState) {
            if ((this.getPublicSystemKeyByIdOperationCompleted == null)) {
                this.getPublicSystemKeyByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPublicSystemKeyByIdOperationCompleted);
            }
            this.InvokeAsync("getPublicSystemKeyById", new object[] {
                        in0,
                        in1,
                        in2}, this.getPublicSystemKeyByIdOperationCompleted, userState);
        }
        
        private void OngetPublicSystemKeyByIdOperationCompleted(object arg) {
            if ((this.getPublicSystemKeyByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPublicSystemKeyByIdCompleted(this, new getPublicSystemKeyByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSSHSystemKeyByIdReturn")]
        public Key getSSHSystemKeyById(string in0, string in1) {
            object[] results = this.Invoke("getSSHSystemKeyById", new object[] {
                        in0,
                        in1});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void getSSHSystemKeyByIdAsync(string in0, string in1) {
            this.getSSHSystemKeyByIdAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getSSHSystemKeyByIdAsync(string in0, string in1, object userState) {
            if ((this.getSSHSystemKeyByIdOperationCompleted == null)) {
                this.getSSHSystemKeyByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSHSystemKeyByIdOperationCompleted);
            }
            this.InvokeAsync("getSSHSystemKeyById", new object[] {
                        in0,
                        in1}, this.getSSHSystemKeyByIdOperationCompleted, userState);
        }
        
        private void OngetSSHSystemKeyByIdOperationCompleted(object arg) {
            if ((this.getSSHSystemKeyByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSHSystemKeyByIdCompleted(this, new getSSHSystemKeyByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("setDefaultSystemKeyReturn")]
        public bool setDefaultSystemKey(int in0, string in1, string in2) {
            object[] results = this.Invoke("setDefaultSystemKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setDefaultSystemKeyAsync(int in0, string in1, string in2) {
            this.setDefaultSystemKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void setDefaultSystemKeyAsync(int in0, string in1, string in2, object userState) {
            if ((this.setDefaultSystemKeyOperationCompleted == null)) {
                this.setDefaultSystemKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDefaultSystemKeyOperationCompleted);
            }
            this.InvokeAsync("setDefaultSystemKey", new object[] {
                        in0,
                        in1,
                        in2}, this.setDefaultSystemKeyOperationCompleted, userState);
        }
        
        private void OnsetDefaultSystemKeyOperationCompleted(object arg) {
            if ((this.setDefaultSystemKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDefaultSystemKeyCompleted(this, new setDefaultSystemKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCertFromSSHKeyReturn", DataType="base64Binary")]
        public byte[] getCertFromSSHKey(Key in0, string in1) {
            object[] results = this.Invoke("getCertFromSSHKey", new object[] {
                        in0,
                        in1});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCertFromSSHKeyAsync(Key in0, string in1) {
            this.getCertFromSSHKeyAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCertFromSSHKeyAsync(Key in0, string in1, object userState) {
            if ((this.getCertFromSSHKeyOperationCompleted == null)) {
                this.getCertFromSSHKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCertFromSSHKeyOperationCompleted);
            }
            this.InvokeAsync("getCertFromSSHKey", new object[] {
                        in0,
                        in1}, this.getCertFromSSHKeyOperationCompleted, userState);
        }
        
        private void OngetCertFromSSHKeyOperationCompleted(object arg) {
            if ((this.getCertFromSSHKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCertFromSSHKeyCompleted(this, new getCertFromSSHKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateServerStatusConfigReturn")]
        public bool updateServerStatusConfig(ServerStatusConfig in0, string in1, string in2) {
            object[] results = this.Invoke("updateServerStatusConfig", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateServerStatusConfigAsync(ServerStatusConfig in0, string in1, string in2) {
            this.updateServerStatusConfigAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateServerStatusConfigAsync(ServerStatusConfig in0, string in1, string in2, object userState) {
            if ((this.updateServerStatusConfigOperationCompleted == null)) {
                this.updateServerStatusConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateServerStatusConfigOperationCompleted);
            }
            this.InvokeAsync("updateServerStatusConfig", new object[] {
                        in0,
                        in1,
                        in2}, this.updateServerStatusConfigOperationCompleted, userState);
        }
        
        private void OnupdateServerStatusConfigOperationCompleted(object arg) {
            if ((this.updateServerStatusConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateServerStatusConfigCompleted(this, new updateServerStatusConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getServerStatusConfigReturn")]
        public ServerStatusConfig getServerStatusConfig(string in0) {
            object[] results = this.Invoke("getServerStatusConfig", new object[] {
                        in0});
            return ((ServerStatusConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getServerStatusConfigAsync(string in0) {
            this.getServerStatusConfigAsync(in0, null);
        }
        
        /// <remarks/>
        public void getServerStatusConfigAsync(string in0, object userState) {
            if ((this.getServerStatusConfigOperationCompleted == null)) {
                this.getServerStatusConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerStatusConfigOperationCompleted);
            }
            this.InvokeAsync("getServerStatusConfig", new object[] {
                        in0}, this.getServerStatusConfigOperationCompleted, userState);
        }
        
        private void OngetServerStatusConfigOperationCompleted(object arg) {
            if ((this.getServerStatusConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerStatusConfigCompleted(this, new getServerStatusConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getServerStatusConfig1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getServerStatusConfigReturn")]
        public ServerStatusConfig getServerStatusConfig(string in0, string in1) {
            object[] results = this.Invoke("getServerStatusConfig1", new object[] {
                        in0,
                        in1});
            return ((ServerStatusConfig)(results[0]));
        }
        
        /// <remarks/>
        public void getServerStatusConfig1Async(string in0, string in1) {
            this.getServerStatusConfig1Async(in0, in1, null);
        }
        
        /// <remarks/>
        public void getServerStatusConfig1Async(string in0, string in1, object userState) {
            if ((this.getServerStatusConfig1OperationCompleted == null)) {
                this.getServerStatusConfig1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerStatusConfig1OperationCompleted);
            }
            this.InvokeAsync("getServerStatusConfig1", new object[] {
                        in0,
                        in1}, this.getServerStatusConfig1OperationCompleted, userState);
        }
        
        private void OngetServerStatusConfig1OperationCompleted(object arg) {
            if ((this.getServerStatusConfig1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerStatusConfig1Completed(this, new getServerStatusConfig1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeServerStatusConfigReturn")]
        public bool removeServerStatusConfig(string in0, string in1) {
            object[] results = this.Invoke("removeServerStatusConfig", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeServerStatusConfigAsync(string in0, string in1) {
            this.removeServerStatusConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeServerStatusConfigAsync(string in0, string in1, object userState) {
            if ((this.removeServerStatusConfigOperationCompleted == null)) {
                this.removeServerStatusConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveServerStatusConfigOperationCompleted);
            }
            this.InvokeAsync("removeServerStatusConfig", new object[] {
                        in0,
                        in1}, this.removeServerStatusConfigOperationCompleted, userState);
        }
        
        private void OnremoveServerStatusConfigOperationCompleted(object arg) {
            if ((this.removeServerStatusConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeServerStatusConfigCompleted(this, new removeServerStatusConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addOnDemandSecurityReturn")]
        public bool addOnDemandSecurity(OnDemandSecurity in0, string in1) {
            object[] results = this.Invoke("addOnDemandSecurity", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addOnDemandSecurityAsync(OnDemandSecurity in0, string in1) {
            this.addOnDemandSecurityAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addOnDemandSecurityAsync(OnDemandSecurity in0, string in1, object userState) {
            if ((this.addOnDemandSecurityOperationCompleted == null)) {
                this.addOnDemandSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOnDemandSecurityOperationCompleted);
            }
            this.InvokeAsync("addOnDemandSecurity", new object[] {
                        in0,
                        in1}, this.addOnDemandSecurityOperationCompleted, userState);
        }
        
        private void OnaddOnDemandSecurityOperationCompleted(object arg) {
            if ((this.addOnDemandSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOnDemandSecurityCompleted(this, new addOnDemandSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addOnDemandUsersReturn")]
        public bool addOnDemandUsers(OnDemandUsers in0, string in1) {
            object[] results = this.Invoke("addOnDemandUsers", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addOnDemandUsersAsync(OnDemandUsers in0, string in1) {
            this.addOnDemandUsersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addOnDemandUsersAsync(OnDemandUsers in0, string in1, object userState) {
            if ((this.addOnDemandUsersOperationCompleted == null)) {
                this.addOnDemandUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOnDemandUsersOperationCompleted);
            }
            this.InvokeAsync("addOnDemandUsers", new object[] {
                        in0,
                        in1}, this.addOnDemandUsersOperationCompleted, userState);
        }
        
        private void OnaddOnDemandUsersOperationCompleted(object arg) {
            if ((this.addOnDemandUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOnDemandUsersCompleted(this, new addOnDemandUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateOnDemandSecurityReturn")]
        public bool updateOnDemandSecurity(OnDemandSecurity in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("updateOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateOnDemandSecurityAsync(OnDemandSecurity in0, string in1, string in2, string in3) {
            this.updateOnDemandSecurityAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void updateOnDemandSecurityAsync(OnDemandSecurity in0, string in1, string in2, string in3, object userState) {
            if ((this.updateOnDemandSecurityOperationCompleted == null)) {
                this.updateOnDemandSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOnDemandSecurityOperationCompleted);
            }
            this.InvokeAsync("updateOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.updateOnDemandSecurityOperationCompleted, userState);
        }
        
        private void OnupdateOnDemandSecurityOperationCompleted(object arg) {
            if ((this.updateOnDemandSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateOnDemandSecurityCompleted(this, new updateOnDemandSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeOnDemandSecurityReturn")]
        public bool removeOnDemandSecurity(string in0, string in1, string in2) {
            object[] results = this.Invoke("removeOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeOnDemandSecurityAsync(string in0, string in1, string in2) {
            this.removeOnDemandSecurityAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeOnDemandSecurityAsync(string in0, string in1, string in2, object userState) {
            if ((this.removeOnDemandSecurityOperationCompleted == null)) {
                this.removeOnDemandSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveOnDemandSecurityOperationCompleted);
            }
            this.InvokeAsync("removeOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2}, this.removeOnDemandSecurityOperationCompleted, userState);
        }
        
        private void OnremoveOnDemandSecurityOperationCompleted(object arg) {
            if ((this.removeOnDemandSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeOnDemandSecurityCompleted(this, new removeOnDemandSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeOnDemandUsersReturn")]
        public bool removeOnDemandUsers(OnDemandUsers in0, string in1) {
            object[] results = this.Invoke("removeOnDemandUsers", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeOnDemandUsersAsync(OnDemandUsers in0, string in1) {
            this.removeOnDemandUsersAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeOnDemandUsersAsync(OnDemandUsers in0, string in1, object userState) {
            if ((this.removeOnDemandUsersOperationCompleted == null)) {
                this.removeOnDemandUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveOnDemandUsersOperationCompleted);
            }
            this.InvokeAsync("removeOnDemandUsers", new object[] {
                        in0,
                        in1}, this.removeOnDemandUsersOperationCompleted, userState);
        }
        
        private void OnremoveOnDemandUsersOperationCompleted(object arg) {
            if ((this.removeOnDemandUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeOnDemandUsersCompleted(this, new removeOnDemandUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getOnDemandSecurityReturn")]
        public OnDemandSecurity getOnDemandSecurity(string in0, string in1, string in2) {
            object[] results = this.Invoke("getOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2});
            return ((OnDemandSecurity)(results[0]));
        }
        
        /// <remarks/>
        public void getOnDemandSecurityAsync(string in0, string in1, string in2) {
            this.getOnDemandSecurityAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getOnDemandSecurityAsync(string in0, string in1, string in2, object userState) {
            if ((this.getOnDemandSecurityOperationCompleted == null)) {
                this.getOnDemandSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOnDemandSecurityOperationCompleted);
            }
            this.InvokeAsync("getOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2}, this.getOnDemandSecurityOperationCompleted, userState);
        }
        
        private void OngetOnDemandSecurityOperationCompleted(object arg) {
            if ((this.getOnDemandSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOnDemandSecurityCompleted(this, new getOnDemandSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getOnDemandUsersReturn")]
        public OnDemandUsers[] getOnDemandUsers(string in0, string in1, string in2) {
            object[] results = this.Invoke("getOnDemandUsers", new object[] {
                        in0,
                        in1,
                        in2});
            return ((OnDemandUsers[])(results[0]));
        }
        
        /// <remarks/>
        public void getOnDemandUsersAsync(string in0, string in1, string in2) {
            this.getOnDemandUsersAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getOnDemandUsersAsync(string in0, string in1, string in2, object userState) {
            if ((this.getOnDemandUsersOperationCompleted == null)) {
                this.getOnDemandUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOnDemandUsersOperationCompleted);
            }
            this.InvokeAsync("getOnDemandUsers", new object[] {
                        in0,
                        in1,
                        in2}, this.getOnDemandUsersOperationCompleted, userState);
        }
        
        private void OngetOnDemandUsersOperationCompleted(object arg) {
            if ((this.getOnDemandUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOnDemandUsersCompleted(this, new getOnDemandUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllOnDemandUsersReturn")]
        public User[] retrieveAllOnDemandUsers(string in0) {
            object[] results = this.Invoke("retrieveAllOnDemandUsers", new object[] {
                        in0});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllOnDemandUsersAsync(string in0) {
            this.retrieveAllOnDemandUsersAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllOnDemandUsersAsync(string in0, object userState) {
            if ((this.retrieveAllOnDemandUsersOperationCompleted == null)) {
                this.retrieveAllOnDemandUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllOnDemandUsersOperationCompleted);
            }
            this.InvokeAsync("retrieveAllOnDemandUsers", new object[] {
                        in0}, this.retrieveAllOnDemandUsersOperationCompleted, userState);
        }
        
        private void OnretrieveAllOnDemandUsersOperationCompleted(object arg) {
            if ((this.retrieveAllOnDemandUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllOnDemandUsersCompleted(this, new retrieveAllOnDemandUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllOnDemandSecurityReturn")]
        public OnDemandSecurity[] retrieveAllOnDemandSecurity(string in0, string in1) {
            object[] results = this.Invoke("retrieveAllOnDemandSecurity", new object[] {
                        in0,
                        in1});
            return ((OnDemandSecurity[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllOnDemandSecurityAsync(string in0, string in1) {
            this.retrieveAllOnDemandSecurityAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllOnDemandSecurityAsync(string in0, string in1, object userState) {
            if ((this.retrieveAllOnDemandSecurityOperationCompleted == null)) {
                this.retrieveAllOnDemandSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllOnDemandSecurityOperationCompleted);
            }
            this.InvokeAsync("retrieveAllOnDemandSecurity", new object[] {
                        in0,
                        in1}, this.retrieveAllOnDemandSecurityOperationCompleted, userState);
        }
        
        private void OnretrieveAllOnDemandSecurityOperationCompleted(object arg) {
            if ((this.retrieveAllOnDemandSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllOnDemandSecurityCompleted(this, new retrieveAllOnDemandSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchOnDemandSecurityReturn")]
        public OnDemandSecurity[] searchOnDemandSecurity(OnDemandSecurity in0, string in1, string in2) {
            object[] results = this.Invoke("searchOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2});
            return ((OnDemandSecurity[])(results[0]));
        }
        
        /// <remarks/>
        public void searchOnDemandSecurityAsync(OnDemandSecurity in0, string in1, string in2) {
            this.searchOnDemandSecurityAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void searchOnDemandSecurityAsync(OnDemandSecurity in0, string in1, string in2, object userState) {
            if ((this.searchOnDemandSecurityOperationCompleted == null)) {
                this.searchOnDemandSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchOnDemandSecurityOperationCompleted);
            }
            this.InvokeAsync("searchOnDemandSecurity", new object[] {
                        in0,
                        in1,
                        in2}, this.searchOnDemandSecurityOperationCompleted, userState);
        }
        
        private void OnsearchOnDemandSecurityOperationCompleted(object arg) {
            if ((this.searchOnDemandSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchOnDemandSecurityCompleted(this, new searchOnDemandSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateJMSConfigReturn")]
        public bool updateJMSConfig(JMSSrvCfg in0, string in1) {
            object[] results = this.Invoke("updateJMSConfig", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateJMSConfigAsync(JMSSrvCfg in0, string in1) {
            this.updateJMSConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateJMSConfigAsync(JMSSrvCfg in0, string in1, object userState) {
            if ((this.updateJMSConfigOperationCompleted == null)) {
                this.updateJMSConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateJMSConfigOperationCompleted);
            }
            this.InvokeAsync("updateJMSConfig", new object[] {
                        in0,
                        in1}, this.updateJMSConfigOperationCompleted, userState);
        }
        
        private void OnupdateJMSConfigOperationCompleted(object arg) {
            if ((this.updateJMSConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateJMSConfigCompleted(this, new updateJMSConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("testJMSServerReturn")]
        public Messages testJMSServer(JMSSrvCfg in0, string in1) {
            object[] results = this.Invoke("testJMSServer", new object[] {
                        in0,
                        in1});
            return ((Messages)(results[0]));
        }
        
        /// <remarks/>
        public void testJMSServerAsync(JMSSrvCfg in0, string in1) {
            this.testJMSServerAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void testJMSServerAsync(JMSSrvCfg in0, string in1, object userState) {
            if ((this.testJMSServerOperationCompleted == null)) {
                this.testJMSServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestJMSServerOperationCompleted);
            }
            this.InvokeAsync("testJMSServer", new object[] {
                        in0,
                        in1}, this.testJMSServerOperationCompleted, userState);
        }
        
        private void OntestJMSServerOperationCompleted(object arg) {
            if ((this.testJMSServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testJMSServerCompleted(this, new testJMSServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateCollectorSrvCfgReturn")]
        public bool updateCollectorSrvCfg(CollectorSrvCfg in0, string in1, string in2) {
            object[] results = this.Invoke("updateCollectorSrvCfg", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateCollectorSrvCfgAsync(CollectorSrvCfg in0, string in1, string in2) {
            this.updateCollectorSrvCfgAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateCollectorSrvCfgAsync(CollectorSrvCfg in0, string in1, string in2, object userState) {
            if ((this.updateCollectorSrvCfgOperationCompleted == null)) {
                this.updateCollectorSrvCfgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCollectorSrvCfgOperationCompleted);
            }
            this.InvokeAsync("updateCollectorSrvCfg", new object[] {
                        in0,
                        in1,
                        in2}, this.updateCollectorSrvCfgOperationCompleted, userState);
        }
        
        private void OnupdateCollectorSrvCfgOperationCompleted(object arg) {
            if ((this.updateCollectorSrvCfgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCollectorSrvCfgCompleted(this, new updateCollectorSrvCfgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCollectorSrvCfgReturn")]
        public CollectorSrvCfg getCollectorSrvCfg(string in0) {
            object[] results = this.Invoke("getCollectorSrvCfg", new object[] {
                        in0});
            return ((CollectorSrvCfg)(results[0]));
        }
        
        /// <remarks/>
        public void getCollectorSrvCfgAsync(string in0) {
            this.getCollectorSrvCfgAsync(in0, null);
        }
        
        /// <remarks/>
        public void getCollectorSrvCfgAsync(string in0, object userState) {
            if ((this.getCollectorSrvCfgOperationCompleted == null)) {
                this.getCollectorSrvCfgOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCollectorSrvCfgOperationCompleted);
            }
            this.InvokeAsync("getCollectorSrvCfg", new object[] {
                        in0}, this.getCollectorSrvCfgOperationCompleted, userState);
        }
        
        private void OngetCollectorSrvCfgOperationCompleted(object arg) {
            if ((this.getCollectorSrvCfgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCollectorSrvCfgCompleted(this, new getCollectorSrvCfgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("changePasswordReturn")]
        public bool changePassword(string in0, string in1, string in2) {
            object[] results = this.Invoke("changePassword", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void changePasswordAsync(string in0, string in1, string in2) {
            this.changePasswordAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void changePasswordAsync(string in0, string in1, string in2, object userState) {
            if ((this.changePasswordOperationCompleted == null)) {
                this.changePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePasswordOperationCompleted);
            }
            this.InvokeAsync("changePassword", new object[] {
                        in0,
                        in1,
                        in2}, this.changePasswordOperationCompleted, userState);
        }
        
        private void OnchangePasswordOperationCompleted(object arg) {
            if ((this.changePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePasswordCompleted(this, new changePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCopyrightInfoReturn")]
        public string getCopyrightInfo(string in0) {
            object[] results = this.Invoke("getCopyrightInfo", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCopyrightInfoAsync(string in0) {
            this.getCopyrightInfoAsync(in0, null);
        }
        
        /// <remarks/>
        public void getCopyrightInfoAsync(string in0, object userState) {
            if ((this.getCopyrightInfoOperationCompleted == null)) {
                this.getCopyrightInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCopyrightInfoOperationCompleted);
            }
            this.InvokeAsync("getCopyrightInfo", new object[] {
                        in0}, this.getCopyrightInfoOperationCompleted, userState);
        }
        
        private void OngetCopyrightInfoOperationCompleted(object arg) {
            if ((this.getCopyrightInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCopyrightInfoCompleted(this, new getCopyrightInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProductNameVersionReturn")]
        public string getProductNameVersion(string in0) {
            object[] results = this.Invoke("getProductNameVersion", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProductNameVersionAsync(string in0) {
            this.getProductNameVersionAsync(in0, null);
        }
        
        /// <remarks/>
        public void getProductNameVersionAsync(string in0, object userState) {
            if ((this.getProductNameVersionOperationCompleted == null)) {
                this.getProductNameVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProductNameVersionOperationCompleted);
            }
            this.InvokeAsync("getProductNameVersion", new object[] {
                        in0}, this.getProductNameVersionOperationCompleted, userState);
        }
        
        private void OngetProductNameVersionOperationCompleted(object arg) {
            if ((this.getProductNameVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProductNameVersionCompleted(this, new getProductNameVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("validateSessionReturn")]
        public bool validateSession(string in0) {
            object[] results = this.Invoke("validateSession", new object[] {
                        in0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void validateSessionAsync(string in0) {
            this.validateSessionAsync(in0, null);
        }
        
        /// <remarks/>
        public void validateSessionAsync(string in0, object userState) {
            if ((this.validateSessionOperationCompleted == null)) {
                this.validateSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateSessionOperationCompleted);
            }
            this.InvokeAsync("validateSession", new object[] {
                        in0}, this.validateSessionOperationCompleted, userState);
        }
        
        private void OnvalidateSessionOperationCompleted(object arg) {
            if ((this.validateSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateSessionCompleted(this, new validateSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeUserReturn")]
        public bool removeUser(string in0, string in1) {
            object[] results = this.Invoke("removeUser", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeUserAsync(string in0, string in1) {
            this.removeUserAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeUserAsync(string in0, string in1, object userState) {
            if ((this.removeUserOperationCompleted == null)) {
                this.removeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveUserOperationCompleted);
            }
            this.InvokeAsync("removeUser", new object[] {
                        in0,
                        in1}, this.removeUserOperationCompleted, userState);
        }
        
        private void OnremoveUserOperationCompleted(object arg) {
            if ((this.removeUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeUserCompleted(this, new removeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeGroupReturn")]
        public bool removeGroup(string in0, string in1) {
            object[] results = this.Invoke("removeGroup", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeGroupAsync(string in0, string in1) {
            this.removeGroupAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeGroupAsync(string in0, string in1, object userState) {
            if ((this.removeGroupOperationCompleted == null)) {
                this.removeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveGroupOperationCompleted);
            }
            this.InvokeAsync("removeGroup", new object[] {
                        in0,
                        in1}, this.removeGroupOperationCompleted, userState);
        }
        
        private void OnremoveGroupOperationCompleted(object arg) {
            if ((this.removeGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeGroupCompleted(this, new removeGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addGroupReturn")]
        public bool addGroup(Role in0, string in1) {
            object[] results = this.Invoke("addGroup", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addGroupAsync(Role in0, string in1) {
            this.addGroupAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addGroupAsync(Role in0, string in1, object userState) {
            if ((this.addGroupOperationCompleted == null)) {
                this.addGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddGroupOperationCompleted);
            }
            this.InvokeAsync("addGroup", new object[] {
                        in0,
                        in1}, this.addGroupOperationCompleted, userState);
        }
        
        private void OnaddGroupOperationCompleted(object arg) {
            if ((this.addGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addGroupCompleted(this, new addGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserReturn")]
        public User getUser(string in0, string in1) {
            object[] results = this.Invoke("getUser", new object[] {
                        in0,
                        in1});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void getUserAsync(string in0, string in1) {
            this.getUserAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getUserAsync(string in0, string in1, object userState) {
            if ((this.getUserOperationCompleted == null)) {
                this.getUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserOperationCompleted);
            }
            this.InvokeAsync("getUser", new object[] {
                        in0,
                        in1}, this.getUserOperationCompleted, userState);
        }
        
        private void OngetUserOperationCompleted(object arg) {
            if ((this.getUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCompleted(this, new getUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getServerStatusReturn")]
        public Server getServerStatus(Server in0, string in1) {
            object[] results = this.Invoke("getServerStatus", new object[] {
                        in0,
                        in1});
            return ((Server)(results[0]));
        }
        
        /// <remarks/>
        public void getServerStatusAsync(Server in0, string in1) {
            this.getServerStatusAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getServerStatusAsync(Server in0, string in1, object userState) {
            if ((this.getServerStatusOperationCompleted == null)) {
                this.getServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerStatusOperationCompleted);
            }
            this.InvokeAsync("getServerStatus", new object[] {
                        in0,
                        in1}, this.getServerStatusOperationCompleted, userState);
        }
        
        private void OngetServerStatusOperationCompleted(object arg) {
            if ((this.getServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerStatusCompleted(this, new getServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSessionReturn")]
        public string getSession() {
            object[] results = this.Invoke("getSession", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSessionAsync() {
            this.getSessionAsync(null);
        }
        
        /// <remarks/>
        public void getSessionAsync(object userState) {
            if ((this.getSessionOperationCompleted == null)) {
                this.getSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSessionOperationCompleted);
            }
            this.InvokeAsync("getSession", new object[0], this.getSessionOperationCompleted, userState);
        }
        
        private void OngetSessionOperationCompleted(object arg) {
            if ((this.getSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSessionCompleted(this, new getSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllProfilesFromServerReturn")]
        public Profile[] retrieveAllProfilesFromServer(string in0, Server in1, string in2) {
            object[] results = this.Invoke("retrieveAllProfilesFromServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Profile[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllProfilesFromServerAsync(string in0, Server in1, string in2) {
            this.retrieveAllProfilesFromServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void retrieveAllProfilesFromServerAsync(string in0, Server in1, string in2, object userState) {
            if ((this.retrieveAllProfilesFromServerOperationCompleted == null)) {
                this.retrieveAllProfilesFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllProfilesFromServerOperationCompleted);
            }
            this.InvokeAsync("retrieveAllProfilesFromServer", new object[] {
                        in0,
                        in1,
                        in2}, this.retrieveAllProfilesFromServerOperationCompleted, userState);
        }
        
        private void OnretrieveAllProfilesFromServerOperationCompleted(object arg) {
            if ((this.retrieveAllProfilesFromServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllProfilesFromServerCompleted(this, new retrieveAllProfilesFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllPGPServerNamesInDeptReturn")]
        public string[] retrieveAllPGPServerNamesInDept(string in0) {
            object[] results = this.Invoke("retrieveAllPGPServerNamesInDept", new object[] {
                        in0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllPGPServerNamesInDeptAsync(string in0) {
            this.retrieveAllPGPServerNamesInDeptAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllPGPServerNamesInDeptAsync(string in0, object userState) {
            if ((this.retrieveAllPGPServerNamesInDeptOperationCompleted == null)) {
                this.retrieveAllPGPServerNamesInDeptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllPGPServerNamesInDeptOperationCompleted);
            }
            this.InvokeAsync("retrieveAllPGPServerNamesInDept", new object[] {
                        in0}, this.retrieveAllPGPServerNamesInDeptOperationCompleted, userState);
        }
        
        private void OnretrieveAllPGPServerNamesInDeptOperationCompleted(object arg) {
            if ((this.retrieveAllPGPServerNamesInDeptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllPGPServerNamesInDeptCompleted(this, new retrieveAllPGPServerNamesInDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllServerNamesInDeptByTypeReturn")]
        public string[] retrieveAllServerNamesInDeptByType(int in0, string in1) {
            object[] results = this.Invoke("retrieveAllServerNamesInDeptByType", new object[] {
                        in0,
                        in1});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllServerNamesInDeptByTypeAsync(int in0, string in1) {
            this.retrieveAllServerNamesInDeptByTypeAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void retrieveAllServerNamesInDeptByTypeAsync(int in0, string in1, object userState) {
            if ((this.retrieveAllServerNamesInDeptByTypeOperationCompleted == null)) {
                this.retrieveAllServerNamesInDeptByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllServerNamesInDeptByTypeOperationCompleted);
            }
            this.InvokeAsync("retrieveAllServerNamesInDeptByType", new object[] {
                        in0,
                        in1}, this.retrieveAllServerNamesInDeptByTypeOperationCompleted, userState);
        }
        
        private void OnretrieveAllServerNamesInDeptByTypeOperationCompleted(object arg) {
            if ((this.retrieveAllServerNamesInDeptByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllServerNamesInDeptByTypeCompleted(this, new retrieveAllServerNamesInDeptByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllSearchAuditsFromBankReturn")]
        public SearchAudit[] retrieveAllSearchAuditsFromBank(string in0) {
            object[] results = this.Invoke("retrieveAllSearchAuditsFromBank", new object[] {
                        in0});
            return ((SearchAudit[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllSearchAuditsFromBankAsync(string in0) {
            this.retrieveAllSearchAuditsFromBankAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllSearchAuditsFromBankAsync(string in0, object userState) {
            if ((this.retrieveAllSearchAuditsFromBankOperationCompleted == null)) {
                this.retrieveAllSearchAuditsFromBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllSearchAuditsFromBankOperationCompleted);
            }
            this.InvokeAsync("retrieveAllSearchAuditsFromBank", new object[] {
                        in0}, this.retrieveAllSearchAuditsFromBankOperationCompleted, userState);
        }
        
        private void OnretrieveAllSearchAuditsFromBankOperationCompleted(object arg) {
            if ((this.retrieveAllSearchAuditsFromBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllSearchAuditsFromBankCompleted(this, new retrieveAllSearchAuditsFromBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAlertAuditsOlderThanDateReturn")]
        public bool removeAlertAuditsOlderThanDate(DateTime in0, int in1, string in2) {
            object[] results = this.Invoke("removeAlertAuditsOlderThanDate", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAlertAuditsOlderThanDateAsync(DateTime in0, int in1, string in2) {
            this.removeAlertAuditsOlderThanDateAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeAlertAuditsOlderThanDateAsync(DateTime in0, int in1, string in2, object userState) {
            if ((this.removeAlertAuditsOlderThanDateOperationCompleted == null)) {
                this.removeAlertAuditsOlderThanDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAlertAuditsOlderThanDateOperationCompleted);
            }
            this.InvokeAsync("removeAlertAuditsOlderThanDate", new object[] {
                        in0,
                        in1,
                        in2}, this.removeAlertAuditsOlderThanDateOperationCompleted, userState);
        }
        
        private void OnremoveAlertAuditsOlderThanDateOperationCompleted(object arg) {
            if ((this.removeAlertAuditsOlderThanDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAlertAuditsOlderThanDateCompleted(this, new removeAlertAuditsOlderThanDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAlertAuditsOlderThanDaysReturn")]
        public bool removeAlertAuditsOlderThanDays(int in0, int in1, string in2) {
            object[] results = this.Invoke("removeAlertAuditsOlderThanDays", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAlertAuditsOlderThanDaysAsync(int in0, int in1, string in2) {
            this.removeAlertAuditsOlderThanDaysAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeAlertAuditsOlderThanDaysAsync(int in0, int in1, string in2, object userState) {
            if ((this.removeAlertAuditsOlderThanDaysOperationCompleted == null)) {
                this.removeAlertAuditsOlderThanDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAlertAuditsOlderThanDaysOperationCompleted);
            }
            this.InvokeAsync("removeAlertAuditsOlderThanDays", new object[] {
                        in0,
                        in1,
                        in2}, this.removeAlertAuditsOlderThanDaysOperationCompleted, userState);
        }
        
        private void OnremoveAlertAuditsOlderThanDaysOperationCompleted(object arg) {
            if ((this.removeAlertAuditsOlderThanDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAlertAuditsOlderThanDaysCompleted(this, new removeAlertAuditsOlderThanDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retrieveAllServerStatusConfigsReturn")]
        public ServerStatusConfig[] retrieveAllServerStatusConfigs(string in0) {
            object[] results = this.Invoke("retrieveAllServerStatusConfigs", new object[] {
                        in0});
            return ((ServerStatusConfig[])(results[0]));
        }
        
        /// <remarks/>
        public void retrieveAllServerStatusConfigsAsync(string in0) {
            this.retrieveAllServerStatusConfigsAsync(in0, null);
        }
        
        /// <remarks/>
        public void retrieveAllServerStatusConfigsAsync(string in0, object userState) {
            if ((this.retrieveAllServerStatusConfigsOperationCompleted == null)) {
                this.retrieveAllServerStatusConfigsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveAllServerStatusConfigsOperationCompleted);
            }
            this.InvokeAsync("retrieveAllServerStatusConfigs", new object[] {
                        in0}, this.retrieveAllServerStatusConfigsOperationCompleted, userState);
        }
        
        private void OnretrieveAllServerStatusConfigsOperationCompleted(object arg) {
            if ((this.retrieveAllServerStatusConfigsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveAllServerStatusConfigsCompleted(this, new retrieveAllServerStatusConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeKeyReturn")]
        public bool removeKey(int in0, string in1, string in2) {
            object[] results = this.Invoke("removeKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeKeyAsync(int in0, string in1, string in2) {
            this.removeKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void removeKeyAsync(int in0, string in1, string in2, object userState) {
            if ((this.removeKeyOperationCompleted == null)) {
                this.removeKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveKeyOperationCompleted);
            }
            this.InvokeAsync("removeKey", new object[] {
                        in0,
                        in1,
                        in2}, this.removeKeyOperationCompleted, userState);
        }
        
        private void OnremoveKeyOperationCompleted(object arg) {
            if ((this.removeKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeKeyCompleted(this, new removeKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addKeyReturn")]
        public bool addKey(int in0, Key in1, string in2) {
            object[] results = this.Invoke("addKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addKeyAsync(int in0, Key in1, string in2) {
            this.addKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void addKeyAsync(int in0, Key in1, string in2, object userState) {
            if ((this.addKeyOperationCompleted == null)) {
                this.addKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddKeyOperationCompleted);
            }
            this.InvokeAsync("addKey", new object[] {
                        in0,
                        in1,
                        in2}, this.addKeyOperationCompleted, userState);
        }
        
        private void OnaddKeyOperationCompleted(object arg) {
            if ((this.addKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addKeyCompleted(this, new addKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getJMSConfigReturn")]
        public JMSSrvCfg getJMSConfig(string in0) {
            object[] results = this.Invoke("getJMSConfig", new object[] {
                        in0});
            return ((JMSSrvCfg)(results[0]));
        }
        
        /// <remarks/>
        public void getJMSConfigAsync(string in0) {
            this.getJMSConfigAsync(in0, null);
        }
        
        /// <remarks/>
        public void getJMSConfigAsync(string in0, object userState) {
            if ((this.getJMSConfigOperationCompleted == null)) {
                this.getJMSConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetJMSConfigOperationCompleted);
            }
            this.InvokeAsync("getJMSConfig", new object[] {
                        in0}, this.getJMSConfigOperationCompleted, userState);
        }
        
        private void OngetJMSConfigOperationCompleted(object arg) {
            if ((this.getJMSConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getJMSConfigCompleted(this, new getJMSConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getConfigReturn")]
        public Config getConfig(string in0) {
            object[] results = this.Invoke("getConfig", new object[] {
                        in0});
            return ((Config)(results[0]));
        }
        
        /// <remarks/>
        public void getConfigAsync(string in0) {
            this.getConfigAsync(in0, null);
        }
        
        /// <remarks/>
        public void getConfigAsync(string in0, object userState) {
            if ((this.getConfigOperationCompleted == null)) {
                this.getConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConfigOperationCompleted);
            }
            this.InvokeAsync("getConfig", new object[] {
                        in0}, this.getConfigOperationCompleted, userState);
        }
        
        private void OngetConfigOperationCompleted(object arg) {
            if ((this.getConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConfigCompleted(this, new getConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getConfig1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getConfigReturn")]
        public Config getConfig(string in0, string in1) {
            object[] results = this.Invoke("getConfig1", new object[] {
                        in0,
                        in1});
            return ((Config)(results[0]));
        }
        
        /// <remarks/>
        public void getConfig1Async(string in0, string in1) {
            this.getConfig1Async(in0, in1, null);
        }
        
        /// <remarks/>
        public void getConfig1Async(string in0, string in1, object userState) {
            if ((this.getConfig1OperationCompleted == null)) {
                this.getConfig1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConfig1OperationCompleted);
            }
            this.InvokeAsync("getConfig1", new object[] {
                        in0,
                        in1}, this.getConfig1OperationCompleted, userState);
        }
        
        private void OngetConfig1OperationCompleted(object arg) {
            if ((this.getConfig1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConfig1Completed(this, new getConfig1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("closeSessionReturn")]
        public bool closeSession(string in0) {
            object[] results = this.Invoke("closeSession", new object[] {
                        in0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void closeSessionAsync(string in0) {
            this.closeSessionAsync(in0, null);
        }
        
        /// <remarks/>
        public void closeSessionAsync(string in0, object userState) {
            if ((this.closeSessionOperationCompleted == null)) {
                this.closeSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseSessionOperationCompleted);
            }
            this.InvokeAsync("closeSession", new object[] {
                        in0}, this.closeSessionOperationCompleted, userState);
        }
        
        private void OncloseSessionOperationCompleted(object arg) {
            if ((this.closeSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeSessionCompleted(this, new closeSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDepartmentReturn")]
        public Department getDepartment(string in0, string in1) {
            object[] results = this.Invoke("getDepartment", new object[] {
                        in0,
                        in1});
            return ((Department)(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentAsync(string in0, string in1) {
            this.getDepartmentAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getDepartmentAsync(string in0, string in1, object userState) {
            if ((this.getDepartmentOperationCompleted == null)) {
                this.getDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentOperationCompleted);
            }
            this.InvokeAsync("getDepartment", new object[] {
                        in0,
                        in1}, this.getDepartmentOperationCompleted, userState);
        }
        
        private void OngetDepartmentOperationCompleted(object arg) {
            if ((this.getDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentCompleted(this, new getDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("collectorStartReturn")]
        public string collectorStart(string in0) {
            object[] results = this.Invoke("collectorStart", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void collectorStartAsync(string in0) {
            this.collectorStartAsync(in0, null);
        }
        
        /// <remarks/>
        public void collectorStartAsync(string in0, object userState) {
            if ((this.collectorStartOperationCompleted == null)) {
                this.collectorStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OncollectorStartOperationCompleted);
            }
            this.InvokeAsync("collectorStart", new object[] {
                        in0}, this.collectorStartOperationCompleted, userState);
        }
        
        private void OncollectorStartOperationCompleted(object arg) {
            if ((this.collectorStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.collectorStartCompleted(this, new collectorStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("collectorStopReturn")]
        public string collectorStop(string in0) {
            object[] results = this.Invoke("collectorStop", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void collectorStopAsync(string in0) {
            this.collectorStopAsync(in0, null);
        }
        
        /// <remarks/>
        public void collectorStopAsync(string in0, object userState) {
            if ((this.collectorStopOperationCompleted == null)) {
                this.collectorStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OncollectorStopOperationCompleted);
            }
            this.InvokeAsync("collectorStop", new object[] {
                        in0}, this.collectorStopOperationCompleted, userState);
        }
        
        private void OncollectorStopOperationCompleted(object arg) {
            if ((this.collectorStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.collectorStopCompleted(this, new collectorStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getCollectorStatusReturn")]
        public string getCollectorStatus(string in0) {
            object[] results = this.Invoke("getCollectorStatus", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCollectorStatusAsync(string in0) {
            this.getCollectorStatusAsync(in0, null);
        }
        
        /// <remarks/>
        public void getCollectorStatusAsync(string in0, object userState) {
            if ((this.getCollectorStatusOperationCompleted == null)) {
                this.getCollectorStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCollectorStatusOperationCompleted);
            }
            this.InvokeAsync("getCollectorStatus", new object[] {
                        in0}, this.getCollectorStatusOperationCompleted, userState);
        }
        
        private void OngetCollectorStatusOperationCompleted(object arg) {
            if ((this.getCollectorStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCollectorStatusCompleted(this, new getCollectorStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getNodeReturn")]
        public Node getNode(string in0, string in1) {
            object[] results = this.Invoke("getNode", new object[] {
                        in0,
                        in1});
            return ((Node)(results[0]));
        }
        
        /// <remarks/>
        public void getNodeAsync(string in0, string in1) {
            this.getNodeAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getNodeAsync(string in0, string in1, object userState) {
            if ((this.getNodeOperationCompleted == null)) {
                this.getNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeOperationCompleted);
            }
            this.InvokeAsync("getNode", new object[] {
                        in0,
                        in1}, this.getNodeOperationCompleted, userState);
        }
        
        private void OngetNodeOperationCompleted(object arg) {
            if ((this.getNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeCompleted(this, new getNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeNodeReturn")]
        public bool removeNode(string in0, string in1) {
            object[] results = this.Invoke("removeNode", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeNodeAsync(string in0, string in1) {
            this.removeNodeAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeNodeAsync(string in0, string in1, object userState) {
            if ((this.removeNodeOperationCompleted == null)) {
                this.removeNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveNodeOperationCompleted);
            }
            this.InvokeAsync("removeNode", new object[] {
                        in0,
                        in1}, this.removeNodeOperationCompleted, userState);
        }
        
        private void OnremoveNodeOperationCompleted(object arg) {
            if ((this.removeNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeNodeCompleted(this, new removeNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateUserReturn")]
        public bool updateUser(User in0, string in1, string in2) {
            object[] results = this.Invoke("updateUser", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateUserAsync(User in0, string in1, string in2) {
            this.updateUserAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateUserAsync(User in0, string in1, string in2, object userState) {
            if ((this.updateUserOperationCompleted == null)) {
                this.updateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUserOperationCompleted);
            }
            this.InvokeAsync("updateUser", new object[] {
                        in0,
                        in1,
                        in2}, this.updateUserOperationCompleted, userState);
        }
        
        private void OnupdateUserOperationCompleted(object arg) {
            if ((this.updateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUserCompleted(this, new updateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeServerReturn")]
        public bool removeServer(string in0, string in1) {
            object[] results = this.Invoke("removeServer", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeServerAsync(string in0, string in1) {
            this.removeServerAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeServerAsync(string in0, string in1, object userState) {
            if ((this.removeServerOperationCompleted == null)) {
                this.removeServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveServerOperationCompleted);
            }
            this.InvokeAsync("removeServer", new object[] {
                        in0,
                        in1}, this.removeServerOperationCompleted, userState);
        }
        
        private void OnremoveServerOperationCompleted(object arg) {
            if ((this.removeServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeServerCompleted(this, new removeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addUserReturn")]
        public bool addUser(User in0, string in1) {
            object[] results = this.Invoke("addUser", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addUserAsync(User in0, string in1) {
            this.addUserAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addUserAsync(User in0, string in1, object userState) {
            if ((this.addUserOperationCompleted == null)) {
                this.addUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserOperationCompleted);
            }
            this.InvokeAsync("addUser", new object[] {
                        in0,
                        in1}, this.addUserOperationCompleted, userState);
        }
        
        private void OnaddUserOperationCompleted(object arg) {
            if ((this.addUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserCompleted(this, new addUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAuditReturn")]
        public AuditBase getAudit(string in0, string in1) {
            object[] results = this.Invoke("getAudit", new object[] {
                        in0,
                        in1});
            return ((AuditBase)(results[0]));
        }
        
        /// <remarks/>
        public void getAuditAsync(string in0, string in1) {
            this.getAuditAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getAuditAsync(string in0, string in1, object userState) {
            if ((this.getAuditOperationCompleted == null)) {
                this.getAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAuditOperationCompleted);
            }
            this.InvokeAsync("getAudit", new object[] {
                        in0,
                        in1}, this.getAuditOperationCompleted, userState);
        }
        
        private void OngetAuditOperationCompleted(object arg) {
            if ((this.getAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAuditCompleted(this, new getAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateServerReturn")]
        public bool updateServer(Server in0, string in1, string in2) {
            object[] results = this.Invoke("updateServer", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateServerAsync(Server in0, string in1, string in2) {
            this.updateServerAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateServerAsync(Server in0, string in1, string in2, object userState) {
            if ((this.updateServerOperationCompleted == null)) {
                this.updateServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateServerOperationCompleted);
            }
            this.InvokeAsync("updateServer", new object[] {
                        in0,
                        in1,
                        in2}, this.updateServerOperationCompleted, userState);
        }
        
        private void OnupdateServerOperationCompleted(object arg) {
            if ((this.updateServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateServerCompleted(this, new updateServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchUsersReturn")]
        public User[] searchUsers(string in0, string in1, string in2, string in3, string in4, string in5) {
            object[] results = this.Invoke("searchUsers", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4,
                        in5});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void searchUsersAsync(string in0, string in1, string in2, string in3, string in4, string in5) {
            this.searchUsersAsync(in0, in1, in2, in3, in4, in5, null);
        }
        
        /// <remarks/>
        public void searchUsersAsync(string in0, string in1, string in2, string in3, string in4, string in5, object userState) {
            if ((this.searchUsersOperationCompleted == null)) {
                this.searchUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchUsersOperationCompleted);
            }
            this.InvokeAsync("searchUsers", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4,
                        in5}, this.searchUsersOperationCompleted, userState);
        }
        
        private void OnsearchUsersOperationCompleted(object arg) {
            if ((this.searchUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchUsersCompleted(this, new searchUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateNodeReturn")]
        public bool updateNode(Node in0, string in1, string in2) {
            object[] results = this.Invoke("updateNode", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateNodeAsync(Node in0, string in1, string in2) {
            this.updateNodeAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateNodeAsync(Node in0, string in1, string in2, object userState) {
            if ((this.updateNodeOperationCompleted == null)) {
                this.updateNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateNodeOperationCompleted);
            }
            this.InvokeAsync("updateNode", new object[] {
                        in0,
                        in1,
                        in2}, this.updateNodeOperationCompleted, userState);
        }
        
        private void OnupdateNodeOperationCompleted(object arg) {
            if ((this.updateNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateNodeCompleted(this, new updateNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchAuditsReturn")]
        public AuditBase[] searchAudits(AuditBase in0, string in1, string in2) {
            object[] results = this.Invoke("searchAudits", new object[] {
                        in0,
                        in1,
                        in2});
            return ((AuditBase[])(results[0]));
        }
        
        /// <remarks/>
        public void searchAuditsAsync(AuditBase in0, string in1, string in2) {
            this.searchAuditsAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void searchAuditsAsync(AuditBase in0, string in1, string in2, object userState) {
            if ((this.searchAuditsOperationCompleted == null)) {
                this.searchAuditsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchAuditsOperationCompleted);
            }
            this.InvokeAsync("searchAudits", new object[] {
                        in0,
                        in1,
                        in2}, this.searchAuditsOperationCompleted, userState);
        }
        
        private void OnsearchAuditsOperationCompleted(object arg) {
            if ((this.searchAuditsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchAuditsCompleted(this, new searchAuditsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addServerReturn")]
        public bool addServer(Server in0, string in1) {
            object[] results = this.Invoke("addServer", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addServerAsync(Server in0, string in1) {
            this.addServerAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addServerAsync(Server in0, string in1, object userState) {
            if ((this.addServerOperationCompleted == null)) {
                this.addServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddServerOperationCompleted);
            }
            this.InvokeAsync("addServer", new object[] {
                        in0,
                        in1}, this.addServerOperationCompleted, userState);
        }
        
        private void OnaddServerOperationCompleted(object arg) {
            if ((this.addServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addServerCompleted(this, new addServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAuditReturn")]
        public bool removeAudit(string in0, string in1) {
            object[] results = this.Invoke("removeAudit", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAuditAsync(string in0, string in1) {
            this.removeAuditAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeAuditAsync(string in0, string in1, object userState) {
            if ((this.removeAuditOperationCompleted == null)) {
                this.removeAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAuditOperationCompleted);
            }
            this.InvokeAsync("removeAudit", new object[] {
                        in0,
                        in1}, this.removeAuditOperationCompleted, userState);
        }
        
        private void OnremoveAuditOperationCompleted(object arg) {
            if ((this.removeAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAuditCompleted(this, new removeAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeConfigReturn")]
        public bool removeConfig(string in0, string in1) {
            object[] results = this.Invoke("removeConfig", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeConfigAsync(string in0, string in1) {
            this.removeConfigAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeConfigAsync(string in0, string in1, object userState) {
            if ((this.removeConfigOperationCompleted == null)) {
                this.removeConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveConfigOperationCompleted);
            }
            this.InvokeAsync("removeConfig", new object[] {
                        in0,
                        in1}, this.removeConfigOperationCompleted, userState);
        }
        
        private void OnremoveConfigOperationCompleted(object arg) {
            if ((this.removeConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeConfigCompleted(this, new removeConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateConfigReturn")]
        public bool updateConfig(Config in0, string in1, string in2) {
            object[] results = this.Invoke("updateConfig", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateConfigAsync(Config in0, string in1, string in2) {
            this.updateConfigAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateConfigAsync(Config in0, string in1, string in2, object userState) {
            if ((this.updateConfigOperationCompleted == null)) {
                this.updateConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateConfigOperationCompleted);
            }
            this.InvokeAsync("updateConfig", new object[] {
                        in0,
                        in1,
                        in2}, this.updateConfigOperationCompleted, userState);
        }
        
        private void OnupdateConfigOperationCompleted(object arg) {
            if ((this.updateConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateConfigCompleted(this, new updateConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateGroupReturn")]
        public bool updateGroup(Role in0, string in1, string in2) {
            object[] results = this.Invoke("updateGroup", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateGroupAsync(Role in0, string in1, string in2) {
            this.updateGroupAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateGroupAsync(Role in0, string in1, string in2, object userState) {
            if ((this.updateGroupOperationCompleted == null)) {
                this.updateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateGroupOperationCompleted);
            }
            this.InvokeAsync("updateGroup", new object[] {
                        in0,
                        in1,
                        in2}, this.updateGroupOperationCompleted, userState);
        }
        
        private void OnupdateGroupOperationCompleted(object arg) {
            if ((this.updateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateGroupCompleted(this, new updateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchFilesReturn")]
        public FileInfo[] searchFiles(FileInfo in0, string in1, string in2) {
            object[] results = this.Invoke("searchFiles", new object[] {
                        in0,
                        in1,
                        in2});
            return ((FileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void searchFilesAsync(FileInfo in0, string in1, string in2) {
            this.searchFilesAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void searchFilesAsync(FileInfo in0, string in1, string in2, object userState) {
            if ((this.searchFilesOperationCompleted == null)) {
                this.searchFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchFilesOperationCompleted);
            }
            this.InvokeAsync("searchFiles", new object[] {
                        in0,
                        in1,
                        in2}, this.searchFilesOperationCompleted, userState);
        }
        
        private void OnsearchFilesOperationCompleted(object arg) {
            if ((this.searchFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchFilesCompleted(this, new searchFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeFileReturn")]
        public bool removeFile(string in0, string in1) {
            object[] results = this.Invoke("removeFile", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeFileAsync(string in0, string in1) {
            this.removeFileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeFileAsync(string in0, string in1, object userState) {
            if ((this.removeFileOperationCompleted == null)) {
                this.removeFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveFileOperationCompleted);
            }
            this.InvokeAsync("removeFile", new object[] {
                        in0,
                        in1}, this.removeFileOperationCompleted, userState);
        }
        
        private void OnremoveFileOperationCompleted(object arg) {
            if ((this.removeFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeFileCompleted(this, new removeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchNodesReturn")]
        public Node[] searchNodes(Node in0, string in1) {
            object[] results = this.Invoke("searchNodes", new object[] {
                        in0,
                        in1});
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public void searchNodesAsync(Node in0, string in1) {
            this.searchNodesAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void searchNodesAsync(Node in0, string in1, object userState) {
            if ((this.searchNodesOperationCompleted == null)) {
                this.searchNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchNodesOperationCompleted);
            }
            this.InvokeAsync("searchNodes", new object[] {
                        in0,
                        in1}, this.searchNodesOperationCompleted, userState);
        }
        
        private void OnsearchNodesOperationCompleted(object arg) {
            if ((this.searchNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchNodesCompleted(this, new searchNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateFileReturn")]
        public bool updateFile(FileInfo in0, string in1, string in2) {
            object[] results = this.Invoke("updateFile", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateFileAsync(FileInfo in0, string in1, string in2) {
            this.updateFileAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateFileAsync(FileInfo in0, string in1, string in2, object userState) {
            if ((this.updateFileOperationCompleted == null)) {
                this.updateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateFileOperationCompleted);
            }
            this.InvokeAsync("updateFile", new object[] {
                        in0,
                        in1,
                        in2}, this.updateFileOperationCompleted, userState);
        }
        
        private void OnupdateFileOperationCompleted(object arg) {
            if ((this.updateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateFileCompleted(this, new updateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getTransferReturn")]
        public Transfer getTransfer(string in0, string in1) {
            object[] results = this.Invoke("getTransfer", new object[] {
                        in0,
                        in1});
            return ((Transfer)(results[0]));
        }
        
        /// <remarks/>
        public void getTransferAsync(string in0, string in1) {
            this.getTransferAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getTransferAsync(string in0, string in1, object userState) {
            if ((this.getTransferOperationCompleted == null)) {
                this.getTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransferOperationCompleted);
            }
            this.InvokeAsync("getTransfer", new object[] {
                        in0,
                        in1}, this.getTransferOperationCompleted, userState);
        }
        
        private void OngetTransferOperationCompleted(object arg) {
            if ((this.getTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransferCompleted(this, new getTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addTransferReturn")]
        public string addTransfer(Transfer in0, string in1) {
            object[] results = this.Invoke("addTransfer", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addTransferAsync(Transfer in0, string in1) {
            this.addTransferAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addTransferAsync(Transfer in0, string in1, object userState) {
            if ((this.addTransferOperationCompleted == null)) {
                this.addTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTransferOperationCompleted);
            }
            this.InvokeAsync("addTransfer", new object[] {
                        in0,
                        in1}, this.addTransferOperationCompleted, userState);
        }
        
        private void OnaddTransferOperationCompleted(object arg) {
            if ((this.addTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTransferCompleted(this, new addTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addAlertReturn")]
        public string addAlert(Alert in0, string in1) {
            object[] results = this.Invoke("addAlert", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addAlertAsync(Alert in0, string in1) {
            this.addAlertAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addAlertAsync(Alert in0, string in1, object userState) {
            if ((this.addAlertOperationCompleted == null)) {
                this.addAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAlertOperationCompleted);
            }
            this.InvokeAsync("addAlert", new object[] {
                        in0,
                        in1}, this.addAlertOperationCompleted, userState);
        }
        
        private void OnaddAlertOperationCompleted(object arg) {
            if ((this.addAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAlertCompleted(this, new addAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateAlertReturn")]
        public bool updateAlert(Alert in0, string in1) {
            object[] results = this.Invoke("updateAlert", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateAlertAsync(Alert in0, string in1) {
            this.updateAlertAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateAlertAsync(Alert in0, string in1, object userState) {
            if ((this.updateAlertOperationCompleted == null)) {
                this.updateAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAlertOperationCompleted);
            }
            this.InvokeAsync("updateAlert", new object[] {
                        in0,
                        in1}, this.updateAlertOperationCompleted, userState);
        }
        
        private void OnupdateAlertOperationCompleted(object arg) {
            if ((this.updateAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAlertCompleted(this, new updateAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeAlertReturn")]
        public bool removeAlert(Alert in0, string in1) {
            object[] results = this.Invoke("removeAlert", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeAlertAsync(Alert in0, string in1) {
            this.removeAlertAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeAlertAsync(Alert in0, string in1, object userState) {
            if ((this.removeAlertOperationCompleted == null)) {
                this.removeAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAlertOperationCompleted);
            }
            this.InvokeAsync("removeAlert", new object[] {
                        in0,
                        in1}, this.removeAlertOperationCompleted, userState);
        }
        
        private void OnremoveAlertOperationCompleted(object arg) {
            if ((this.removeAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAlertCompleted(this, new removeAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAlertReturn")]
        public Alert getAlert(Alert in0, string in1) {
            object[] results = this.Invoke("getAlert", new object[] {
                        in0,
                        in1});
            return ((Alert)(results[0]));
        }
        
        /// <remarks/>
        public void getAlertAsync(Alert in0, string in1) {
            this.getAlertAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getAlertAsync(Alert in0, string in1, object userState) {
            if ((this.getAlertOperationCompleted == null)) {
                this.getAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAlertOperationCompleted);
            }
            this.InvokeAsync("getAlert", new object[] {
                        in0,
                        in1}, this.getAlertOperationCompleted, userState);
        }
        
        private void OngetAlertOperationCompleted(object arg) {
            if ((this.getAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAlertCompleted(this, new getAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateKeyReturn")]
        public bool updateKey(int in0, Key in1, string in2, string in3) {
            object[] results = this.Invoke("updateKey", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateKeyAsync(int in0, Key in1, string in2, string in3) {
            this.updateKeyAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void updateKeyAsync(int in0, Key in1, string in2, string in3, object userState) {
            if ((this.updateKeyOperationCompleted == null)) {
                this.updateKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateKeyOperationCompleted);
            }
            this.InvokeAsync("updateKey", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.updateKeyOperationCompleted, userState);
        }
        
        private void OnupdateKeyOperationCompleted(object arg) {
            if ((this.updateKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateKeyCompleted(this, new updateKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getUserKeyReturn")]
        public Key getUserKey(int in0, string in1, string in2) {
            object[] results = this.Invoke("getUserKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void getUserKeyAsync(int in0, string in1, string in2) {
            this.getUserKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getUserKeyAsync(int in0, string in1, string in2, object userState) {
            if ((this.getUserKeyOperationCompleted == null)) {
                this.getUserKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserKeyOperationCompleted);
            }
            this.InvokeAsync("getUserKey", new object[] {
                        in0,
                        in1,
                        in2}, this.getUserKeyOperationCompleted, userState);
        }
        
        private void OngetUserKeyOperationCompleted(object arg) {
            if ((this.getUserKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserKeyCompleted(this, new getUserKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getServerKeyReturn")]
        public Key getServerKey(int in0, string in1, string in2) {
            object[] results = this.Invoke("getServerKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void getServerKeyAsync(int in0, string in1, string in2) {
            this.getServerKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getServerKeyAsync(int in0, string in1, string in2, object userState) {
            if ((this.getServerKeyOperationCompleted == null)) {
                this.getServerKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerKeyOperationCompleted);
            }
            this.InvokeAsync("getServerKey", new object[] {
                        in0,
                        in1,
                        in2}, this.getServerKeyOperationCompleted, userState);
        }
        
        private void OngetServerKeyOperationCompleted(object arg) {
            if ((this.getServerKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerKeyCompleted(this, new getServerKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSystemKeyReturn")]
        public Key getSystemKey(int in0, string in1, string in2) {
            object[] results = this.Invoke("getSystemKey", new object[] {
                        in0,
                        in1,
                        in2});
            return ((Key)(results[0]));
        }
        
        /// <remarks/>
        public void getSystemKeyAsync(int in0, string in1, string in2) {
            this.getSystemKeyAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getSystemKeyAsync(int in0, string in1, string in2, object userState) {
            if ((this.getSystemKeyOperationCompleted == null)) {
                this.getSystemKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSystemKeyOperationCompleted);
            }
            this.InvokeAsync("getSystemKey", new object[] {
                        in0,
                        in1,
                        in2}, this.getSystemKeyOperationCompleted, userState);
        }
        
        private void OngetSystemKeyOperationCompleted(object arg) {
            if ((this.getSystemKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSystemKeyCompleted(this, new getSystemKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("searchKeysReturn")]
        public Key[] searchKeys(int in0, Key in1, string in2, string in3) {
            object[] results = this.Invoke("searchKeys", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((Key[])(results[0]));
        }
        
        /// <remarks/>
        public void searchKeysAsync(int in0, Key in1, string in2, string in3) {
            this.searchKeysAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void searchKeysAsync(int in0, Key in1, string in2, string in3, object userState) {
            if ((this.searchKeysOperationCompleted == null)) {
                this.searchKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchKeysOperationCompleted);
            }
            this.InvokeAsync("searchKeys", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.searchKeysOperationCompleted, userState);
        }
        
        private void OnsearchKeysOperationCompleted(object arg) {
            if ((this.searchKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchKeysCompleted(this, new searchKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("LDAPSyncUserReturn")]
        public object[] LDAPSyncUser(bool in0, string in1, string in2) {
            object[] results = this.Invoke("LDAPSyncUser", new object[] {
                        in0,
                        in1,
                        in2});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void LDAPSyncUserAsync(bool in0, string in1, string in2) {
            this.LDAPSyncUserAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void LDAPSyncUserAsync(bool in0, string in1, string in2, object userState) {
            if ((this.LDAPSyncUserOperationCompleted == null)) {
                this.LDAPSyncUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLDAPSyncUserOperationCompleted);
            }
            this.InvokeAsync("LDAPSyncUser", new object[] {
                        in0,
                        in1,
                        in2}, this.LDAPSyncUserOperationCompleted, userState);
        }
        
        private void OnLDAPSyncUserOperationCompleted(object arg) {
            if ((this.LDAPSyncUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LDAPSyncUserCompleted(this, new LDAPSyncUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getBWSessionReturn")]
        public string getBWSession() {
            object[] results = this.Invoke("getBWSession", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBWSessionAsync() {
            this.getBWSessionAsync(null);
        }
        
        /// <remarks/>
        public void getBWSessionAsync(object userState) {
            if ((this.getBWSessionOperationCompleted == null)) {
                this.getBWSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBWSessionOperationCompleted);
            }
            this.InvokeAsync("getBWSession", new object[0], this.getBWSessionOperationCompleted, userState);
        }
        
        private void OngetBWSessionOperationCompleted(object arg) {
            if ((this.getBWSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBWSessionCompleted(this, new getBWSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addNodeReturn")]
        public bool addNode(Node in0, string in1) {
            object[] results = this.Invoke("addNode", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addNodeAsync(Node in0, string in1) {
            this.addNodeAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addNodeAsync(Node in0, string in1, object userState) {
            if ((this.addNodeOperationCompleted == null)) {
                this.addNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddNodeOperationCompleted);
            }
            this.InvokeAsync("addNode", new object[] {
                        in0,
                        in1}, this.addNodeOperationCompleted, userState);
        }
        
        private void OnaddNodeOperationCompleted(object arg) {
            if ((this.addNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addNodeCompleted(this, new addNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://adminService.soap.sift.proginet.com", ResponseNamespace="https://fxcc.fx.com:8443/fxcc/services/AdministratorService")]
        [return: System.Xml.Serialization.SoapElementAttribute("addFileReturn")]
        public string addFile(FileInfo in0, string in1) {
            object[] results = this.Invoke("addFile", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addFileAsync(FileInfo in0, string in1) {
            this.addFileAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void addFileAsync(FileInfo in0, string in1, object userState) {
            if ((this.addFileOperationCompleted == null)) {
                this.addFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddFileOperationCompleted);
            }
            this.InvokeAsync("addFile", new object[] {
                        in0,
                        in1}, this.addFileOperationCompleted, userState);
        }
        
        private void OnaddFileOperationCompleted(object arg) {
            if ((this.addFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addFileCompleted(this, new addFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Transfer))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class FileInfo {
        
        private string cRLFField;
        
        private string fTPAliasField;
        
        private string fTPAllowClientTransModeField;
        
        private string fTPAllowCreateDirField;
        
        private string fTPAllowDeleteField;
        
        private string fTPAllowRemoveDirField;
        
        private string fTPAllowRenameField;
        
        private string fTPSiteCmdPassThroughField;
        
        private string iSServerNameField;
        
        private string jMSMaxMsgSizeField;
        
        private string jMSMessageIDField;
        
        private string jMSNameOrFilePathField;
        
        private string jMSOrFileField;
        
        private string jMSPropertyField;
        
        private string jMSSelectorField;
        
        private string jMSTransferStatusCheckField;
        
        private string jMSTypePropertyField;
        
        private string jMSUserIDField;
        
        private string jMSUserPwdField;
        
        private string jPAFullLocalFileNameField;
        
        private string jPAFullRemoteFileNameField;
        
        private string jPALocalTransactionNumberField;
        
        private string jPALocalUserIdField;
        
        private string jPARemoteTransactionNumberField;
        
        private string jPARemoteUsrIdField;
        
        private string lRECLField;
        
        private string oS390AllocPriField;
        
        private string oS390AllocSecField;
        
        private string oS390AllocTypeField;
        
        private string oS390BlockSizeField;
        
        private string oS390DataClassField;
        
        private string oS390MgtClassField;
        
        private string oS390StorClassField;
        
        private string oS390UnitField;
        
        private string oS390VolumeField;
        
        private string pGPArmorFileField;
        
        private string pGPCompressAlgField;
        
        private string pGPDecryptFileField;
        
        private string pGPEncryptAlgField;
        
        private string pGPEncryptFileField;
        
        private string pGPHashingAlgField;
        
        private string pGPPrivateKeyField;
        
        private string pGPSignFileField;
        
        private string pGPStrictVerifySignField;
        
        private string pGPTextModeField;
        
        private string pGPVerifySignField;
        
        private string rECFMField;
        
        private string allowableProtocolField;
        
        private string authRoleIdField;
        
        private string authUserIdField;
        
        private DateTime availableDateField;
        
        private string availableUpdatedByField;
        
        private string chkptCountField;
        
        private string chkptIntervalField;
        
        private string chkptRestartFlagField;
        
        private string chkptTryMaxCountField;
        
        private string clientCompressFlagField;
        
        private string clientFileNameField;
        
        private string conversionFlagField;
        
        private string createdByField;
        
        private string credPassThruFlagField;
        
        private string dataTypeField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateLastProcessedField;
        
        private DateTime dateUpdatedField;
        
        private string defaultNTDomainField;
        
        private string defaultNodePwdField;
        
        private string defaultNodeUserIdField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private DirectoryElementList[] directoryFileListField;
        
        private string directoryTransferField;
        
        private string disableFlagField;
        
        private string emailFailureFlagField;
        
        private string emailFailureTemplateField;
        
        private string emailSuccessFlagField;
        
        private string emailSuccessTemplateField;
        
        private string encryptFlagField;
        
        private DateTime expirationDateField;
        
        private string fileOptionField;
        
        private string idField;
        
        private string lastReturnCodeField;
        
        private string localTranslationTableField;
        
        private string nodeNameField;
        
        private string notifyEmailTemplateField;
        
        private string notifyFlagField;
        
        private string oneTimeFlagField;
        
        private string postActionData1Field;
        
        private string postActionData2Field;
        
        private string postActionData3Field;
        
        private string postActionData4Field;
        
        private string postActionFlag1Field;
        
        private string postActionFlag2Field;
        
        private string postActionFlag3Field;
        
        private string postActionFlag4Field;
        
        private string postActionType1Field;
        
        private string postActionType2Field;
        
        private string postActionType3Field;
        
        private string postActionType4Field;
        
        private string processNameField;
        
        private string remoteTranslationTableField;
        
        private string requestIDField;
        
        private string restartAvailableField;
        
        private string sendRecvFlagField;
        
        private string serverFileNameField;
        
        private string toEmailAddrFailureField;
        
        private string toEmailAddrSuccessField;
        
        private string tokenDataField;
        
        private DateTime tokenDateSetField;
        
        private string tokenFlagField;
        
        private string traceFlagField;
        
        private string transferCompletionFlagField;
        
        private string transferIDField;
        
        private string transferWorkField;
        
        private string unixPermissionsField;
        
        private string updatedByField;
        
        private string uploadViewField;
        
        private string userDataField;
        
        private string validDaysField;
        
        private string validEndTimeField;
        
        private string validStartTimeField;
        
        private string virusCheckFlagField;
        
        private string writeModeField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CRLF {
            get {
                return this.cRLFField;
            }
            set {
                this.cRLFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAlias {
            get {
                return this.fTPAliasField;
            }
            set {
                this.fTPAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAllowClientTransMode {
            get {
                return this.fTPAllowClientTransModeField;
            }
            set {
                this.fTPAllowClientTransModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAllowCreateDir {
            get {
                return this.fTPAllowCreateDirField;
            }
            set {
                this.fTPAllowCreateDirField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAllowDelete {
            get {
                return this.fTPAllowDeleteField;
            }
            set {
                this.fTPAllowDeleteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAllowRemoveDir {
            get {
                return this.fTPAllowRemoveDirField;
            }
            set {
                this.fTPAllowRemoveDirField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAllowRename {
            get {
                return this.fTPAllowRenameField;
            }
            set {
                this.fTPAllowRenameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPSiteCmdPassThrough {
            get {
                return this.fTPSiteCmdPassThroughField;
            }
            set {
                this.fTPSiteCmdPassThroughField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ISServerName {
            get {
                return this.iSServerNameField;
            }
            set {
                this.iSServerNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSMaxMsgSize {
            get {
                return this.jMSMaxMsgSizeField;
            }
            set {
                this.jMSMaxMsgSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSMessageID {
            get {
                return this.jMSMessageIDField;
            }
            set {
                this.jMSMessageIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSNameOrFilePath {
            get {
                return this.jMSNameOrFilePathField;
            }
            set {
                this.jMSNameOrFilePathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSOrFile {
            get {
                return this.jMSOrFileField;
            }
            set {
                this.jMSOrFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSProperty {
            get {
                return this.jMSPropertyField;
            }
            set {
                this.jMSPropertyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSSelector {
            get {
                return this.jMSSelectorField;
            }
            set {
                this.jMSSelectorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSTransferStatusCheck {
            get {
                return this.jMSTransferStatusCheckField;
            }
            set {
                this.jMSTransferStatusCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSTypeProperty {
            get {
                return this.jMSTypePropertyField;
            }
            set {
                this.jMSTypePropertyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSUserID {
            get {
                return this.jMSUserIDField;
            }
            set {
                this.jMSUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSUserPwd {
            get {
                return this.jMSUserPwdField;
            }
            set {
                this.jMSUserPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JPAFullLocalFileName {
            get {
                return this.jPAFullLocalFileNameField;
            }
            set {
                this.jPAFullLocalFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JPAFullRemoteFileName {
            get {
                return this.jPAFullRemoteFileNameField;
            }
            set {
                this.jPAFullRemoteFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JPALocalTransactionNumber {
            get {
                return this.jPALocalTransactionNumberField;
            }
            set {
                this.jPALocalTransactionNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JPALocalUserId {
            get {
                return this.jPALocalUserIdField;
            }
            set {
                this.jPALocalUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JPARemoteTransactionNumber {
            get {
                return this.jPARemoteTransactionNumberField;
            }
            set {
                this.jPARemoteTransactionNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JPARemoteUsrId {
            get {
                return this.jPARemoteUsrIdField;
            }
            set {
                this.jPARemoteUsrIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string LRECL {
            get {
                return this.lRECLField;
            }
            set {
                this.lRECLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocPri {
            get {
                return this.oS390AllocPriField;
            }
            set {
                this.oS390AllocPriField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocSec {
            get {
                return this.oS390AllocSecField;
            }
            set {
                this.oS390AllocSecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocType {
            get {
                return this.oS390AllocTypeField;
            }
            set {
                this.oS390AllocTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390BlockSize {
            get {
                return this.oS390BlockSizeField;
            }
            set {
                this.oS390BlockSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390DataClass {
            get {
                return this.oS390DataClassField;
            }
            set {
                this.oS390DataClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390MgtClass {
            get {
                return this.oS390MgtClassField;
            }
            set {
                this.oS390MgtClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390StorClass {
            get {
                return this.oS390StorClassField;
            }
            set {
                this.oS390StorClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390Unit {
            get {
                return this.oS390UnitField;
            }
            set {
                this.oS390UnitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390Volume {
            get {
                return this.oS390VolumeField;
            }
            set {
                this.oS390VolumeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPArmorFile {
            get {
                return this.pGPArmorFileField;
            }
            set {
                this.pGPArmorFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPCompressAlg {
            get {
                return this.pGPCompressAlgField;
            }
            set {
                this.pGPCompressAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPDecryptFile {
            get {
                return this.pGPDecryptFileField;
            }
            set {
                this.pGPDecryptFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEncryptAlg {
            get {
                return this.pGPEncryptAlgField;
            }
            set {
                this.pGPEncryptAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEncryptFile {
            get {
                return this.pGPEncryptFileField;
            }
            set {
                this.pGPEncryptFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPHashingAlg {
            get {
                return this.pGPHashingAlgField;
            }
            set {
                this.pGPHashingAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPPrivateKey {
            get {
                return this.pGPPrivateKeyField;
            }
            set {
                this.pGPPrivateKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSignFile {
            get {
                return this.pGPSignFileField;
            }
            set {
                this.pGPSignFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPStrictVerifySign {
            get {
                return this.pGPStrictVerifySignField;
            }
            set {
                this.pGPStrictVerifySignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPTextMode {
            get {
                return this.pGPTextModeField;
            }
            set {
                this.pGPTextModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPVerifySign {
            get {
                return this.pGPVerifySignField;
            }
            set {
                this.pGPVerifySignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string RECFM {
            get {
                return this.rECFMField;
            }
            set {
                this.rECFMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string allowableProtocol {
            get {
                return this.allowableProtocolField;
            }
            set {
                this.allowableProtocolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string authRoleId {
            get {
                return this.authRoleIdField;
            }
            set {
                this.authRoleIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string authUserId {
            get {
                return this.authUserIdField;
            }
            set {
                this.authUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime availableDate {
            get {
                return this.availableDateField;
            }
            set {
                this.availableDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string availableUpdatedBy {
            get {
                return this.availableUpdatedByField;
            }
            set {
                this.availableUpdatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptCount {
            get {
                return this.chkptCountField;
            }
            set {
                this.chkptCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptInterval {
            get {
                return this.chkptIntervalField;
            }
            set {
                this.chkptIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptRestartFlag {
            get {
                return this.chkptRestartFlagField;
            }
            set {
                this.chkptRestartFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptTryMaxCount {
            get {
                return this.chkptTryMaxCountField;
            }
            set {
                this.chkptTryMaxCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientCompressFlag {
            get {
                return this.clientCompressFlagField;
            }
            set {
                this.clientCompressFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileName {
            get {
                return this.clientFileNameField;
            }
            set {
                this.clientFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string conversionFlag {
            get {
                return this.conversionFlagField;
            }
            set {
                this.conversionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string credPassThruFlag {
            get {
                return this.credPassThruFlagField;
            }
            set {
                this.credPassThruFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateLastProcessed {
            get {
                return this.dateLastProcessedField;
            }
            set {
                this.dateLastProcessedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultNTDomain {
            get {
                return this.defaultNTDomainField;
            }
            set {
                this.defaultNTDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultNodePwd {
            get {
                return this.defaultNodePwdField;
            }
            set {
                this.defaultNodePwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultNodeUserId {
            get {
                return this.defaultNodeUserIdField;
            }
            set {
                this.defaultNodeUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DirectoryElementList[] directoryFileList {
            get {
                return this.directoryFileListField;
            }
            set {
                this.directoryFileListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string directoryTransfer {
            get {
                return this.directoryTransferField;
            }
            set {
                this.directoryTransferField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string disableFlag {
            get {
                return this.disableFlagField;
            }
            set {
                this.disableFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureFlag {
            get {
                return this.emailFailureFlagField;
            }
            set {
                this.emailFailureFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureTemplate {
            get {
                return this.emailFailureTemplateField;
            }
            set {
                this.emailFailureTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessFlag {
            get {
                return this.emailSuccessFlagField;
            }
            set {
                this.emailSuccessFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessTemplate {
            get {
                return this.emailSuccessTemplateField;
            }
            set {
                this.emailSuccessTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptFlag {
            get {
                return this.encryptFlagField;
            }
            set {
                this.encryptFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileOption {
            get {
                return this.fileOptionField;
            }
            set {
                this.fileOptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastReturnCode {
            get {
                return this.lastReturnCodeField;
            }
            set {
                this.lastReturnCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localTranslationTable {
            get {
                return this.localTranslationTableField;
            }
            set {
                this.localTranslationTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string notifyEmailTemplate {
            get {
                return this.notifyEmailTemplateField;
            }
            set {
                this.notifyEmailTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string notifyFlag {
            get {
                return this.notifyFlagField;
            }
            set {
                this.notifyFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string oneTimeFlag {
            get {
                return this.oneTimeFlagField;
            }
            set {
                this.oneTimeFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData1 {
            get {
                return this.postActionData1Field;
            }
            set {
                this.postActionData1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData2 {
            get {
                return this.postActionData2Field;
            }
            set {
                this.postActionData2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData3 {
            get {
                return this.postActionData3Field;
            }
            set {
                this.postActionData3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData4 {
            get {
                return this.postActionData4Field;
            }
            set {
                this.postActionData4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag1 {
            get {
                return this.postActionFlag1Field;
            }
            set {
                this.postActionFlag1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag2 {
            get {
                return this.postActionFlag2Field;
            }
            set {
                this.postActionFlag2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag3 {
            get {
                return this.postActionFlag3Field;
            }
            set {
                this.postActionFlag3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag4 {
            get {
                return this.postActionFlag4Field;
            }
            set {
                this.postActionFlag4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType1 {
            get {
                return this.postActionType1Field;
            }
            set {
                this.postActionType1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType2 {
            get {
                return this.postActionType2Field;
            }
            set {
                this.postActionType2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType3 {
            get {
                return this.postActionType3Field;
            }
            set {
                this.postActionType3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType4 {
            get {
                return this.postActionType4Field;
            }
            set {
                this.postActionType4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string processName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteTranslationTable {
            get {
                return this.remoteTranslationTableField;
            }
            set {
                this.remoteTranslationTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string requestID {
            get {
                return this.requestIDField;
            }
            set {
                this.requestIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string restartAvailable {
            get {
                return this.restartAvailableField;
            }
            set {
                this.restartAvailableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sendRecvFlag {
            get {
                return this.sendRecvFlagField;
            }
            set {
                this.sendRecvFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileName {
            get {
                return this.serverFileNameField;
            }
            set {
                this.serverFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toEmailAddrFailure {
            get {
                return this.toEmailAddrFailureField;
            }
            set {
                this.toEmailAddrFailureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toEmailAddrSuccess {
            get {
                return this.toEmailAddrSuccessField;
            }
            set {
                this.toEmailAddrSuccessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tokenData {
            get {
                return this.tokenDataField;
            }
            set {
                this.tokenDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime tokenDateSet {
            get {
                return this.tokenDateSetField;
            }
            set {
                this.tokenDateSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tokenFlag {
            get {
                return this.tokenFlagField;
            }
            set {
                this.tokenFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlag {
            get {
                return this.traceFlagField;
            }
            set {
                this.traceFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferCompletionFlag {
            get {
                return this.transferCompletionFlagField;
            }
            set {
                this.transferCompletionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferID {
            get {
                return this.transferIDField;
            }
            set {
                this.transferIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferWork {
            get {
                return this.transferWorkField;
            }
            set {
                this.transferWorkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string unixPermissions {
            get {
                return this.unixPermissionsField;
            }
            set {
                this.unixPermissionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string uploadView {
            get {
                return this.uploadViewField;
            }
            set {
                this.uploadViewField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userData {
            get {
                return this.userDataField;
            }
            set {
                this.userDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validDays {
            get {
                return this.validDaysField;
            }
            set {
                this.validDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validEndTime {
            get {
                return this.validEndTimeField;
            }
            set {
                this.validEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validStartTime {
            get {
                return this.validStartTimeField;
            }
            set {
                this.validStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string virusCheckFlag {
            get {
                return this.virusCheckFlagField;
            }
            set {
                this.virusCheckFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string writeMode {
            get {
                return this.writeModeField;
            }
            set {
                this.writeModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class DateTime {
        
        private int dayField;
        
        private int hourField;
        
        private int minuteField;
        
        private int monthField;
        
        private int secondField;
        
        private int yearField;
        
        /// <remarks/>
        public int day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
            }
        }
        
        /// <remarks/>
        public int hour {
            get {
                return this.hourField;
            }
            set {
                this.hourField = value;
            }
        }
        
        /// <remarks/>
        public int minute {
            get {
                return this.minuteField;
            }
            set {
                this.minuteField = value;
            }
        }
        
        /// <remarks/>
        public int month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
        
        /// <remarks/>
        public int second {
            get {
                return this.secondField;
            }
            set {
                this.secondField = value;
            }
        }
        
        /// <remarks/>
        public int year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exceptions.adminService.soap.sift.proginet.com")]
    public partial class LDAPManagedFieldRemoteException {
        
        private object causeField;
        
        private string messageField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public object cause {
            get {
                return this.causeField;
            }
            set {
                this.causeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class CollectorSrvCfg {
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string defaultCollectorIntervalField;
        
        private string enabledField;
        
        private string hostNameField;
        
        private string serverHostField;
        
        private string updatedByField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultCollectorInterval {
            get {
                return this.defaultCollectorIntervalField;
            }
            set {
                this.defaultCollectorIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverHost {
            get {
                return this.serverHostField;
            }
            set {
                this.serverHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://xml.apache.org/xml-soap")]
    public partial class Vector {
        
        private object[] itemField;
        
        /// <remarks/>
        public object[] item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Messages {
        
        private Vector m_errorMsgsField;
        
        private Vector m_infoMsgsField;
        
        private Vector m_warningMsgsField;
        
        private string msgsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Vector m_errorMsgs {
            get {
                return this.m_errorMsgsField;
            }
            set {
                this.m_errorMsgsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Vector m_infoMsgs {
            get {
                return this.m_infoMsgsField;
            }
            set {
                this.m_infoMsgsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Vector m_warningMsgs {
            get {
                return this.m_warningMsgsField;
            }
            set {
                this.m_warningMsgsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string msgs {
            get {
                return this.msgsField;
            }
            set {
                this.msgsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class JMSSrvCfg {
        
        private string qConnectionFactoryField;
        
        private string tConnectionFactoryField;
        
        private bool tIBCOField;
        
        private bool activeMQField;
        
        private string alertNameField;
        
        private string auditMaxRecordsField;
        
        private string auditNameField;
        
        private string auditRequestTypeField;
        
        private string auditResponseTypeField;
        
        private string autoGenerateClientIDField;
        
        private string clientIDField;
        
        private string contextFactoryField;
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string enabledField;
        
        private string mgmtNameField;
        
        private string nameField;
        
        private string passwordField;
        
        private string reconnectIntervalField;
        
        private string srvUrlField;
        
        private string traceFlagField;
        
        private string transferCheckIntervalField;
        
        private string transferCheckTimeoutField;
        
        private string transferNameField;
        
        private string transferNotiEndEnabledField;
        
        private string transferNotiEndPSEnabledField;
        
        private string transferNotiEndTypeField;
        
        private string transferNotiNameField;
        
        private string transferNotiStartEnabledField;
        
        private string transferNotiStartTypeField;
        
        private string transferQSelectorField;
        
        private string transferRequestTypeField;
        
        private string transferRequestTypeISField;
        
        private string transferResponseTypeField;
        
        private string transferResponseTypeISField;
        
        private string updatedByField;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string QConnectionFactory {
            get {
                return this.qConnectionFactoryField;
            }
            set {
                this.qConnectionFactoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string TConnectionFactory {
            get {
                return this.tConnectionFactoryField;
            }
            set {
                this.tConnectionFactoryField = value;
            }
        }
        
        /// <remarks/>
        public bool TIBCO {
            get {
                return this.tIBCOField;
            }
            set {
                this.tIBCOField = value;
            }
        }
        
        /// <remarks/>
        public bool activeMQ {
            get {
                return this.activeMQField;
            }
            set {
                this.activeMQField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertName {
            get {
                return this.alertNameField;
            }
            set {
                this.alertNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditMaxRecords {
            get {
                return this.auditMaxRecordsField;
            }
            set {
                this.auditMaxRecordsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditName {
            get {
                return this.auditNameField;
            }
            set {
                this.auditNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditRequestType {
            get {
                return this.auditRequestTypeField;
            }
            set {
                this.auditRequestTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditResponseType {
            get {
                return this.auditResponseTypeField;
            }
            set {
                this.auditResponseTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string autoGenerateClientID {
            get {
                return this.autoGenerateClientIDField;
            }
            set {
                this.autoGenerateClientIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string contextFactory {
            get {
                return this.contextFactoryField;
            }
            set {
                this.contextFactoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string mgmtName {
            get {
                return this.mgmtNameField;
            }
            set {
                this.mgmtNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string reconnectInterval {
            get {
                return this.reconnectIntervalField;
            }
            set {
                this.reconnectIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string srvUrl {
            get {
                return this.srvUrlField;
            }
            set {
                this.srvUrlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlag {
            get {
                return this.traceFlagField;
            }
            set {
                this.traceFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferCheckInterval {
            get {
                return this.transferCheckIntervalField;
            }
            set {
                this.transferCheckIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferCheckTimeout {
            get {
                return this.transferCheckTimeoutField;
            }
            set {
                this.transferCheckTimeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferName {
            get {
                return this.transferNameField;
            }
            set {
                this.transferNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotiEndEnabled {
            get {
                return this.transferNotiEndEnabledField;
            }
            set {
                this.transferNotiEndEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotiEndPSEnabled {
            get {
                return this.transferNotiEndPSEnabledField;
            }
            set {
                this.transferNotiEndPSEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotiEndType {
            get {
                return this.transferNotiEndTypeField;
            }
            set {
                this.transferNotiEndTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotiName {
            get {
                return this.transferNotiNameField;
            }
            set {
                this.transferNotiNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotiStartEnabled {
            get {
                return this.transferNotiStartEnabledField;
            }
            set {
                this.transferNotiStartEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotiStartType {
            get {
                return this.transferNotiStartTypeField;
            }
            set {
                this.transferNotiStartTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferQSelector {
            get {
                return this.transferQSelectorField;
            }
            set {
                this.transferQSelectorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferRequestType {
            get {
                return this.transferRequestTypeField;
            }
            set {
                this.transferRequestTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferRequestTypeIS {
            get {
                return this.transferRequestTypeISField;
            }
            set {
                this.transferRequestTypeISField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferResponseType {
            get {
                return this.transferResponseTypeField;
            }
            set {
                this.transferResponseTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferResponseTypeIS {
            get {
                return this.transferResponseTypeISField;
            }
            set {
                this.transferResponseTypeISField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class OnDemandUsers {
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string securityTypeField;
        
        private string siteNameField;
        
        private string updatedByField;
        
        private string userDeptField;
        
        private string userTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string securityType {
            get {
                return this.securityTypeField;
            }
            set {
                this.securityTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string siteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userDept {
            get {
                return this.userDeptField;
            }
            set {
                this.userDeptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userType {
            get {
                return this.userTypeField;
            }
            set {
                this.userTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class OnDemandSecurity {
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string descriptionField;
        
        private string hostNameField;
        
        private string protocolsField;
        
        private string securityTypeField;
        
        private string siteNameField;
        
        private string updatedByField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string protocols {
            get {
                return this.protocolsField;
            }
            set {
                this.protocolsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string securityType {
            get {
                return this.securityTypeField;
            }
            set {
                this.securityTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string siteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class ServerStatusConfig {
        
        private string checkIntervalField;
        
        private string emailAddressField;
        
        private string enabledField;
        
        private string hostNameField;
        
        private string logStatusCheckField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string checkInterval {
            get {
                return this.checkIntervalField;
            }
            set {
                this.checkIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string logStatusCheck {
            get {
                return this.logStatusCheckField;
            }
            set {
                this.logStatusCheckField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Key {
        
        private string aliasField;
        
        private string as2SignAlgField;
        
        private string commentsField;
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string defaultKeyFlagField;
        
        private string descriptionField;
        
        private string disabledFlagField;
        
        private DateTime effectiveDateField;
        
        private string encryptionAlgorithmField;
        
        private string encryptionKeyFingerprintField;
        
        private string encryptionKeyIdField;
        
        private string encryptionKeyLengthField;
        
        private DateTime expirationDateField;
        
        private string hashingAlgorithmField;
        
        private string idField;
        
        private string issuerNameField;
        
        private byte[] keyField;
        
        private DateTime keyCreationDateField;
        
        private string keyTypeField;
        
        private string nameField;
        
        private string[] pgpUserIdsField;
        
        private string privKeyPwdField;
        
        private string publicPrivateKeyFlagField;
        
        private string signingAlgorithmField;
        
        private string signingKeyFingerprintField;
        
        private string signingKeyIdField;
        
        private string signingKeyLengthField;
        
        private string sshKeyFormatField;
        
        private string subjectDNField;
        
        private string updatedByField;
        
        private string userServerFlagField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string as2SignAlg {
            get {
                return this.as2SignAlgField;
            }
            set {
                this.as2SignAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultKeyFlag {
            get {
                return this.defaultKeyFlagField;
            }
            set {
                this.defaultKeyFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string disabledFlag {
            get {
                return this.disabledFlagField;
            }
            set {
                this.disabledFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime effectiveDate {
            get {
                return this.effectiveDateField;
            }
            set {
                this.effectiveDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptionAlgorithm {
            get {
                return this.encryptionAlgorithmField;
            }
            set {
                this.encryptionAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptionKeyFingerprint {
            get {
                return this.encryptionKeyFingerprintField;
            }
            set {
                this.encryptionKeyFingerprintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptionKeyId {
            get {
                return this.encryptionKeyIdField;
            }
            set {
                this.encryptionKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptionKeyLength {
            get {
                return this.encryptionKeyLengthField;
            }
            set {
                this.encryptionKeyLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hashingAlgorithm {
            get {
                return this.hashingAlgorithmField;
            }
            set {
                this.hashingAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string issuerName {
            get {
                return this.issuerNameField;
            }
            set {
                this.issuerNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime keyCreationDate {
            get {
                return this.keyCreationDateField;
            }
            set {
                this.keyCreationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keyType {
            get {
                return this.keyTypeField;
            }
            set {
                this.keyTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] pgpUserIds {
            get {
                return this.pgpUserIdsField;
            }
            set {
                this.pgpUserIdsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string privKeyPwd {
            get {
                return this.privKeyPwdField;
            }
            set {
                this.privKeyPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string publicPrivateKeyFlag {
            get {
                return this.publicPrivateKeyFlagField;
            }
            set {
                this.publicPrivateKeyFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string signingAlgorithm {
            get {
                return this.signingAlgorithmField;
            }
            set {
                this.signingAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string signingKeyFingerprint {
            get {
                return this.signingKeyFingerprintField;
            }
            set {
                this.signingKeyFingerprintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string signingKeyId {
            get {
                return this.signingKeyIdField;
            }
            set {
                this.signingKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string signingKeyLength {
            get {
                return this.signingKeyLengthField;
            }
            set {
                this.signingKeyLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sshKeyFormat {
            get {
                return this.sshKeyFormatField;
            }
            set {
                this.sshKeyFormatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string subjectDN {
            get {
                return this.subjectDNField;
            }
            set {
                this.subjectDNField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userServerFlag {
            get {
                return this.userServerFlagField;
            }
            set {
                this.userServerFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class SshServerConfig {
        
        private string sSHPrivKeyField;
        
        private string aliasField;
        
        private string bindIPAddressField;
        
        private string enabledField;
        
        private string hostNameField;
        
        private string keyFlagField;
        
        private string keyPwdField;
        
        private string keystoreField;
        
        private string keystorePwdField;
        
        private string portField;
        
        private string rsaAliasField;
        
        private string rsaKeyPwdField;
        
        private string rsaKeystoreField;
        
        private string rsaKeystorePwdField;
        
        private string welcomeMessageField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHPrivKey {
            get {
                return this.sSHPrivKeyField;
            }
            set {
                this.sSHPrivKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string bindIPAddress {
            get {
                return this.bindIPAddressField;
            }
            set {
                this.bindIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keyFlag {
            get {
                return this.keyFlagField;
            }
            set {
                this.keyFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keyPwd {
            get {
                return this.keyPwdField;
            }
            set {
                this.keyPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keystore {
            get {
                return this.keystoreField;
            }
            set {
                this.keystoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keystorePwd {
            get {
                return this.keystorePwdField;
            }
            set {
                this.keystorePwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string rsaAlias {
            get {
                return this.rsaAliasField;
            }
            set {
                this.rsaAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string rsaKeyPwd {
            get {
                return this.rsaKeyPwdField;
            }
            set {
                this.rsaKeyPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string rsaKeystore {
            get {
                return this.rsaKeystoreField;
            }
            set {
                this.rsaKeystoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string rsaKeystorePwd {
            get {
                return this.rsaKeystorePwdField;
            }
            set {
                this.rsaKeystorePwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string welcomeMessage {
            get {
                return this.welcomeMessageField;
            }
            set {
                this.welcomeMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class SearchAudit {
        
        private string jMSUserIDField;
        
        private string jMSUserPwdField;
        
        private string auditIDField;
        
        private string auditTypeField;
        
        private string aux5Field;
        
        private string aux6Field;
        
        private string aux7Field;
        
        private string aux8Field;
        
        private string clientFileNameField;
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string localTransIDField;
        
        private string maxReturnedField;
        
        private string nodeNameField;
        
        private string nodeNameCFField;
        
        private string numOfDaysField;
        
        private string searchAuditIDField;
        
        private string serverFileNameField;
        
        private string tableNameField;
        
        private DateTime trEndTimeField;
        
        private DateTime trStartTimeField;
        
        private string trStatusField;
        
        private string trUserIDField;
        
        private string typeField;
        
        private string updatedByField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSUserID {
            get {
                return this.jMSUserIDField;
            }
            set {
                this.jMSUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSUserPwd {
            get {
                return this.jMSUserPwdField;
            }
            set {
                this.jMSUserPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditID {
            get {
                return this.auditIDField;
            }
            set {
                this.auditIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditType {
            get {
                return this.auditTypeField;
            }
            set {
                this.auditTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string aux5 {
            get {
                return this.aux5Field;
            }
            set {
                this.aux5Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string aux6 {
            get {
                return this.aux6Field;
            }
            set {
                this.aux6Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string aux7 {
            get {
                return this.aux7Field;
            }
            set {
                this.aux7Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string aux8 {
            get {
                return this.aux8Field;
            }
            set {
                this.aux8Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileName {
            get {
                return this.clientFileNameField;
            }
            set {
                this.clientFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localTransID {
            get {
                return this.localTransIDField;
            }
            set {
                this.localTransIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string maxReturned {
            get {
                return this.maxReturnedField;
            }
            set {
                this.maxReturnedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeNameCF {
            get {
                return this.nodeNameCFField;
            }
            set {
                this.nodeNameCFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string numOfDays {
            get {
                return this.numOfDaysField;
            }
            set {
                this.numOfDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string searchAuditID {
            get {
                return this.searchAuditIDField;
            }
            set {
                this.searchAuditIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileName {
            get {
                return this.serverFileNameField;
            }
            set {
                this.serverFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime trEndTime {
            get {
                return this.trEndTimeField;
            }
            set {
                this.trEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime trStartTime {
            get {
                return this.trStartTimeField;
            }
            set {
                this.trStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trStatus {
            get {
                return this.trStatusField;
            }
            set {
                this.trStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trUserID {
            get {
                return this.trUserIDField;
            }
            set {
                this.trUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Profile {
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string localPwdField;
        
        private string localUIDField;
        
        private string nodeNameField;
        
        private string profileIDField;
        
        private string profileTypeField;
        
        private string remotePwdField;
        
        private string remoteUIDField;
        
        private string tableNameField;
        
        private string updatedByField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localPwd {
            get {
                return this.localPwdField;
            }
            set {
                this.localPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localUID {
            get {
                return this.localUIDField;
            }
            set {
                this.localUIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string profileID {
            get {
                return this.profileIDField;
            }
            set {
                this.profileIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string profileType {
            get {
                return this.profileTypeField;
            }
            set {
                this.profileTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remotePwd {
            get {
                return this.remotePwdField;
            }
            set {
                this.remotePwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteUID {
            get {
                return this.remoteUIDField;
            }
            set {
                this.remoteUIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class DailyStatistics {
        
        private string failedTransfersField;
        
        private LicenseKey[] licenseKeysField;
        
        private string maxUsersField;
        
        private string maxUsersODField;
        
        private Config statFrmCfgField;
        
        private string successTransfersField;
        
        private string weeklyFailedTransfersField;
        
        private string weeklySuccessTransfersField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string failedTransfers {
            get {
                return this.failedTransfersField;
            }
            set {
                this.failedTransfersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public LicenseKey[] licenseKeys {
            get {
                return this.licenseKeysField;
            }
            set {
                this.licenseKeysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string maxUsers {
            get {
                return this.maxUsersField;
            }
            set {
                this.maxUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string maxUsersOD {
            get {
                return this.maxUsersODField;
            }
            set {
                this.maxUsersODField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Config statFrmCfg {
            get {
                return this.statFrmCfgField;
            }
            set {
                this.statFrmCfgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string successTransfers {
            get {
                return this.successTransfersField;
            }
            set {
                this.successTransfersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyFailedTransfers {
            get {
                return this.weeklyFailedTransfersField;
            }
            set {
                this.weeklyFailedTransfersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklySuccessTransfers {
            get {
                return this.weeklySuccessTransfersField;
            }
            set {
                this.weeklySuccessTransfersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class LicenseKey {
        
        private string expirationDateField;
        
        private string keyValueField;
        
        private string serverNameField;
        
        private string serverTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keyValue {
            get {
                return this.keyValueField;
            }
            set {
                this.keyValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverType {
            get {
                return this.serverTypeField;
            }
            set {
                this.serverTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Config {
        
        private int cRLCheckingField;
        
        private string fTPClientAuthTypeField;
        
        private string fTPEmailRecipientsField;
        
        private string fTPEmailTemplateField;
        
        private string fTPKeyAddByUserField;
        
        private string fTPKeyInitStatusField;
        
        private string fTPLimitLocalPortsField;
        
        private string fTPNumOfPortsField;
        
        private string fTPStartingPortField;
        
        private string iPAddressField;
        
        private string iPPortField;
        
        private string lDAPSyncSvrHostField;
        
        private string lDAPSyncTimeField;
        
        private string pGPAllowKeyAddByUserField;
        
        private string pGPCompressionAlgorithmField;
        
        private string pGPEmailRecipientsField;
        
        private string pGPEmailTemplateField;
        
        private string pGPEncryptionAlgorithmField;
        
        private string pGPHashingAlgorithmField;
        
        private string pGPInitialStatusOfKeysField;
        
        private string pGPStrictDecryptionField;
        
        private string pPATimeoutField;
        
        private string sSHClientAuthTypeField;
        
        private string sSHEmailRecipientsField;
        
        private string sSHEmailTemplateField;
        
        private string sSHKeyAddByUserField;
        
        private string sSHKeyInitStatusField;
        
        private string alertEmailAddrField;
        
        private DateTime alertUpdateTimeField;
        
        private string antiVirusCheckFlagField;
        
        private string antiVirusCommandField;
        
        private string antiVirusExecField;
        
        private DateTime auditSearchDefaultStartTimeField;
        
        private string cachePasswordField;
        
        private string checkDepartmentIntegrityField;
        
        private string cmdCtrFlagField;
        
        private string compressionFlagField;
        
        private string contextField;
        
        private string dailyByteCountField;
        
        private string dailyIByteCountField;
        
        private string dailyITransferCountField;
        
        private string dailyITransferFCountField;
        
        private string dailyPByteCountField;
        
        private string dailyPTransferCountField;
        
        private string dailyPTransferFCountField;
        
        private string dailyTransferCountField;
        
        private string databaseVersionField;
        
        private string descriptionField;
        
        private string downloadRuleFileExtEnabledField;
        
        private string downloadRuleFileExtsField;
        
        private string emailAdminUserIdField;
        
        private string emailAdminUserPassField;
        
        private string emailFailureRecipientsField;
        
        private string emailFailureTemplateField;
        
        private string emailFailureTransTemplateField;
        
        private string emailHostNameField;
        
        private string emailHostPortField;
        
        private string emailSenderField;
        
        private string emailSuccessRecipientsField;
        
        private string emailSuccessTemplateField;
        
        private string emailSuccessTransTemplateField;
        
        private string emailURLField;
        
        private string hostNameField;
        
        private string httpAuthTypeField;
        
        private DateTime installationDateField;
        
        private string lastAuditFTIdField;
        
        private string lastAuditIdField;
        
        private string lastFileIdField;
        
        private string lastKeyIdField;
        
        private string lastTransNoField;
        
        private string lockoutDurationField;
        
        private string lockoutDurationUserField;
        
        private string lockoutIntervalField;
        
        private string lockoutIntervalUserField;
        
        private string monthlyByteCountField;
        
        private string monthlyIByteCountField;
        
        private string monthlyITransferCountField;
        
        private string monthlyITransferFCountField;
        
        private string monthlyPByteCountField;
        
        private string monthlyPTransferCountField;
        
        private string monthlyPTransferFCountField;
        
        private string monthlyTransferCountField;
        
        private string pwdBatchUsersFlagField;
        
        private string pwdCheckCustomRulesField;
        
        private string pwdChkDBRulesField;
        
        private string pwdEmbeddedWordListField;
        
        private string pwdEnforceHistoryField;
        
        private string pwdExcludedWordListField;
        
        private string pwdMaxAgeField;
        
        private string pwdMaxLengthField;
        
        private string pwdMinAgeField;
        
        private string pwdMinLengthField;
        
        private string pwdNotifyUserField;
        
        private string pwdNumberOfNumericsField;
        
        private string pwdNumberOfSpecialsField;
        
        private string pwdNumberOfUniqueCharsField;
        
        private string pwdRequiresUpperLowerField;
        
        private string pwdResetExpirationField;
        
        private string pwdResetOptionField;
        
        private string secureFlagField;
        
        private string thresholdField;
        
        private string thresholdActionField;
        
        private string thresholdIPField;
        
        private string thresholdUserField;
        
        private string traceFlagField;
        
        private string traceFlagLog4JField;
        
        private string uploadRuleFileExtEnabledField;
        
        private string uploadRuleFileExtsField;
        
        private string weeklyByteCountField;
        
        private string weeklyIByteCountField;
        
        private string weeklyITransferCountField;
        
        private string weeklyITransferFCountField;
        
        private string weeklyPByteCountField;
        
        private string weeklyPTransferCountField;
        
        private string weeklyPTransferFCountField;
        
        private string weeklyTransferCountField;
        
        private string xferNotiEmailURLField;
        
        /// <remarks/>
        public int CRLChecking {
            get {
                return this.cRLCheckingField;
            }
            set {
                this.cRLCheckingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPClientAuthType {
            get {
                return this.fTPClientAuthTypeField;
            }
            set {
                this.fTPClientAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPEmailRecipients {
            get {
                return this.fTPEmailRecipientsField;
            }
            set {
                this.fTPEmailRecipientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPEmailTemplate {
            get {
                return this.fTPEmailTemplateField;
            }
            set {
                this.fTPEmailTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPKeyAddByUser {
            get {
                return this.fTPKeyAddByUserField;
            }
            set {
                this.fTPKeyAddByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPKeyInitStatus {
            get {
                return this.fTPKeyInitStatusField;
            }
            set {
                this.fTPKeyInitStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPLimitLocalPorts {
            get {
                return this.fTPLimitLocalPortsField;
            }
            set {
                this.fTPLimitLocalPortsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPNumOfPorts {
            get {
                return this.fTPNumOfPortsField;
            }
            set {
                this.fTPNumOfPortsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPStartingPort {
            get {
                return this.fTPStartingPortField;
            }
            set {
                this.fTPStartingPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPPort {
            get {
                return this.iPPortField;
            }
            set {
                this.iPPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string LDAPSyncSvrHost {
            get {
                return this.lDAPSyncSvrHostField;
            }
            set {
                this.lDAPSyncSvrHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string LDAPSyncTime {
            get {
                return this.lDAPSyncTimeField;
            }
            set {
                this.lDAPSyncTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPAllowKeyAddByUser {
            get {
                return this.pGPAllowKeyAddByUserField;
            }
            set {
                this.pGPAllowKeyAddByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPCompressionAlgorithm {
            get {
                return this.pGPCompressionAlgorithmField;
            }
            set {
                this.pGPCompressionAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEmailRecipients {
            get {
                return this.pGPEmailRecipientsField;
            }
            set {
                this.pGPEmailRecipientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEmailTemplate {
            get {
                return this.pGPEmailTemplateField;
            }
            set {
                this.pGPEmailTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEncryptionAlgorithm {
            get {
                return this.pGPEncryptionAlgorithmField;
            }
            set {
                this.pGPEncryptionAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPHashingAlgorithm {
            get {
                return this.pGPHashingAlgorithmField;
            }
            set {
                this.pGPHashingAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPInitialStatusOfKeys {
            get {
                return this.pGPInitialStatusOfKeysField;
            }
            set {
                this.pGPInitialStatusOfKeysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPStrictDecryption {
            get {
                return this.pGPStrictDecryptionField;
            }
            set {
                this.pGPStrictDecryptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPATimeout {
            get {
                return this.pPATimeoutField;
            }
            set {
                this.pPATimeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHClientAuthType {
            get {
                return this.sSHClientAuthTypeField;
            }
            set {
                this.sSHClientAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHEmailRecipients {
            get {
                return this.sSHEmailRecipientsField;
            }
            set {
                this.sSHEmailRecipientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHEmailTemplate {
            get {
                return this.sSHEmailTemplateField;
            }
            set {
                this.sSHEmailTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHKeyAddByUser {
            get {
                return this.sSHKeyAddByUserField;
            }
            set {
                this.sSHKeyAddByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHKeyInitStatus {
            get {
                return this.sSHKeyInitStatusField;
            }
            set {
                this.sSHKeyInitStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertEmailAddr {
            get {
                return this.alertEmailAddrField;
            }
            set {
                this.alertEmailAddrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime alertUpdateTime {
            get {
                return this.alertUpdateTimeField;
            }
            set {
                this.alertUpdateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string antiVirusCheckFlag {
            get {
                return this.antiVirusCheckFlagField;
            }
            set {
                this.antiVirusCheckFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string antiVirusCommand {
            get {
                return this.antiVirusCommandField;
            }
            set {
                this.antiVirusCommandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string antiVirusExec {
            get {
                return this.antiVirusExecField;
            }
            set {
                this.antiVirusExecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime auditSearchDefaultStartTime {
            get {
                return this.auditSearchDefaultStartTimeField;
            }
            set {
                this.auditSearchDefaultStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string cachePassword {
            get {
                return this.cachePasswordField;
            }
            set {
                this.cachePasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string checkDepartmentIntegrity {
            get {
                return this.checkDepartmentIntegrityField;
            }
            set {
                this.checkDepartmentIntegrityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string cmdCtrFlag {
            get {
                return this.cmdCtrFlagField;
            }
            set {
                this.cmdCtrFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string compressionFlag {
            get {
                return this.compressionFlagField;
            }
            set {
                this.compressionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyByteCount {
            get {
                return this.dailyByteCountField;
            }
            set {
                this.dailyByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyIByteCount {
            get {
                return this.dailyIByteCountField;
            }
            set {
                this.dailyIByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyITransferCount {
            get {
                return this.dailyITransferCountField;
            }
            set {
                this.dailyITransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyITransferFCount {
            get {
                return this.dailyITransferFCountField;
            }
            set {
                this.dailyITransferFCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyPByteCount {
            get {
                return this.dailyPByteCountField;
            }
            set {
                this.dailyPByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyPTransferCount {
            get {
                return this.dailyPTransferCountField;
            }
            set {
                this.dailyPTransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyPTransferFCount {
            get {
                return this.dailyPTransferFCountField;
            }
            set {
                this.dailyPTransferFCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dailyTransferCount {
            get {
                return this.dailyTransferCountField;
            }
            set {
                this.dailyTransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string databaseVersion {
            get {
                return this.databaseVersionField;
            }
            set {
                this.databaseVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string downloadRuleFileExtEnabled {
            get {
                return this.downloadRuleFileExtEnabledField;
            }
            set {
                this.downloadRuleFileExtEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string downloadRuleFileExts {
            get {
                return this.downloadRuleFileExtsField;
            }
            set {
                this.downloadRuleFileExtsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailAdminUserId {
            get {
                return this.emailAdminUserIdField;
            }
            set {
                this.emailAdminUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailAdminUserPass {
            get {
                return this.emailAdminUserPassField;
            }
            set {
                this.emailAdminUserPassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureRecipients {
            get {
                return this.emailFailureRecipientsField;
            }
            set {
                this.emailFailureRecipientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureTemplate {
            get {
                return this.emailFailureTemplateField;
            }
            set {
                this.emailFailureTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureTransTemplate {
            get {
                return this.emailFailureTransTemplateField;
            }
            set {
                this.emailFailureTransTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailHostName {
            get {
                return this.emailHostNameField;
            }
            set {
                this.emailHostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailHostPort {
            get {
                return this.emailHostPortField;
            }
            set {
                this.emailHostPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSender {
            get {
                return this.emailSenderField;
            }
            set {
                this.emailSenderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessRecipients {
            get {
                return this.emailSuccessRecipientsField;
            }
            set {
                this.emailSuccessRecipientsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessTemplate {
            get {
                return this.emailSuccessTemplateField;
            }
            set {
                this.emailSuccessTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessTransTemplate {
            get {
                return this.emailSuccessTransTemplateField;
            }
            set {
                this.emailSuccessTransTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailURL {
            get {
                return this.emailURLField;
            }
            set {
                this.emailURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string httpAuthType {
            get {
                return this.httpAuthTypeField;
            }
            set {
                this.httpAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime installationDate {
            get {
                return this.installationDateField;
            }
            set {
                this.installationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastAuditFTId {
            get {
                return this.lastAuditFTIdField;
            }
            set {
                this.lastAuditFTIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastAuditId {
            get {
                return this.lastAuditIdField;
            }
            set {
                this.lastAuditIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastFileId {
            get {
                return this.lastFileIdField;
            }
            set {
                this.lastFileIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastKeyId {
            get {
                return this.lastKeyIdField;
            }
            set {
                this.lastKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastTransNo {
            get {
                return this.lastTransNoField;
            }
            set {
                this.lastTransNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lockoutDuration {
            get {
                return this.lockoutDurationField;
            }
            set {
                this.lockoutDurationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lockoutDurationUser {
            get {
                return this.lockoutDurationUserField;
            }
            set {
                this.lockoutDurationUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lockoutInterval {
            get {
                return this.lockoutIntervalField;
            }
            set {
                this.lockoutIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lockoutIntervalUser {
            get {
                return this.lockoutIntervalUserField;
            }
            set {
                this.lockoutIntervalUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyByteCount {
            get {
                return this.monthlyByteCountField;
            }
            set {
                this.monthlyByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyIByteCount {
            get {
                return this.monthlyIByteCountField;
            }
            set {
                this.monthlyIByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyITransferCount {
            get {
                return this.monthlyITransferCountField;
            }
            set {
                this.monthlyITransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyITransferFCount {
            get {
                return this.monthlyITransferFCountField;
            }
            set {
                this.monthlyITransferFCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyPByteCount {
            get {
                return this.monthlyPByteCountField;
            }
            set {
                this.monthlyPByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyPTransferCount {
            get {
                return this.monthlyPTransferCountField;
            }
            set {
                this.monthlyPTransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyPTransferFCount {
            get {
                return this.monthlyPTransferFCountField;
            }
            set {
                this.monthlyPTransferFCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string monthlyTransferCount {
            get {
                return this.monthlyTransferCountField;
            }
            set {
                this.monthlyTransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdBatchUsersFlag {
            get {
                return this.pwdBatchUsersFlagField;
            }
            set {
                this.pwdBatchUsersFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdCheckCustomRules {
            get {
                return this.pwdCheckCustomRulesField;
            }
            set {
                this.pwdCheckCustomRulesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdChkDBRules {
            get {
                return this.pwdChkDBRulesField;
            }
            set {
                this.pwdChkDBRulesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdEmbeddedWordList {
            get {
                return this.pwdEmbeddedWordListField;
            }
            set {
                this.pwdEmbeddedWordListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdEnforceHistory {
            get {
                return this.pwdEnforceHistoryField;
            }
            set {
                this.pwdEnforceHistoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdExcludedWordList {
            get {
                return this.pwdExcludedWordListField;
            }
            set {
                this.pwdExcludedWordListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdMaxAge {
            get {
                return this.pwdMaxAgeField;
            }
            set {
                this.pwdMaxAgeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdMaxLength {
            get {
                return this.pwdMaxLengthField;
            }
            set {
                this.pwdMaxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdMinAge {
            get {
                return this.pwdMinAgeField;
            }
            set {
                this.pwdMinAgeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdMinLength {
            get {
                return this.pwdMinLengthField;
            }
            set {
                this.pwdMinLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdNotifyUser {
            get {
                return this.pwdNotifyUserField;
            }
            set {
                this.pwdNotifyUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdNumberOfNumerics {
            get {
                return this.pwdNumberOfNumericsField;
            }
            set {
                this.pwdNumberOfNumericsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdNumberOfSpecials {
            get {
                return this.pwdNumberOfSpecialsField;
            }
            set {
                this.pwdNumberOfSpecialsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdNumberOfUniqueChars {
            get {
                return this.pwdNumberOfUniqueCharsField;
            }
            set {
                this.pwdNumberOfUniqueCharsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdRequiresUpperLower {
            get {
                return this.pwdRequiresUpperLowerField;
            }
            set {
                this.pwdRequiresUpperLowerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdResetExpiration {
            get {
                return this.pwdResetExpirationField;
            }
            set {
                this.pwdResetExpirationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdResetOption {
            get {
                return this.pwdResetOptionField;
            }
            set {
                this.pwdResetOptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string secureFlag {
            get {
                return this.secureFlagField;
            }
            set {
                this.secureFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string threshold {
            get {
                return this.thresholdField;
            }
            set {
                this.thresholdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string thresholdAction {
            get {
                return this.thresholdActionField;
            }
            set {
                this.thresholdActionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string thresholdIP {
            get {
                return this.thresholdIPField;
            }
            set {
                this.thresholdIPField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string thresholdUser {
            get {
                return this.thresholdUserField;
            }
            set {
                this.thresholdUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlag {
            get {
                return this.traceFlagField;
            }
            set {
                this.traceFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlagLog4J {
            get {
                return this.traceFlagLog4JField;
            }
            set {
                this.traceFlagLog4JField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string uploadRuleFileExtEnabled {
            get {
                return this.uploadRuleFileExtEnabledField;
            }
            set {
                this.uploadRuleFileExtEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string uploadRuleFileExts {
            get {
                return this.uploadRuleFileExtsField;
            }
            set {
                this.uploadRuleFileExtsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyByteCount {
            get {
                return this.weeklyByteCountField;
            }
            set {
                this.weeklyByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyIByteCount {
            get {
                return this.weeklyIByteCountField;
            }
            set {
                this.weeklyIByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyITransferCount {
            get {
                return this.weeklyITransferCountField;
            }
            set {
                this.weeklyITransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyITransferFCount {
            get {
                return this.weeklyITransferFCountField;
            }
            set {
                this.weeklyITransferFCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyPByteCount {
            get {
                return this.weeklyPByteCountField;
            }
            set {
                this.weeklyPByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyPTransferCount {
            get {
                return this.weeklyPTransferCountField;
            }
            set {
                this.weeklyPTransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyPTransferFCount {
            get {
                return this.weeklyPTransferFCountField;
            }
            set {
                this.weeklyPTransferFCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string weeklyTransferCount {
            get {
                return this.weeklyTransferCountField;
            }
            set {
                this.weeklyTransferCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string xferNotiEmailURL {
            get {
                return this.xferNotiEmailURLField;
            }
            set {
                this.xferNotiEmailURLField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class NodeFT {
        
        private string hIPPAFlagField;
        
        private string iPPortField;
        
        private string sSLFlagField;
        
        private string acceptVerifiedUserField;
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string defaultCompressionField;
        
        private string defaultDomainField;
        
        private string defaultEncryptionField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string hostNameField;
        
        private string localCTFileField;
        
        private string loosersField;
        
        private string modeNameField;
        
        private string nameField;
        
        private string netMaskField;
        
        private string nodeFTIDField;
        
        private string platformField;
        
        private string protocolField;
        
        private string remoteCTFileField;
        
        private string responderProfileField;
        
        private string tableNameField;
        
        private string updatedByField;
        
        private string winnersField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string HIPPAFlag {
            get {
                return this.hIPPAFlagField;
            }
            set {
                this.hIPPAFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPPort {
            get {
                return this.iPPortField;
            }
            set {
                this.iPPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLFlag {
            get {
                return this.sSLFlagField;
            }
            set {
                this.sSLFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string acceptVerifiedUser {
            get {
                return this.acceptVerifiedUserField;
            }
            set {
                this.acceptVerifiedUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultCompression {
            get {
                return this.defaultCompressionField;
            }
            set {
                this.defaultCompressionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultDomain {
            get {
                return this.defaultDomainField;
            }
            set {
                this.defaultDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultEncryption {
            get {
                return this.defaultEncryptionField;
            }
            set {
                this.defaultEncryptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localCTFile {
            get {
                return this.localCTFileField;
            }
            set {
                this.localCTFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string loosers {
            get {
                return this.loosersField;
            }
            set {
                this.loosersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modeName {
            get {
                return this.modeNameField;
            }
            set {
                this.modeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string netMask {
            get {
                return this.netMaskField;
            }
            set {
                this.netMaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeFTID {
            get {
                return this.nodeFTIDField;
            }
            set {
                this.nodeFTIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string platform {
            get {
                return this.platformField;
            }
            set {
                this.platformField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteCTFile {
            get {
                return this.remoteCTFileField;
            }
            set {
                this.remoteCTFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string responderProfile {
            get {
                return this.responderProfileField;
            }
            set {
                this.responderProfileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string winners {
            get {
                return this.winnersField;
            }
            set {
                this.winnersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class FTTransfer {
        
        private string jMSMsgIDField;
        
        private string jMSTransferCheckFlagField;
        
        private string jMSTransferCheckIntervalField;
        
        private string jMSTransferCheckTimeoutField;
        
        private string jMSUserIDField;
        
        private string jMSUserPwdField;
        
        private string oS390AllocDirField;
        
        private string oS390AllocPriField;
        
        private string oS390AllocSecField;
        
        private string oS390AllocTypeField;
        
        private string oS390BlockSizeField;
        
        private string oS390DataClassField;
        
        private string oS390LRECLField;
        
        private string oS390MgtClassField;
        
        private string oS390RECFMField;
        
        private string oS390StorClassField;
        
        private string oS390UnitField;
        
        private string oS390VolumeField;
        
        private string pPASource1Field;
        
        private string pPASource2Field;
        
        private string pPASource3Field;
        
        private string pPASource4Field;
        
        private string pPAStatus1Field;
        
        private string pPAStatus2Field;
        
        private string pPAStatus3Field;
        
        private string pPAStatus4Field;
        
        private string pServerNameField;
        
        private string sSLFlagField;
        
        private string aux0Field;
        
        private string ckPtIntervalField;
        
        private string commandTypeField;
        
        private string compressionFlagField;
        
        private string createdByField;
        
        private string dataConversionTypeField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string delimiterField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string encryptionFlagField;
        
        private string expirationDaysField;
        
        private string fileWriteModeField;
        
        private string hostNameField;
        
        private string hostTypeField;
        
        private string initiatorFileNameField;
        
        private string localTransTableField;
        
        private string loginPWDField;
        
        private string loginUIDField;
        
        private string permittedActionsField;
        
        private string portNumField;
        
        private string processNameField;
        
        private string ptActionData1Field;
        
        private string ptActionData2Field;
        
        private string ptActionData3Field;
        
        private string ptActionData4Field;
        
        private string ptActionFlag1Field;
        
        private string ptActionFlag2Field;
        
        private string ptActionFlag3Field;
        
        private string ptActionFlag4Field;
        
        private string ptActionType1Field;
        
        private string ptActionType2Field;
        
        private string ptActionType3Field;
        
        private string ptActionType4Field;
        
        private string remoteTransTableField;
        
        private string responderFileNameField;
        
        private string responderPWDField;
        
        private string responderUIDField;
        
        private string securityAttributeField;
        
        private string sendRecvFlagField;
        
        private string tableNameField;
        
        private string toEmailAddrFField;
        
        private string toEmailAddrSField;
        
        private DateTime trScheduleDateField;
        
        private string transferIDField;
        
        private string transferWorkField;
        
        private string tryMaxCountField;
        
        private string unixPermissionsField;
        
        private string updatedByField;
        
        private string userDataField;
        
        private string waitFlagField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSMsgID {
            get {
                return this.jMSMsgIDField;
            }
            set {
                this.jMSMsgIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSTransferCheckFlag {
            get {
                return this.jMSTransferCheckFlagField;
            }
            set {
                this.jMSTransferCheckFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSTransferCheckInterval {
            get {
                return this.jMSTransferCheckIntervalField;
            }
            set {
                this.jMSTransferCheckIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSTransferCheckTimeout {
            get {
                return this.jMSTransferCheckTimeoutField;
            }
            set {
                this.jMSTransferCheckTimeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSUserID {
            get {
                return this.jMSUserIDField;
            }
            set {
                this.jMSUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSUserPwd {
            get {
                return this.jMSUserPwdField;
            }
            set {
                this.jMSUserPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocDir {
            get {
                return this.oS390AllocDirField;
            }
            set {
                this.oS390AllocDirField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocPri {
            get {
                return this.oS390AllocPriField;
            }
            set {
                this.oS390AllocPriField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocSec {
            get {
                return this.oS390AllocSecField;
            }
            set {
                this.oS390AllocSecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocType {
            get {
                return this.oS390AllocTypeField;
            }
            set {
                this.oS390AllocTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390BlockSize {
            get {
                return this.oS390BlockSizeField;
            }
            set {
                this.oS390BlockSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390DataClass {
            get {
                return this.oS390DataClassField;
            }
            set {
                this.oS390DataClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390LRECL {
            get {
                return this.oS390LRECLField;
            }
            set {
                this.oS390LRECLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390MgtClass {
            get {
                return this.oS390MgtClassField;
            }
            set {
                this.oS390MgtClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390RECFM {
            get {
                return this.oS390RECFMField;
            }
            set {
                this.oS390RECFMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390StorClass {
            get {
                return this.oS390StorClassField;
            }
            set {
                this.oS390StorClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390Unit {
            get {
                return this.oS390UnitField;
            }
            set {
                this.oS390UnitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390Volume {
            get {
                return this.oS390VolumeField;
            }
            set {
                this.oS390VolumeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPASource1 {
            get {
                return this.pPASource1Field;
            }
            set {
                this.pPASource1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPASource2 {
            get {
                return this.pPASource2Field;
            }
            set {
                this.pPASource2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPASource3 {
            get {
                return this.pPASource3Field;
            }
            set {
                this.pPASource3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPASource4 {
            get {
                return this.pPASource4Field;
            }
            set {
                this.pPASource4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPAStatus1 {
            get {
                return this.pPAStatus1Field;
            }
            set {
                this.pPAStatus1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPAStatus2 {
            get {
                return this.pPAStatus2Field;
            }
            set {
                this.pPAStatus2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPAStatus3 {
            get {
                return this.pPAStatus3Field;
            }
            set {
                this.pPAStatus3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PPAStatus4 {
            get {
                return this.pPAStatus4Field;
            }
            set {
                this.pPAStatus4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PServerName {
            get {
                return this.pServerNameField;
            }
            set {
                this.pServerNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLFlag {
            get {
                return this.sSLFlagField;
            }
            set {
                this.sSLFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string aux0 {
            get {
                return this.aux0Field;
            }
            set {
                this.aux0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ckPtInterval {
            get {
                return this.ckPtIntervalField;
            }
            set {
                this.ckPtIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string commandType {
            get {
                return this.commandTypeField;
            }
            set {
                this.commandTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string compressionFlag {
            get {
                return this.compressionFlagField;
            }
            set {
                this.compressionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dataConversionType {
            get {
                return this.dataConversionTypeField;
            }
            set {
                this.dataConversionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string delimiter {
            get {
                return this.delimiterField;
            }
            set {
                this.delimiterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptionFlag {
            get {
                return this.encryptionFlagField;
            }
            set {
                this.encryptionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string expirationDays {
            get {
                return this.expirationDaysField;
            }
            set {
                this.expirationDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileWriteMode {
            get {
                return this.fileWriteModeField;
            }
            set {
                this.fileWriteModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostType {
            get {
                return this.hostTypeField;
            }
            set {
                this.hostTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string initiatorFileName {
            get {
                return this.initiatorFileNameField;
            }
            set {
                this.initiatorFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localTransTable {
            get {
                return this.localTransTableField;
            }
            set {
                this.localTransTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string loginPWD {
            get {
                return this.loginPWDField;
            }
            set {
                this.loginPWDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string loginUID {
            get {
                return this.loginUIDField;
            }
            set {
                this.loginUIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string permittedActions {
            get {
                return this.permittedActionsField;
            }
            set {
                this.permittedActionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string portNum {
            get {
                return this.portNumField;
            }
            set {
                this.portNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string processName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionData1 {
            get {
                return this.ptActionData1Field;
            }
            set {
                this.ptActionData1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionData2 {
            get {
                return this.ptActionData2Field;
            }
            set {
                this.ptActionData2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionData3 {
            get {
                return this.ptActionData3Field;
            }
            set {
                this.ptActionData3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionData4 {
            get {
                return this.ptActionData4Field;
            }
            set {
                this.ptActionData4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionFlag1 {
            get {
                return this.ptActionFlag1Field;
            }
            set {
                this.ptActionFlag1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionFlag2 {
            get {
                return this.ptActionFlag2Field;
            }
            set {
                this.ptActionFlag2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionFlag3 {
            get {
                return this.ptActionFlag3Field;
            }
            set {
                this.ptActionFlag3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionFlag4 {
            get {
                return this.ptActionFlag4Field;
            }
            set {
                this.ptActionFlag4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionType1 {
            get {
                return this.ptActionType1Field;
            }
            set {
                this.ptActionType1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionType2 {
            get {
                return this.ptActionType2Field;
            }
            set {
                this.ptActionType2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionType3 {
            get {
                return this.ptActionType3Field;
            }
            set {
                this.ptActionType3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ptActionType4 {
            get {
                return this.ptActionType4Field;
            }
            set {
                this.ptActionType4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteTransTable {
            get {
                return this.remoteTransTableField;
            }
            set {
                this.remoteTransTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string responderFileName {
            get {
                return this.responderFileNameField;
            }
            set {
                this.responderFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string responderPWD {
            get {
                return this.responderPWDField;
            }
            set {
                this.responderPWDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string responderUID {
            get {
                return this.responderUIDField;
            }
            set {
                this.responderUIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string securityAttribute {
            get {
                return this.securityAttributeField;
            }
            set {
                this.securityAttributeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sendRecvFlag {
            get {
                return this.sendRecvFlagField;
            }
            set {
                this.sendRecvFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toEmailAddrF {
            get {
                return this.toEmailAddrFField;
            }
            set {
                this.toEmailAddrFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toEmailAddrS {
            get {
                return this.toEmailAddrSField;
            }
            set {
                this.toEmailAddrSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime trScheduleDate {
            get {
                return this.trScheduleDateField;
            }
            set {
                this.trScheduleDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferID {
            get {
                return this.transferIDField;
            }
            set {
                this.transferIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferWork {
            get {
                return this.transferWorkField;
            }
            set {
                this.transferWorkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tryMaxCount {
            get {
                return this.tryMaxCountField;
            }
            set {
                this.tryMaxCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string unixPermissions {
            get {
                return this.unixPermissionsField;
            }
            set {
                this.unixPermissionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userData {
            get {
                return this.userDataField;
            }
            set {
                this.userDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string waitFlag {
            get {
                return this.waitFlagField;
            }
            set {
                this.waitFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Department {
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string descriptionField;
        
        private string nameField;
        
        private string updatedByField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class FTPServerConfig {
        
        private string fTPPrivKeyField;
        
        private string sSLConnectionOnlyField;
        
        private string sSLPortNumberField;
        
        private string bindIPAddressField;
        
        private string clearCommandChannelField;
        
        private string clientAuthenticationTypeField;
        
        private string enabledField;
        
        private string extIPAddressField;
        
        private string hostNameField;
        
        private string keystoreField;
        
        private string keystorePasswordField;
        
        private string portNumberField;
        
        private string useExtIPAddressField;
        
        private string welcomeMessageField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPPrivKey {
            get {
                return this.fTPPrivKeyField;
            }
            set {
                this.fTPPrivKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLConnectionOnly {
            get {
                return this.sSLConnectionOnlyField;
            }
            set {
                this.sSLConnectionOnlyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLPortNumber {
            get {
                return this.sSLPortNumberField;
            }
            set {
                this.sSLPortNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string bindIPAddress {
            get {
                return this.bindIPAddressField;
            }
            set {
                this.bindIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clearCommandChannel {
            get {
                return this.clearCommandChannelField;
            }
            set {
                this.clearCommandChannelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientAuthenticationType {
            get {
                return this.clientAuthenticationTypeField;
            }
            set {
                this.clientAuthenticationTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string extIPAddress {
            get {
                return this.extIPAddressField;
            }
            set {
                this.extIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keystore {
            get {
                return this.keystoreField;
            }
            set {
                this.keystoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keystorePassword {
            get {
                return this.keystorePasswordField;
            }
            set {
                this.keystorePasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string portNumber {
            get {
                return this.portNumberField;
            }
            set {
                this.portNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string useExtIPAddress {
            get {
                return this.useExtIPAddressField;
            }
            set {
                this.useExtIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string welcomeMessage {
            get {
                return this.welcomeMessageField;
            }
            set {
                this.welcomeMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class AS2SrvCfg {
        
        private string asynURLField;
        
        private string autoStartField;
        
        private string defSrvAS2IDField;
        
        private string descriptionField;
        
        private string dirAsyncField;
        
        private string dirDataField;
        
        private string enabledField;
        
        private string firewallHostField;
        
        private string firewallPortField;
        
        private string firewallPwdField;
        
        private string firewallTypeField;
        
        private string firewallUidField;
        
        private string hostNameField;
        
        private string mailFromField;
        
        private string mailHostField;
        
        private string mailSubjField;
        
        private string proxyHostField;
        
        private string proxyPortField;
        
        private string proxyPwdField;
        
        private string proxyUIDField;
        
        private string recvURLField;
        
        private string thresholdField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string asynURL {
            get {
                return this.asynURLField;
            }
            set {
                this.asynURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string autoStart {
            get {
                return this.autoStartField;
            }
            set {
                this.autoStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defSrvAS2ID {
            get {
                return this.defSrvAS2IDField;
            }
            set {
                this.defSrvAS2IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dirAsync {
            get {
                return this.dirAsyncField;
            }
            set {
                this.dirAsyncField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dirData {
            get {
                return this.dirDataField;
            }
            set {
                this.dirDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firewallHost {
            get {
                return this.firewallHostField;
            }
            set {
                this.firewallHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firewallPort {
            get {
                return this.firewallPortField;
            }
            set {
                this.firewallPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firewallPwd {
            get {
                return this.firewallPwdField;
            }
            set {
                this.firewallPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firewallType {
            get {
                return this.firewallTypeField;
            }
            set {
                this.firewallTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firewallUid {
            get {
                return this.firewallUidField;
            }
            set {
                this.firewallUidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string mailFrom {
            get {
                return this.mailFromField;
            }
            set {
                this.mailFromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string mailHost {
            get {
                return this.mailHostField;
            }
            set {
                this.mailHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string mailSubj {
            get {
                return this.mailSubjField;
            }
            set {
                this.mailSubjField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyHost {
            get {
                return this.proxyHostField;
            }
            set {
                this.proxyHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyPort {
            get {
                return this.proxyPortField;
            }
            set {
                this.proxyPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyPwd {
            get {
                return this.proxyPwdField;
            }
            set {
                this.proxyPwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyUID {
            get {
                return this.proxyUIDField;
            }
            set {
                this.proxyUIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string recvURL {
            get {
                return this.recvURLField;
            }
            set {
                this.recvURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string threshold {
            get {
                return this.thresholdField;
            }
            set {
                this.thresholdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Checkpoint {
        
        private DateTime checkpointTimeField;
        
        private string clientFileDocketField;
        
        private string clientFileDocketExtentionField;
        
        private string clientFileNameField;
        
        private string directoryTransferField;
        
        private string fileIdField;
        
        private string nodeNameField;
        
        private string numberTriesField;
        
        private string proxyRemoteTransactionIdField;
        
        private string sendReceiveFlagField;
        
        private string serverFileDocketField;
        
        private string serverFileDocketExtentionField;
        
        private string serverFileNameField;
        
        private string transactionIdField;
        
        private string userIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime checkpointTime {
            get {
                return this.checkpointTimeField;
            }
            set {
                this.checkpointTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileDocket {
            get {
                return this.clientFileDocketField;
            }
            set {
                this.clientFileDocketField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileDocketExtention {
            get {
                return this.clientFileDocketExtentionField;
            }
            set {
                this.clientFileDocketExtentionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileName {
            get {
                return this.clientFileNameField;
            }
            set {
                this.clientFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string directoryTransfer {
            get {
                return this.directoryTransferField;
            }
            set {
                this.directoryTransferField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileId {
            get {
                return this.fileIdField;
            }
            set {
                this.fileIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string numberTries {
            get {
                return this.numberTriesField;
            }
            set {
                this.numberTriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyRemoteTransactionId {
            get {
                return this.proxyRemoteTransactionIdField;
            }
            set {
                this.proxyRemoteTransactionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sendReceiveFlag {
            get {
                return this.sendReceiveFlagField;
            }
            set {
                this.sendReceiveFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileDocket {
            get {
                return this.serverFileDocketField;
            }
            set {
                this.serverFileDocketField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileDocketExtention {
            get {
                return this.serverFileDocketExtentionField;
            }
            set {
                this.serverFileDocketExtentionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileName {
            get {
                return this.serverFileNameField;
            }
            set {
                this.serverFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Alert {
        
        private string jMSCommentField;
        
        private string jMSMsgTypeField;
        
        private string actionTypeField;
        
        private string agentAddrField;
        
        private string alertIDField;
        
        private string auditTypeField;
        
        private string classNameField;
        
        private string classParameterField;
        
        private string clientFileNameField;
        
        private string communityNameField;
        
        private string createdByField;
        
        private DateTime createdTimeField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string elapsedTimeField;
        
        private string emailCommentField;
        
        private string emailTemplateField;
        
        private string enterpriseOIDField;
        
        private string genericTIDField;
        
        private string hostAddrField;
        
        private string messageField;
        
        private string messageOIDField;
        
        private string parameterField;
        
        private string pathField;
        
        private string processNameField;
        
        private string protocolField;
        
        private string sendReceiveFlagField;
        
        private string serverFileNameField;
        
        private string serverNameField;
        
        private string serverNodeNameField;
        
        private string severityField;
        
        private string specificTIDField;
        
        private string templateFileField;
        
        private string toField;
        
        private string transferStatusField;
        
        private string transferUserIDField;
        
        private string trapPortField;
        
        private string updatedByField;
        
        private string userDataField;
        
        private string versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSComment {
            get {
                return this.jMSCommentField;
            }
            set {
                this.jMSCommentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSMsgType {
            get {
                return this.jMSMsgTypeField;
            }
            set {
                this.jMSMsgTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string actionType {
            get {
                return this.actionTypeField;
            }
            set {
                this.actionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string agentAddr {
            get {
                return this.agentAddrField;
            }
            set {
                this.agentAddrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertID {
            get {
                return this.alertIDField;
            }
            set {
                this.alertIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditType {
            get {
                return this.auditTypeField;
            }
            set {
                this.auditTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string className {
            get {
                return this.classNameField;
            }
            set {
                this.classNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string classParameter {
            get {
                return this.classParameterField;
            }
            set {
                this.classParameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileName {
            get {
                return this.clientFileNameField;
            }
            set {
                this.clientFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string communityName {
            get {
                return this.communityNameField;
            }
            set {
                this.communityNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime createdTime {
            get {
                return this.createdTimeField;
            }
            set {
                this.createdTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string elapsedTime {
            get {
                return this.elapsedTimeField;
            }
            set {
                this.elapsedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailComment {
            get {
                return this.emailCommentField;
            }
            set {
                this.emailCommentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailTemplate {
            get {
                return this.emailTemplateField;
            }
            set {
                this.emailTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enterpriseOID {
            get {
                return this.enterpriseOIDField;
            }
            set {
                this.enterpriseOIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string genericTID {
            get {
                return this.genericTIDField;
            }
            set {
                this.genericTIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostAddr {
            get {
                return this.hostAddrField;
            }
            set {
                this.hostAddrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string messageOID {
            get {
                return this.messageOIDField;
            }
            set {
                this.messageOIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string processName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sendReceiveFlag {
            get {
                return this.sendReceiveFlagField;
            }
            set {
                this.sendReceiveFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileName {
            get {
                return this.serverFileNameField;
            }
            set {
                this.serverFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverNodeName {
            get {
                return this.serverNodeNameField;
            }
            set {
                this.serverNodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string specificTID {
            get {
                return this.specificTIDField;
            }
            set {
                this.specificTIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string templateFile {
            get {
                return this.templateFileField;
            }
            set {
                this.templateFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string to {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferStatus {
            get {
                return this.transferStatusField;
            }
            set {
                this.transferStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferUserID {
            get {
                return this.transferUserIDField;
            }
            set {
                this.transferUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trapPort {
            get {
                return this.trapPortField;
            }
            set {
                this.trapPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userData {
            get {
                return this.userDataField;
            }
            set {
                this.userDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class AS2Audit {
        
        private string eDIDataTypeField;
        
        private byte[] mDNContentsField;
        
        private byte[] mDNHeaderField;
        
        private string mDNRequestField;
        
        private string mDNResultsField;
        
        private string mDNSignAlgField;
        
        private string mDNSignProtField;
        
        private string mICDigestField;
        
        private string asyncMDNURLField;
        
        private string auditIDField;
        
        private string compressAlgField;
        
        private string encryptAlgField;
        
        private string fromNameField;
        
        private string messageIDField;
        
        private string serverClientField;
        
        private string signAlgField;
        
        private string timeoutField;
        
        private string toNameField;
        
        private string versionInField;
        
        private string versionOutField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string EDIDataType {
            get {
                return this.eDIDataTypeField;
            }
            set {
                this.eDIDataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] MDNContents {
            get {
                return this.mDNContentsField;
            }
            set {
                this.mDNContentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] MDNHeader {
            get {
                return this.mDNHeaderField;
            }
            set {
                this.mDNHeaderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MDNRequest {
            get {
                return this.mDNRequestField;
            }
            set {
                this.mDNRequestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MDNResults {
            get {
                return this.mDNResultsField;
            }
            set {
                this.mDNResultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MDNSignAlg {
            get {
                return this.mDNSignAlgField;
            }
            set {
                this.mDNSignAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MDNSignProt {
            get {
                return this.mDNSignProtField;
            }
            set {
                this.mDNSignProtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MICDigest {
            get {
                return this.mICDigestField;
            }
            set {
                this.mICDigestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string asyncMDNURL {
            get {
                return this.asyncMDNURLField;
            }
            set {
                this.asyncMDNURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditID {
            get {
                return this.auditIDField;
            }
            set {
                this.auditIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string compressAlg {
            get {
                return this.compressAlgField;
            }
            set {
                this.compressAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptAlg {
            get {
                return this.encryptAlgField;
            }
            set {
                this.encryptAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fromName {
            get {
                return this.fromNameField;
            }
            set {
                this.fromNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string messageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverClient {
            get {
                return this.serverClientField;
            }
            set {
                this.serverClientField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string signAlg {
            get {
                return this.signAlgField;
            }
            set {
                this.signAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string timeout {
            get {
                return this.timeoutField;
            }
            set {
                this.timeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toName {
            get {
                return this.toNameField;
            }
            set {
                this.toNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string versionIn {
            get {
                return this.versionInField;
            }
            set {
                this.versionInField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string versionOut {
            get {
                return this.versionOutField;
            }
            set {
                this.versionOutField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(AuditAlert))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Audit))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(AuditFT))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class AuditBase {
        
        private string aS2MDNStatusField;
        
        private string cRLFField;
        
        private string lRECLField;
        
        private string oS390AllocPriField;
        
        private string oS390AllocSecField;
        
        private string oS390AllocTypeField;
        
        private string oS390BlockSizeField;
        
        private string oS390DataClassField;
        
        private string oS390MgtClassField;
        
        private string oS390StorClassField;
        
        private string oS390UnitField;
        
        private string oS390VolumeField;
        
        private string rECFMField;
        
        private string auditIdField;
        
        private string chkptCountField;
        
        private string chkptIntervalField;
        
        private string chkptRestartFlagField;
        
        private string clientCompressFlagField;
        
        private string clientFileNameField;
        
        private string clientIPAddrField;
        
        private string dataTypeField;
        
        private DateTime dateCreatedField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string encryptFlagField;
        
        private string fileOptionField;
        
        private string localTransactionIdField;
        
        private string localTranslationTableField;
        
        private string nodeNameField;
        
        private string nodeNameCFField;
        
        private string numberOfDaysField;
        
        private string postActionData1Field;
        
        private string postActionData2Field;
        
        private string postActionData3Field;
        
        private string postActionData4Field;
        
        private string postActionFlag1Field;
        
        private string postActionFlag2Field;
        
        private string postActionFlag3Field;
        
        private string postActionFlag4Field;
        
        private string postActionReturn1Field;
        
        private string postActionReturn2Field;
        
        private string postActionReturn3Field;
        
        private string postActionReturn4Field;
        
        private string postActionType1Field;
        
        private string postActionType2Field;
        
        private string postActionType3Field;
        
        private string postActionType4Field;
        
        private string processNameField;
        
        private string proxyStatusMsgField;
        
        private string remoteTranslationTableField;
        
        private string remoteUserIdJPAField;
        
        private string requestIDField;
        
        private string sendRecvFlagField;
        
        private string serverFileNameField;
        
        private string toEmailAddrFailureField;
        
        private string toEmailAddrSuccessField;
        
        private string transferByteCountField;
        
        private string transferCompressedByteCountField;
        
        private DateTime transferEndTimeField;
        
        private DateTime transferStartTimeField;
        
        private string transferStatusField;
        
        private string transferStatusMsgIdField;
        
        private string transferUserIdField;
        
        private string transferWorkField;
        
        private string userDataField;
        
        private string writeModeField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string AS2MDNStatus {
            get {
                return this.aS2MDNStatusField;
            }
            set {
                this.aS2MDNStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CRLF {
            get {
                return this.cRLFField;
            }
            set {
                this.cRLFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string LRECL {
            get {
                return this.lRECLField;
            }
            set {
                this.lRECLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocPri {
            get {
                return this.oS390AllocPriField;
            }
            set {
                this.oS390AllocPriField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocSec {
            get {
                return this.oS390AllocSecField;
            }
            set {
                this.oS390AllocSecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocType {
            get {
                return this.oS390AllocTypeField;
            }
            set {
                this.oS390AllocTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390BlockSize {
            get {
                return this.oS390BlockSizeField;
            }
            set {
                this.oS390BlockSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390DataClass {
            get {
                return this.oS390DataClassField;
            }
            set {
                this.oS390DataClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390MgtClass {
            get {
                return this.oS390MgtClassField;
            }
            set {
                this.oS390MgtClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390StorClass {
            get {
                return this.oS390StorClassField;
            }
            set {
                this.oS390StorClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390Unit {
            get {
                return this.oS390UnitField;
            }
            set {
                this.oS390UnitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390Volume {
            get {
                return this.oS390VolumeField;
            }
            set {
                this.oS390VolumeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string RECFM {
            get {
                return this.rECFMField;
            }
            set {
                this.rECFMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditId {
            get {
                return this.auditIdField;
            }
            set {
                this.auditIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptCount {
            get {
                return this.chkptCountField;
            }
            set {
                this.chkptCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptInterval {
            get {
                return this.chkptIntervalField;
            }
            set {
                this.chkptIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptRestartFlag {
            get {
                return this.chkptRestartFlagField;
            }
            set {
                this.chkptRestartFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientCompressFlag {
            get {
                return this.clientCompressFlagField;
            }
            set {
                this.clientCompressFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientFileName {
            get {
                return this.clientFileNameField;
            }
            set {
                this.clientFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clientIPAddr {
            get {
                return this.clientIPAddrField;
            }
            set {
                this.clientIPAddrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string encryptFlag {
            get {
                return this.encryptFlagField;
            }
            set {
                this.encryptFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileOption {
            get {
                return this.fileOptionField;
            }
            set {
                this.fileOptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localTransactionId {
            get {
                return this.localTransactionIdField;
            }
            set {
                this.localTransactionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localTranslationTable {
            get {
                return this.localTranslationTableField;
            }
            set {
                this.localTranslationTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeNameCF {
            get {
                return this.nodeNameCFField;
            }
            set {
                this.nodeNameCFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string numberOfDays {
            get {
                return this.numberOfDaysField;
            }
            set {
                this.numberOfDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData1 {
            get {
                return this.postActionData1Field;
            }
            set {
                this.postActionData1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData2 {
            get {
                return this.postActionData2Field;
            }
            set {
                this.postActionData2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData3 {
            get {
                return this.postActionData3Field;
            }
            set {
                this.postActionData3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionData4 {
            get {
                return this.postActionData4Field;
            }
            set {
                this.postActionData4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag1 {
            get {
                return this.postActionFlag1Field;
            }
            set {
                this.postActionFlag1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag2 {
            get {
                return this.postActionFlag2Field;
            }
            set {
                this.postActionFlag2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag3 {
            get {
                return this.postActionFlag3Field;
            }
            set {
                this.postActionFlag3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionFlag4 {
            get {
                return this.postActionFlag4Field;
            }
            set {
                this.postActionFlag4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionReturn1 {
            get {
                return this.postActionReturn1Field;
            }
            set {
                this.postActionReturn1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionReturn2 {
            get {
                return this.postActionReturn2Field;
            }
            set {
                this.postActionReturn2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionReturn3 {
            get {
                return this.postActionReturn3Field;
            }
            set {
                this.postActionReturn3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionReturn4 {
            get {
                return this.postActionReturn4Field;
            }
            set {
                this.postActionReturn4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType1 {
            get {
                return this.postActionType1Field;
            }
            set {
                this.postActionType1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType2 {
            get {
                return this.postActionType2Field;
            }
            set {
                this.postActionType2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType3 {
            get {
                return this.postActionType3Field;
            }
            set {
                this.postActionType3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string postActionType4 {
            get {
                return this.postActionType4Field;
            }
            set {
                this.postActionType4Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string processName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyStatusMsg {
            get {
                return this.proxyStatusMsgField;
            }
            set {
                this.proxyStatusMsgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteTranslationTable {
            get {
                return this.remoteTranslationTableField;
            }
            set {
                this.remoteTranslationTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteUserIdJPA {
            get {
                return this.remoteUserIdJPAField;
            }
            set {
                this.remoteUserIdJPAField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string requestID {
            get {
                return this.requestIDField;
            }
            set {
                this.requestIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sendRecvFlag {
            get {
                return this.sendRecvFlagField;
            }
            set {
                this.sendRecvFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileName {
            get {
                return this.serverFileNameField;
            }
            set {
                this.serverFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toEmailAddrFailure {
            get {
                return this.toEmailAddrFailureField;
            }
            set {
                this.toEmailAddrFailureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string toEmailAddrSuccess {
            get {
                return this.toEmailAddrSuccessField;
            }
            set {
                this.toEmailAddrSuccessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferByteCount {
            get {
                return this.transferByteCountField;
            }
            set {
                this.transferByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferCompressedByteCount {
            get {
                return this.transferCompressedByteCountField;
            }
            set {
                this.transferCompressedByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime transferEndTime {
            get {
                return this.transferEndTimeField;
            }
            set {
                this.transferEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime transferStartTime {
            get {
                return this.transferStartTimeField;
            }
            set {
                this.transferStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferStatus {
            get {
                return this.transferStatusField;
            }
            set {
                this.transferStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferStatusMsgId {
            get {
                return this.transferStatusMsgIdField;
            }
            set {
                this.transferStatusMsgIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferUserId {
            get {
                return this.transferUserIdField;
            }
            set {
                this.transferUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferWork {
            get {
                return this.transferWorkField;
            }
            set {
                this.transferWorkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userData {
            get {
                return this.userDataField;
            }
            set {
                this.userDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string writeMode {
            get {
                return this.writeModeField;
            }
            set {
                this.writeModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class AuditAlert : AuditBase {
        
        private string jAVAStatusField;
        
        private string jMSStatusField;
        
        private string actionNameField;
        
        private string alertAuditIDField;
        
        private string alertDescriptionField;
        
        private string alertIDField;
        
        private string alertIdField;
        
        private string alertNameField;
        
        private string alertSeverityField;
        
        private DateTime alertTimeField;
        
        private string auditIDField;
        
        private string commandStatusField;
        
        private string emailStatusField;
        
        private string messageField;
        
        private Alert myAlertField;
        
        private AuditBase myAuditField;
        
        private string transferTypeField;
        
        private string trapStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JAVAStatus {
            get {
                return this.jAVAStatusField;
            }
            set {
                this.jAVAStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSStatus {
            get {
                return this.jMSStatusField;
            }
            set {
                this.jMSStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string actionName {
            get {
                return this.actionNameField;
            }
            set {
                this.actionNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertAuditID {
            get {
                return this.alertAuditIDField;
            }
            set {
                this.alertAuditIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertDescription {
            get {
                return this.alertDescriptionField;
            }
            set {
                this.alertDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertID {
            get {
                return this.alertIDField;
            }
            set {
                this.alertIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertId {
            get {
                return this.alertIdField;
            }
            set {
                this.alertIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertName {
            get {
                return this.alertNameField;
            }
            set {
                this.alertNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string alertSeverity {
            get {
                return this.alertSeverityField;
            }
            set {
                this.alertSeverityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime alertTime {
            get {
                return this.alertTimeField;
            }
            set {
                this.alertTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string auditID {
            get {
                return this.auditIDField;
            }
            set {
                this.auditIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string commandStatus {
            get {
                return this.commandStatusField;
            }
            set {
                this.commandStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailStatus {
            get {
                return this.emailStatusField;
            }
            set {
                this.emailStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Alert myAlert {
            get {
                return this.myAlertField;
            }
            set {
                this.myAlertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public AuditBase myAudit {
            get {
                return this.myAuditField;
            }
            set {
                this.myAuditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferType {
            get {
                return this.transferTypeField;
            }
            set {
                this.transferTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trapStatus {
            get {
                return this.trapStatusField;
            }
            set {
                this.trapStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Audit : AuditBase {
        
        private AS2Audit aS2AuditProxyField;
        
        private AS2Audit aS2AuditServerField;
        
        private string cFClient_CR_LFField;
        
        private string cFClient_CheckPointCountField;
        
        private string cFClient_CheckPointIntervalField;
        
        private string cFClient_CheckPointRestartField;
        
        private string cFClient_CompressionField;
        
        private string cFClient_DataTypeField;
        
        private string cFClient_EncryptFlagField;
        
        private string cFClient_InitFileSpecField;
        
        private string cFClient_InitUserIDField;
        
        private string cFClient_ProcessNameField;
        
        private string cFClient_RemoteTransactionField;
        
        private string cFClient_RespFileSpecField;
        
        private string cFClient_StatusDiagCodeField;
        
        private string cFClient_StatusMsgField;
        
        private string cFClient_StatusSeverityField;
        
        private DateTime cFClient_TrEndTimeField;
        
        private DateTime cFClient_TrStartTimeField;
        
        private string cFClient_TransactionNumberField;
        
        private string cFClient_TransferWorkField;
        
        private string cFClient_UserDataField;
        
        private string cFClient_VersionField;
        
        private string fTPAliasField;
        
        private string jMSPropertyField;
        
        private string jMSSelectorField;
        
        private string pGPArmorFlagField;
        
        private string pGPClSignatureField;
        
        private string pGPClSignedField;
        
        private string pGPClSignerIdField;
        
        private string pGPClSigningKeyIdField;
        
        private string pGPClVerifiedField;
        
        private string pGPCompAlgField;
        
        private string pGPEncryptAlgField;
        
        private string pGPHashingAlgField;
        
        private string pGPSrvSignatureField;
        
        private string pGPSrvSignedField;
        
        private string pGPSrvSignerIdField;
        
        private string pGPSrvSigningKeyIdField;
        
        private string pGPSrvVerifiedField;
        
        private string pGPTextModeField;
        
        private string allowableProtocolField;
        
        private string authRoleIdField;
        
        private string authUserIdField;
        
        private DateTime availableDateField;
        
        private string availableUpdatedByField;
        
        private string chkptTryMaxCountField;
        
        private string ckPtTryMaxCountField;
        
        private string conversionFlagField;
        
        private string defaultNodePwdField;
        
        private string defaultNodeUserIdField;
        
        private string directoryTransferField;
        
        private string disableFlagField;
        
        private string emailFailureFlagField;
        
        private string emailFailureTemplateField;
        
        private string emailSuccessFlagField;
        
        private string emailSuccessTemplateField;
        
        private DateTime expirationDateField;
        
        private string fileIdField;
        
        private string localHostNameField;
        
        private string oneTimeFlagField;
        
        private string proxyByteCountField;
        
        private string proxyCompressedByteCountField;
        
        private string proxyRemoteNTDomainField;
        
        private string proxyRemotePasswordField;
        
        private string proxyRemoteTransactionIdField;
        
        private string proxyRemoteUserIdField;
        
        private string proxyStatusDiagCodeField;
        
        private string proxyStatusSeverityField;
        
        private string proxyTrFlagField;
        
        private string proxyTraceAppFileNameField;
        
        private string proxyTraceCommFileNameField;
        
        private string tokenDataField;
        
        private DateTime tokenDateSetField;
        
        private string tokenFlagField;
        
        private string traceAppFileNameField;
        
        private string traceCommFileNameField;
        
        private string traceFlagField;
        
        private string transferNotificationEmailAddressField;
        
        private string transferNotificationEmailTemplateField;
        
        private string transferProtocolField;
        
        private string unixPermissionsField;
        
        private string validDaysField;
        
        private string validEndTimeField;
        
        private string validStartTimeField;
        
        private string virusCheckFlagField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public AS2Audit AS2AuditProxy {
            get {
                return this.aS2AuditProxyField;
            }
            set {
                this.aS2AuditProxyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public AS2Audit AS2AuditServer {
            get {
                return this.aS2AuditServerField;
            }
            set {
                this.aS2AuditServerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_CR_LF {
            get {
                return this.cFClient_CR_LFField;
            }
            set {
                this.cFClient_CR_LFField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_CheckPointCount {
            get {
                return this.cFClient_CheckPointCountField;
            }
            set {
                this.cFClient_CheckPointCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_CheckPointInterval {
            get {
                return this.cFClient_CheckPointIntervalField;
            }
            set {
                this.cFClient_CheckPointIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_CheckPointRestart {
            get {
                return this.cFClient_CheckPointRestartField;
            }
            set {
                this.cFClient_CheckPointRestartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_Compression {
            get {
                return this.cFClient_CompressionField;
            }
            set {
                this.cFClient_CompressionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_DataType {
            get {
                return this.cFClient_DataTypeField;
            }
            set {
                this.cFClient_DataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_EncryptFlag {
            get {
                return this.cFClient_EncryptFlagField;
            }
            set {
                this.cFClient_EncryptFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_InitFileSpec {
            get {
                return this.cFClient_InitFileSpecField;
            }
            set {
                this.cFClient_InitFileSpecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_InitUserID {
            get {
                return this.cFClient_InitUserIDField;
            }
            set {
                this.cFClient_InitUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_ProcessName {
            get {
                return this.cFClient_ProcessNameField;
            }
            set {
                this.cFClient_ProcessNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_RemoteTransaction {
            get {
                return this.cFClient_RemoteTransactionField;
            }
            set {
                this.cFClient_RemoteTransactionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_RespFileSpec {
            get {
                return this.cFClient_RespFileSpecField;
            }
            set {
                this.cFClient_RespFileSpecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_StatusDiagCode {
            get {
                return this.cFClient_StatusDiagCodeField;
            }
            set {
                this.cFClient_StatusDiagCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_StatusMsg {
            get {
                return this.cFClient_StatusMsgField;
            }
            set {
                this.cFClient_StatusMsgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_StatusSeverity {
            get {
                return this.cFClient_StatusSeverityField;
            }
            set {
                this.cFClient_StatusSeverityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime CFClient_TrEndTime {
            get {
                return this.cFClient_TrEndTimeField;
            }
            set {
                this.cFClient_TrEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime CFClient_TrStartTime {
            get {
                return this.cFClient_TrStartTimeField;
            }
            set {
                this.cFClient_TrStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_TransactionNumber {
            get {
                return this.cFClient_TransactionNumberField;
            }
            set {
                this.cFClient_TransactionNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_TransferWork {
            get {
                return this.cFClient_TransferWorkField;
            }
            set {
                this.cFClient_TransferWorkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_UserData {
            get {
                return this.cFClient_UserDataField;
            }
            set {
                this.cFClient_UserDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFClient_Version {
            get {
                return this.cFClient_VersionField;
            }
            set {
                this.cFClient_VersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAlias {
            get {
                return this.fTPAliasField;
            }
            set {
                this.fTPAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSProperty {
            get {
                return this.jMSPropertyField;
            }
            set {
                this.jMSPropertyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string JMSSelector {
            get {
                return this.jMSSelectorField;
            }
            set {
                this.jMSSelectorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPArmorFlag {
            get {
                return this.pGPArmorFlagField;
            }
            set {
                this.pGPArmorFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPClSignature {
            get {
                return this.pGPClSignatureField;
            }
            set {
                this.pGPClSignatureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPClSigned {
            get {
                return this.pGPClSignedField;
            }
            set {
                this.pGPClSignedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPClSignerId {
            get {
                return this.pGPClSignerIdField;
            }
            set {
                this.pGPClSignerIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPClSigningKeyId {
            get {
                return this.pGPClSigningKeyIdField;
            }
            set {
                this.pGPClSigningKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPClVerified {
            get {
                return this.pGPClVerifiedField;
            }
            set {
                this.pGPClVerifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPCompAlg {
            get {
                return this.pGPCompAlgField;
            }
            set {
                this.pGPCompAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEncryptAlg {
            get {
                return this.pGPEncryptAlgField;
            }
            set {
                this.pGPEncryptAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPHashingAlg {
            get {
                return this.pGPHashingAlgField;
            }
            set {
                this.pGPHashingAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSrvSignature {
            get {
                return this.pGPSrvSignatureField;
            }
            set {
                this.pGPSrvSignatureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSrvSigned {
            get {
                return this.pGPSrvSignedField;
            }
            set {
                this.pGPSrvSignedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSrvSignerId {
            get {
                return this.pGPSrvSignerIdField;
            }
            set {
                this.pGPSrvSignerIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSrvSigningKeyId {
            get {
                return this.pGPSrvSigningKeyIdField;
            }
            set {
                this.pGPSrvSigningKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSrvVerified {
            get {
                return this.pGPSrvVerifiedField;
            }
            set {
                this.pGPSrvVerifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPTextMode {
            get {
                return this.pGPTextModeField;
            }
            set {
                this.pGPTextModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string allowableProtocol {
            get {
                return this.allowableProtocolField;
            }
            set {
                this.allowableProtocolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string authRoleId {
            get {
                return this.authRoleIdField;
            }
            set {
                this.authRoleIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string authUserId {
            get {
                return this.authUserIdField;
            }
            set {
                this.authUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime availableDate {
            get {
                return this.availableDateField;
            }
            set {
                this.availableDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string availableUpdatedBy {
            get {
                return this.availableUpdatedByField;
            }
            set {
                this.availableUpdatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string chkptTryMaxCount {
            get {
                return this.chkptTryMaxCountField;
            }
            set {
                this.chkptTryMaxCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ckPtTryMaxCount {
            get {
                return this.ckPtTryMaxCountField;
            }
            set {
                this.ckPtTryMaxCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string conversionFlag {
            get {
                return this.conversionFlagField;
            }
            set {
                this.conversionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultNodePwd {
            get {
                return this.defaultNodePwdField;
            }
            set {
                this.defaultNodePwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultNodeUserId {
            get {
                return this.defaultNodeUserIdField;
            }
            set {
                this.defaultNodeUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string directoryTransfer {
            get {
                return this.directoryTransferField;
            }
            set {
                this.directoryTransferField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string disableFlag {
            get {
                return this.disableFlagField;
            }
            set {
                this.disableFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureFlag {
            get {
                return this.emailFailureFlagField;
            }
            set {
                this.emailFailureFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailFailureTemplate {
            get {
                return this.emailFailureTemplateField;
            }
            set {
                this.emailFailureTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessFlag {
            get {
                return this.emailSuccessFlagField;
            }
            set {
                this.emailSuccessFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailSuccessTemplate {
            get {
                return this.emailSuccessTemplateField;
            }
            set {
                this.emailSuccessTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileId {
            get {
                return this.fileIdField;
            }
            set {
                this.fileIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string localHostName {
            get {
                return this.localHostNameField;
            }
            set {
                this.localHostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string oneTimeFlag {
            get {
                return this.oneTimeFlagField;
            }
            set {
                this.oneTimeFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyByteCount {
            get {
                return this.proxyByteCountField;
            }
            set {
                this.proxyByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyCompressedByteCount {
            get {
                return this.proxyCompressedByteCountField;
            }
            set {
                this.proxyCompressedByteCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyRemoteNTDomain {
            get {
                return this.proxyRemoteNTDomainField;
            }
            set {
                this.proxyRemoteNTDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyRemotePassword {
            get {
                return this.proxyRemotePasswordField;
            }
            set {
                this.proxyRemotePasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyRemoteTransactionId {
            get {
                return this.proxyRemoteTransactionIdField;
            }
            set {
                this.proxyRemoteTransactionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyRemoteUserId {
            get {
                return this.proxyRemoteUserIdField;
            }
            set {
                this.proxyRemoteUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyStatusDiagCode {
            get {
                return this.proxyStatusDiagCodeField;
            }
            set {
                this.proxyStatusDiagCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyStatusSeverity {
            get {
                return this.proxyStatusSeverityField;
            }
            set {
                this.proxyStatusSeverityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyTrFlag {
            get {
                return this.proxyTrFlagField;
            }
            set {
                this.proxyTrFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyTraceAppFileName {
            get {
                return this.proxyTraceAppFileNameField;
            }
            set {
                this.proxyTraceAppFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string proxyTraceCommFileName {
            get {
                return this.proxyTraceCommFileNameField;
            }
            set {
                this.proxyTraceCommFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tokenData {
            get {
                return this.tokenDataField;
            }
            set {
                this.tokenDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime tokenDateSet {
            get {
                return this.tokenDateSetField;
            }
            set {
                this.tokenDateSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tokenFlag {
            get {
                return this.tokenFlagField;
            }
            set {
                this.tokenFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceAppFileName {
            get {
                return this.traceAppFileNameField;
            }
            set {
                this.traceAppFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceCommFileName {
            get {
                return this.traceCommFileNameField;
            }
            set {
                this.traceCommFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlag {
            get {
                return this.traceFlagField;
            }
            set {
                this.traceFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotificationEmailAddress {
            get {
                return this.transferNotificationEmailAddressField;
            }
            set {
                this.transferNotificationEmailAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferNotificationEmailTemplate {
            get {
                return this.transferNotificationEmailTemplateField;
            }
            set {
                this.transferNotificationEmailTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string transferProtocol {
            get {
                return this.transferProtocolField;
            }
            set {
                this.transferProtocolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string unixPermissions {
            get {
                return this.unixPermissionsField;
            }
            set {
                this.unixPermissionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validDays {
            get {
                return this.validDaysField;
            }
            set {
                this.validDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validEndTime {
            get {
                return this.validEndTimeField;
            }
            set {
                this.validEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validStartTime {
            get {
                return this.validStartTimeField;
            }
            set {
                this.validStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string virusCheckFlag {
            get {
                return this.virusCheckFlagField;
            }
            set {
                this.virusCheckFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class AuditFT : AuditBase {
        
        private string oS390AllocDirField;
        
        private string sSLField;
        
        private string sSLPortNumField;
        
        private string crlMsgField;
        
        private string fileAttributesField;
        
        private string memberCountField;
        
        private string nodeClassField;
        
        private string priorityField;
        
        private string recordCountField;
        
        private string remNTDomainField;
        
        private string remNodeTypeField;
        
        private string remPortNumField;
        
        private string remTransIDField;
        
        private string remUserIDField;
        
        private string tempErrorField;
        
        private string trCommandField;
        
        private string trCompTypeField;
        
        private DateTime trExpireDateField;
        
        private DateTime trScheduleDateField;
        
        private string trStDiagCodeField;
        
        private string trStRtnCodeField;
        
        private string trStSeverityField;
        
        private string tryCountField;
        
        private string tryMaxCountField;
        
        private string unixFilePermField;
        
        private string versionNumField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OS390AllocDir {
            get {
                return this.oS390AllocDirField;
            }
            set {
                this.oS390AllocDirField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSL {
            get {
                return this.sSLField;
            }
            set {
                this.sSLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLPortNum {
            get {
                return this.sSLPortNumField;
            }
            set {
                this.sSLPortNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string crlMsg {
            get {
                return this.crlMsgField;
            }
            set {
                this.crlMsgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fileAttributes {
            get {
                return this.fileAttributesField;
            }
            set {
                this.fileAttributesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string memberCount {
            get {
                return this.memberCountField;
            }
            set {
                this.memberCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeClass {
            get {
                return this.nodeClassField;
            }
            set {
                this.nodeClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string recordCount {
            get {
                return this.recordCountField;
            }
            set {
                this.recordCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remNTDomain {
            get {
                return this.remNTDomainField;
            }
            set {
                this.remNTDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remNodeType {
            get {
                return this.remNodeTypeField;
            }
            set {
                this.remNodeTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remPortNum {
            get {
                return this.remPortNumField;
            }
            set {
                this.remPortNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remTransID {
            get {
                return this.remTransIDField;
            }
            set {
                this.remTransIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remUserID {
            get {
                return this.remUserIDField;
            }
            set {
                this.remUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tempError {
            get {
                return this.tempErrorField;
            }
            set {
                this.tempErrorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trCommand {
            get {
                return this.trCommandField;
            }
            set {
                this.trCommandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trCompType {
            get {
                return this.trCompTypeField;
            }
            set {
                this.trCompTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime trExpireDate {
            get {
                return this.trExpireDateField;
            }
            set {
                this.trExpireDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime trScheduleDate {
            get {
                return this.trScheduleDateField;
            }
            set {
                this.trScheduleDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trStDiagCode {
            get {
                return this.trStDiagCodeField;
            }
            set {
                this.trStDiagCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trStRtnCode {
            get {
                return this.trStRtnCodeField;
            }
            set {
                this.trStRtnCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string trStSeverity {
            get {
                return this.trStSeverityField;
            }
            set {
                this.trStSeverityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tryCount {
            get {
                return this.tryCountField;
            }
            set {
                this.tryCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tryMaxCount {
            get {
                return this.tryMaxCountField;
            }
            set {
                this.tryMaxCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string unixFilePerm {
            get {
                return this.unixFilePermField;
            }
            set {
                this.unixFilePermField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string versionNum {
            get {
                return this.versionNumField;
            }
            set {
                this.versionNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class User {
        
        private bool cFIUserField;
        
        private string fTPAuthTypeField;
        
        private string hTTPSAuthTypeField;
        
        private bool lDAPDerivedUserField;
        
        private string pGPAllowUserAddKeyField;
        
        private string sSHAuthTypeField;
        
        private bool activeUserTypeField;
        
        private string allowableProtocolField;
        
        private string certificateDNField;
        
        private string companyNameField;
        
        private string createdByField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateLastAccessField;
        
        private DateTime dateUpdatedField;
        
        private string defaultRoleField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string disableFlagField;
        
        private string emailAddrField;
        
        private DateTime endDateField;
        
        private DateTime expirationDateField;
        
        private string fullNameField;
        
        private string idField;
        
        private string lockFlagField;
        
        private string netMaskField;
        
        private string passwordField;
        
        private string phoneNumberField;
        
        private string pwdAllowSelfChangeField;
        
        private string pwdExpiresFlagField;
        
        private string pwdForceChangeField;
        
        private string pwdHistoryField;
        
        private DateTime pwdLastChangeDateField;
        
        private string restrictUserIPAddressField;
        
        private string restrictedIPAddressField;
        
        private string sendOnlyToUserIDField;
        
        private DateTime startDateField;
        
        private string traceFlagField;
        
        private string updatedByField;
        
        private string validDaysField;
        
        private string validEndTimeField;
        
        private string validStartTimeField;
        
        private bool validUserTypeField;
        
        private string visibilityField;
        
        /// <remarks/>
        public bool CFIUser {
            get {
                return this.cFIUserField;
            }
            set {
                this.cFIUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPAuthType {
            get {
                return this.fTPAuthTypeField;
            }
            set {
                this.fTPAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string HTTPSAuthType {
            get {
                return this.hTTPSAuthTypeField;
            }
            set {
                this.hTTPSAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool LDAPDerivedUser {
            get {
                return this.lDAPDerivedUserField;
            }
            set {
                this.lDAPDerivedUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPAllowUserAddKey {
            get {
                return this.pGPAllowUserAddKeyField;
            }
            set {
                this.pGPAllowUserAddKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHAuthType {
            get {
                return this.sSHAuthTypeField;
            }
            set {
                this.sSHAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool activeUserType {
            get {
                return this.activeUserTypeField;
            }
            set {
                this.activeUserTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string allowableProtocol {
            get {
                return this.allowableProtocolField;
            }
            set {
                this.allowableProtocolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string certificateDN {
            get {
                return this.certificateDNField;
            }
            set {
                this.certificateDNField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string companyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateLastAccess {
            get {
                return this.dateLastAccessField;
            }
            set {
                this.dateLastAccessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultRole {
            get {
                return this.defaultRoleField;
            }
            set {
                this.defaultRoleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string disableFlag {
            get {
                return this.disableFlagField;
            }
            set {
                this.disableFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailAddr {
            get {
                return this.emailAddrField;
            }
            set {
                this.emailAddrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime endDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string fullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lockFlag {
            get {
                return this.lockFlagField;
            }
            set {
                this.lockFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string netMask {
            get {
                return this.netMaskField;
            }
            set {
                this.netMaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string phoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdAllowSelfChange {
            get {
                return this.pwdAllowSelfChangeField;
            }
            set {
                this.pwdAllowSelfChangeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdExpiresFlag {
            get {
                return this.pwdExpiresFlagField;
            }
            set {
                this.pwdExpiresFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdForceChange {
            get {
                return this.pwdForceChangeField;
            }
            set {
                this.pwdForceChangeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pwdHistory {
            get {
                return this.pwdHistoryField;
            }
            set {
                this.pwdHistoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime pwdLastChangeDate {
            get {
                return this.pwdLastChangeDateField;
            }
            set {
                this.pwdLastChangeDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string restrictUserIPAddress {
            get {
                return this.restrictUserIPAddressField;
            }
            set {
                this.restrictUserIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string restrictedIPAddress {
            get {
                return this.restrictedIPAddressField;
            }
            set {
                this.restrictedIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sendOnlyToUserID {
            get {
                return this.sendOnlyToUserIDField;
            }
            set {
                this.sendOnlyToUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime startDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlag {
            get {
                return this.traceFlagField;
            }
            set {
                this.traceFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validDays {
            get {
                return this.validDaysField;
            }
            set {
                this.validDaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validEndTime {
            get {
                return this.validEndTimeField;
            }
            set {
                this.validEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string validStartTime {
            get {
                return this.validStartTimeField;
            }
            set {
                this.validStartTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool validUserType {
            get {
                return this.validUserTypeField;
            }
            set {
                this.validUserTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Session {
        
        private string addTerminatingNullField;
        
        private string remoteIPAddressField;
        
        private string sessionIDField;
        
        private DateTime sessionIDDateField;
        
        private string userIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string addTerminatingNull {
            get {
                return this.addTerminatingNullField;
            }
            set {
                this.addTerminatingNullField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteIPAddress {
            get {
                return this.remoteIPAddressField;
            }
            set {
                this.remoteIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime sessionIDDate {
            get {
                return this.sessionIDDateField;
            }
            set {
                this.sessionIDDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class CFServerConfig {
        
        private string sSLPortField;
        
        private string sSLPortEnabledField;
        
        private string authTypeField;
        
        private string autoStartField;
        
        private string bindIPAddressField;
        
        private string descriptionField;
        
        private string emptyField;
        
        private string enabledField;
        
        private string hostNameField;
        
        private string keystoreField;
        
        private string keystorePasswordField;
        
        private string portField;
        
        private string portEnabledField;
        
        private string socketTimeoutField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLPort {
            get {
                return this.sSLPortField;
            }
            set {
                this.sSLPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSLPortEnabled {
            get {
                return this.sSLPortEnabledField;
            }
            set {
                this.sSLPortEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string authType {
            get {
                return this.authTypeField;
            }
            set {
                this.authTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string autoStart {
            get {
                return this.autoStartField;
            }
            set {
                this.autoStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string bindIPAddress {
            get {
                return this.bindIPAddressField;
            }
            set {
                this.bindIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string empty {
            get {
                return this.emptyField;
            }
            set {
                this.emptyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string hostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keystore {
            get {
                return this.keystoreField;
            }
            set {
                this.keystoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keystorePassword {
            get {
                return this.keystorePasswordField;
            }
            set {
                this.keystorePasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string portEnabled {
            get {
                return this.portEnabledField;
            }
            set {
                this.portEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string socketTimeout {
            get {
                return this.socketTimeoutField;
            }
            set {
                this.socketTimeoutField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ServerCredentials))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class UserProfile {
        
        private string idNameField;
        
        private string idTypeField;
        
        private string nodeNameField;
        
        private string remotePasswordField;
        
        private string remoteUserIdField;
        
        private string remoteUserNTDomainField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string idName {
            get {
                return this.idNameField;
            }
            set {
                this.idNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string idType {
            get {
                return this.idTypeField;
            }
            set {
                this.idTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remotePassword {
            get {
                return this.remotePasswordField;
            }
            set {
                this.remotePasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteUserId {
            get {
                return this.remoteUserIdField;
            }
            set {
                this.remoteUserIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string remoteUserNTDomain {
            get {
                return this.remoteUserNTDomainField;
            }
            set {
                this.remoteUserNTDomainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class ServerCredentials : UserProfile {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Role {
        
        private string departmentField;
        
        private string descriptionField;
        
        private string idField;
        
        private string preDefinedFlagField;
        
        private string visibilityField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string preDefinedFlag {
            get {
                return this.preDefinedFlagField;
            }
            set {
                this.preDefinedFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Server))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Node {
        
        private string cFComputerNameField;
        
        private string cFVersionField;
        
        private string dNIPassField;
        
        private string dNIPortField;
        
        private string dNIUserField;
        
        private string fTPCaseSensitiveField;
        
        private string fTPKeepAliveIntervalField;
        
        private string fTPPrivKeyField;
        
        private string iPNameField;
        
        private string iPPortField;
        
        private string mDNReceiptField;
        
        private string mDNSignField;
        
        private string pGPArmorField;
        
        private string pGPCompAlgField;
        
        private string pGPEnabledField;
        
        private string pGPEncryptAlgField;
        
        private string pGPHashAlgField;
        
        private string pGPPrivKeyField;
        
        private string pGPSignField;
        
        private string pGPTextModeField;
        
        private string pGPVerifyServerSignField;
        
        private string pGPVerifySignField;
        
        private string sSHBlockSizeField;
        
        private string sSHCompressField;
        
        private string sSHPoolingFlagField;
        
        private string sSHPrivKeyField;
        
        private string bindIPAddressField;
        
        private string checkServerStatusField;
        
        private string clearCommandChannelField;
        
        private string collectIntervalField;
        
        private string collectTypeField;
        
        private string collectionFlagField;
        
        private string compressTypeField;
        
        private string connectionSecurityTypeField;
        
        private string contextField;
        
        private string createdByField;
        
        private string dataConnectionTypeField;
        
        private DateTime dateCreatedField;
        
        private DateTime dateUpdatedField;
        
        private string defaultEncryptTypeField;
        
        private string defaultLTTableField;
        
        private string defaultNTDomainField;
        
        private string defaultPassField;
        
        private string defaultRTTableField;
        
        private string defaultUserField;
        
        private string departmentField;
        
        private string descriptionField;
        
        private string disableFlagField;
        
        private string extIPAddressField;
        
        private string idOfLastCollectField;
        
        private string inEncAlgField;
        
        private string inSignAlgField;
        
        private string keyFlagField;
        
        private DateTime lastFailServerStatusDateField;
        
        private DateTime lastGoodServerStatusDateField;
        
        private string lastServerStatusField;
        
        private DateTime lastServerStatusDateField;
        
        private string manageCFServerFlagField;
        
        private string nameField;
        
        private string nodeTypeField;
        
        private string outChunkingField;
        
        private string outCompAlgField;
        
        private string outDataTypeField;
        
        private string outEncAlgField;
        
        private string outSignAlgField;
        
        private string outTimeoutField;
        
        private string partnerAS2IDField;
        
        private string priEncNameField;
        
        private string priSignNameField;
        
        private string priorServerStatusField;
        
        private DateTime priorServerStatusDateField;
        
        private string pubEncCertField;
        
        private string pubSSLCertField;
        
        private string pubSignCertField;
        
        private string secureFlagField;
        
        private DateTime serverExpiredEmailDateField;
        
        private string serverFileNamePrefixField;
        
        private string serverLicenseKeyField;
        
        private string serverStatusFailCountField;
        
        private string serverStatusGoodCountField;
        
        private string serverTypeField;
        
        private string srvAS2IDField;
        
        private string theClassNameField;
        
        private DateTime timeOfLastCollectionField;
        
        private string traceFlagField;
        
        private string updatedByField;
        
        private string useExtIPAddressField;
        
        private string userIDField;
        
        private string visibilityField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFComputerName {
            get {
                return this.cFComputerNameField;
            }
            set {
                this.cFComputerNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CFVersion {
            get {
                return this.cFVersionField;
            }
            set {
                this.cFVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string DNIPass {
            get {
                return this.dNIPassField;
            }
            set {
                this.dNIPassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string DNIPort {
            get {
                return this.dNIPortField;
            }
            set {
                this.dNIPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string DNIUser {
            get {
                return this.dNIUserField;
            }
            set {
                this.dNIUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPCaseSensitive {
            get {
                return this.fTPCaseSensitiveField;
            }
            set {
                this.fTPCaseSensitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPKeepAliveInterval {
            get {
                return this.fTPKeepAliveIntervalField;
            }
            set {
                this.fTPKeepAliveIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FTPPrivKey {
            get {
                return this.fTPPrivKeyField;
            }
            set {
                this.fTPPrivKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPName {
            get {
                return this.iPNameField;
            }
            set {
                this.iPNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPPort {
            get {
                return this.iPPortField;
            }
            set {
                this.iPPortField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MDNReceipt {
            get {
                return this.mDNReceiptField;
            }
            set {
                this.mDNReceiptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string MDNSign {
            get {
                return this.mDNSignField;
            }
            set {
                this.mDNSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPArmor {
            get {
                return this.pGPArmorField;
            }
            set {
                this.pGPArmorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPCompAlg {
            get {
                return this.pGPCompAlgField;
            }
            set {
                this.pGPCompAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEnabled {
            get {
                return this.pGPEnabledField;
            }
            set {
                this.pGPEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPEncryptAlg {
            get {
                return this.pGPEncryptAlgField;
            }
            set {
                this.pGPEncryptAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPHashAlg {
            get {
                return this.pGPHashAlgField;
            }
            set {
                this.pGPHashAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPPrivKey {
            get {
                return this.pGPPrivKeyField;
            }
            set {
                this.pGPPrivKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPSign {
            get {
                return this.pGPSignField;
            }
            set {
                this.pGPSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPTextMode {
            get {
                return this.pGPTextModeField;
            }
            set {
                this.pGPTextModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPVerifyServerSign {
            get {
                return this.pGPVerifyServerSignField;
            }
            set {
                this.pGPVerifyServerSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PGPVerifySign {
            get {
                return this.pGPVerifySignField;
            }
            set {
                this.pGPVerifySignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHBlockSize {
            get {
                return this.sSHBlockSizeField;
            }
            set {
                this.sSHBlockSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHCompress {
            get {
                return this.sSHCompressField;
            }
            set {
                this.sSHCompressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHPoolingFlag {
            get {
                return this.sSHPoolingFlagField;
            }
            set {
                this.sSHPoolingFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SSHPrivKey {
            get {
                return this.sSHPrivKeyField;
            }
            set {
                this.sSHPrivKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string bindIPAddress {
            get {
                return this.bindIPAddressField;
            }
            set {
                this.bindIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string checkServerStatus {
            get {
                return this.checkServerStatusField;
            }
            set {
                this.checkServerStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string clearCommandChannel {
            get {
                return this.clearCommandChannelField;
            }
            set {
                this.clearCommandChannelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string collectInterval {
            get {
                return this.collectIntervalField;
            }
            set {
                this.collectIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string collectType {
            get {
                return this.collectTypeField;
            }
            set {
                this.collectTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string collectionFlag {
            get {
                return this.collectionFlagField;
            }
            set {
                this.collectionFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string compressType {
            get {
                return this.compressTypeField;
            }
            set {
                this.compressTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string connectionSecurityType {
            get {
                return this.connectionSecurityTypeField;
            }
            set {
                this.connectionSecurityTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dataConnectionType {
            get {
                return this.dataConnectionTypeField;
            }
            set {
                this.dataConnectionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime dateUpdated {
            get {
                return this.dateUpdatedField;
            }
            set {
                this.dateUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultEncryptType {
            get {
                return this.defaultEncryptTypeField;
            }
            set {
                this.defaultEncryptTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultLTTable {
            get {
                return this.defaultLTTableField;
            }
            set {
                this.defaultLTTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultNTDomain {
            get {
                return this.defaultNTDomainField;
            }
            set {
                this.defaultNTDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultPass {
            get {
                return this.defaultPassField;
            }
            set {
                this.defaultPassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultRTTable {
            get {
                return this.defaultRTTableField;
            }
            set {
                this.defaultRTTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string defaultUser {
            get {
                return this.defaultUserField;
            }
            set {
                this.defaultUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string disableFlag {
            get {
                return this.disableFlagField;
            }
            set {
                this.disableFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string extIPAddress {
            get {
                return this.extIPAddressField;
            }
            set {
                this.extIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string idOfLastCollect {
            get {
                return this.idOfLastCollectField;
            }
            set {
                this.idOfLastCollectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string inEncAlg {
            get {
                return this.inEncAlgField;
            }
            set {
                this.inEncAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string inSignAlg {
            get {
                return this.inSignAlgField;
            }
            set {
                this.inSignAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string keyFlag {
            get {
                return this.keyFlagField;
            }
            set {
                this.keyFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime lastFailServerStatusDate {
            get {
                return this.lastFailServerStatusDateField;
            }
            set {
                this.lastFailServerStatusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime lastGoodServerStatusDate {
            get {
                return this.lastGoodServerStatusDateField;
            }
            set {
                this.lastGoodServerStatusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastServerStatus {
            get {
                return this.lastServerStatusField;
            }
            set {
                this.lastServerStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime lastServerStatusDate {
            get {
                return this.lastServerStatusDateField;
            }
            set {
                this.lastServerStatusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string manageCFServerFlag {
            get {
                return this.manageCFServerFlagField;
            }
            set {
                this.manageCFServerFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string nodeType {
            get {
                return this.nodeTypeField;
            }
            set {
                this.nodeTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outChunking {
            get {
                return this.outChunkingField;
            }
            set {
                this.outChunkingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outCompAlg {
            get {
                return this.outCompAlgField;
            }
            set {
                this.outCompAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outDataType {
            get {
                return this.outDataTypeField;
            }
            set {
                this.outDataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outEncAlg {
            get {
                return this.outEncAlgField;
            }
            set {
                this.outEncAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outSignAlg {
            get {
                return this.outSignAlgField;
            }
            set {
                this.outSignAlgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outTimeout {
            get {
                return this.outTimeoutField;
            }
            set {
                this.outTimeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string partnerAS2ID {
            get {
                return this.partnerAS2IDField;
            }
            set {
                this.partnerAS2IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string priEncName {
            get {
                return this.priEncNameField;
            }
            set {
                this.priEncNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string priSignName {
            get {
                return this.priSignNameField;
            }
            set {
                this.priSignNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string priorServerStatus {
            get {
                return this.priorServerStatusField;
            }
            set {
                this.priorServerStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime priorServerStatusDate {
            get {
                return this.priorServerStatusDateField;
            }
            set {
                this.priorServerStatusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pubEncCert {
            get {
                return this.pubEncCertField;
            }
            set {
                this.pubEncCertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pubSSLCert {
            get {
                return this.pubSSLCertField;
            }
            set {
                this.pubSSLCertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string pubSignCert {
            get {
                return this.pubSignCertField;
            }
            set {
                this.pubSignCertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string secureFlag {
            get {
                return this.secureFlagField;
            }
            set {
                this.secureFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime serverExpiredEmailDate {
            get {
                return this.serverExpiredEmailDateField;
            }
            set {
                this.serverExpiredEmailDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverFileNamePrefix {
            get {
                return this.serverFileNamePrefixField;
            }
            set {
                this.serverFileNamePrefixField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverLicenseKey {
            get {
                return this.serverLicenseKeyField;
            }
            set {
                this.serverLicenseKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverStatusFailCount {
            get {
                return this.serverStatusFailCountField;
            }
            set {
                this.serverStatusFailCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverStatusGoodCount {
            get {
                return this.serverStatusGoodCountField;
            }
            set {
                this.serverStatusGoodCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string serverType {
            get {
                return this.serverTypeField;
            }
            set {
                this.serverTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string srvAS2ID {
            get {
                return this.srvAS2IDField;
            }
            set {
                this.srvAS2IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string theClassName {
            get {
                return this.theClassNameField;
            }
            set {
                this.theClassNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DateTime timeOfLastCollection {
            get {
                return this.timeOfLastCollectionField;
            }
            set {
                this.timeOfLastCollectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string traceFlag {
            get {
                return this.traceFlagField;
            }
            set {
                this.traceFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string updatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string useExtIPAddress {
            get {
                return this.useExtIPAddressField;
            }
            set {
                this.useExtIPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Server : Node {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://dbaccess.sift.proginet.com")]
    public partial class DirectoryElementList {
        
        private string elementNameField;
        
        private string elementTypeField;
        
        private DirectoryElementList[] subDirectoryListField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string elementName {
            get {
                return this.elementNameField;
            }
            set {
                this.elementNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string elementType {
            get {
                return this.elementTypeField;
            }
            set {
                this.elementTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public DirectoryElementList[] subDirectoryList {
            get {
                return this.subDirectoryListField;
            }
            set {
                this.subDirectoryListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:AdministratorService")]
    public partial class Transfer : FileInfo {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFileCompletedEventHandler(object sender, getFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getServerCompletedEventHandler(object sender, getServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getGroupCompletedEventHandler(object sender, getGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRoleCompletedEventHandler(object sender, getRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserProfileCompletedEventHandler(object sender, getUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserProfile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserProfile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllLicenseKeysCompletedEventHandler(object sender, retrieveAllLicenseKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllLicenseKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllLicenseKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseKey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseKey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addLicenseKeyCompletedEventHandler(object sender, addLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateLicenseKeyCompletedEventHandler(object sender, updateLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeLicenseKeyCompletedEventHandler(object sender, removeLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLicenseKeyCompletedEventHandler(object sender, getLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseKey Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseKey)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateCFSrvConfigCompletedEventHandler(object sender, updateCFSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCFSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCFSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCFSrvConfigCompletedEventHandler(object sender, getCFSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCFSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCFSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFServerConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFServerConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCFSrvConfig1CompletedEventHandler(object sender, getCFSrvConfig1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCFSrvConfig1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCFSrvConfig1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFServerConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFServerConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllNodesCompletedEventHandler(object sender, retrieveAllNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Node[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Node[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchServersCompletedEventHandler(object sender, searchServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllCfServerNamesCompletedEventHandler(object sender, retrieveAllCfServerNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllCfServerNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllCfServerNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllServersCompletedEventHandler(object sender, retrieveAllServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllServerNamesInDeptCompletedEventHandler(object sender, retrieveAllServerNamesInDeptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllServerNamesInDeptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllServerNamesInDeptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllMonitorServersCompletedEventHandler(object sender, retrieveAllMonitorServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllMonitorServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllMonitorServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllServerNamesCompletedEventHandler(object sender, retrieveAllServerNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllServerNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllServerNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllMonitorNodesCompletedEventHandler(object sender, retrieveAllMonitorNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllMonitorNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllMonitorNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Node[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Node[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllNodeNamesCompletedEventHandler(object sender, retrieveAllNodeNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllNodeNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllNodeNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteExpiredSessionIdsCompletedEventHandler(object sender, deleteExpiredSessionIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteExpiredSessionIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteExpiredSessionIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteSessionIdCompletedEventHandler(object sender, deleteSessionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteSessionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteSessionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getExpiredSessionIdsCompletedEventHandler(object sender, getExpiredSessionIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExpiredSessionIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExpiredSessionIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Session[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Session[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void listActiveSessionIdsCompletedEventHandler(object sender, listActiveSessionIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listActiveSessionIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listActiveSessionIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Session[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Session[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addAndReturnUserCompletedEventHandler(object sender, addAndReturnUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addAndReturnUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addAndReturnUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersCompletedEventHandler(object sender, retrieveAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersInDeptCompletedEventHandler(object sender, retrieveAllUsersInDeptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersInDeptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersInDeptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersInDept1CompletedEventHandler(object sender, retrieveAllUsersInDept1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersInDept1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersInDept1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUserIdsCompletedEventHandler(object sender, retrieveAllUserIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUserIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUserIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUserIds1CompletedEventHandler(object sender, retrieveAllUserIds1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUserIds1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUserIds1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveUserIdsCompletedEventHandler(object sender, retrieveUserIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveUserIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveUserIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUsersDepartmentCompletedEventHandler(object sender, getUsersDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateTransferCompletedEventHandler(object sender, updateTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeTransferCompletedEventHandler(object sender, removeTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeExpiredTransfersCompletedEventHandler(object sender, removeExpiredTransfersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeExpiredTransfersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeExpiredTransfersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllTransfersCompletedEventHandler(object sender, retrieveAllTransfersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllTransfersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllTransfersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transfer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transfer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllExpiredTransfersCompletedEventHandler(object sender, retrieveAllExpiredTransfersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllExpiredTransfersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllExpiredTransfersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transfer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transfer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllTransfersForUserCompletedEventHandler(object sender, retrieveAllTransfersForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllTransfersForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllTransfersForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transfer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transfer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchTransfersCompletedEventHandler(object sender, searchTransfersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchTransfersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchTransfersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transfer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transfer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeExpiredFilesCompletedEventHandler(object sender, removeExpiredFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeExpiredFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeExpiredFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllFilesCompletedEventHandler(object sender, retrieveAllFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllExpiredFilesCompletedEventHandler(object sender, retrieveAllExpiredFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllExpiredFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllExpiredFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllFilesForUserCompletedEventHandler(object sender, retrieveAllFilesForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllFilesForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllFilesForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllRolesCompletedEventHandler(object sender, retrieveAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllRolesForUserCompletedEventHandler(object sender, retrieveAllRolesForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllRolesForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllRolesForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersInRoleCompletedEventHandler(object sender, retrieveAllUsersInRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersInRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersInRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersNotInRoleCompletedEventHandler(object sender, retrieveAllUsersNotInRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersNotInRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersNotInRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addUserToRoleCompletedEventHandler(object sender, addUserToRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserToRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserToRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeUserFromRoleCompletedEventHandler(object sender, removeUserFromRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeUserFromRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeUserFromRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllGroupsCompletedEventHandler(object sender, retrieveAllGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllGroupsInDeptCompletedEventHandler(object sender, retrieveAllGroupsInDeptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllGroupsInDeptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllGroupsInDeptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllGroupsForUserCompletedEventHandler(object sender, retrieveAllGroupsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllGroupsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllGroupsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersInGroupCompletedEventHandler(object sender, retrieveAllUsersInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUsersNotInGroupCompletedEventHandler(object sender, retrieveAllUsersNotInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUsersNotInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUsersNotInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllGroupIdsCompletedEventHandler(object sender, retrieveAllGroupIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllGroupIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllGroupIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addUserToGroupCompletedEventHandler(object sender, addUserToGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeUserFromGroupCompletedEventHandler(object sender, removeUserFromGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeUserFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeUserFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllConfigsCompletedEventHandler(object sender, retrieveAllConfigsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Config[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Config[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllAuditsCompletedEventHandler(object sender, retrieveAllAuditsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllAuditsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllAuditsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditBase[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditBase[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllAuditsForUserCompletedEventHandler(object sender, retrieveAllAuditsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllAuditsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllAuditsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditBase[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditBase[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addServerCredentialCompletedEventHandler(object sender, addServerCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addServerCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addServerCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAuditsOlderThanDaysCompletedEventHandler(object sender, removeAuditsOlderThanDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAuditsOlderThanDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAuditsOlderThanDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAuditsOlderThanDateCompletedEventHandler(object sender, removeAuditsOlderThanDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAuditsOlderThanDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAuditsOlderThanDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateServerCredentialCompletedEventHandler(object sender, updateServerCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateServerCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateServerCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeServerCredentialCompletedEventHandler(object sender, removeServerCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeServerCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeServerCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllServerCredentialsCompletedEventHandler(object sender, retrieveAllServerCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllServerCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllServerCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerCredentials[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCredentials[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getServerCredentialCompletedEventHandler(object sender, getServerCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerCredentials Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCredentials)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchServerCredentialsCompletedEventHandler(object sender, searchServerCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchServerCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchServerCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerCredentials[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerCredentials[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addUserProfileCompletedEventHandler(object sender, addUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateUserProfileCompletedEventHandler(object sender, updateUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeUserProfileCompletedEventHandler(object sender, removeUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUserProfilesCompletedEventHandler(object sender, retrieveAllUserProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUserProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUserProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserProfile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserProfile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchUserProfileCompletedEventHandler(object sender, searchUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserProfile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserProfile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCheckpointCompletedEventHandler(object sender, getCheckpointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCheckpointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCheckpointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Checkpoint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Checkpoint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeCheckpointCompletedEventHandler(object sender, removeCheckpointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeCheckpointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeCheckpointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchCheckpointsCompletedEventHandler(object sender, searchCheckpointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchCheckpointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchCheckpointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Checkpoint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Checkpoint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllCheckpointsCompletedEventHandler(object sender, retrieveAllCheckpointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllCheckpointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllCheckpointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Checkpoint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Checkpoint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllCFSrvConfigsCompletedEventHandler(object sender, retrieveAllCFSrvConfigsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllCFSrvConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllCFSrvConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFServerConfig[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFServerConfig[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeCFSrvConfigCompletedEventHandler(object sender, removeCFSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeCFSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeCFSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateAS2SrvConfigCompletedEventHandler(object sender, updateAS2SrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateAS2SrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateAS2SrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAS2SrvConfigCompletedEventHandler(object sender, getAS2SrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAS2SrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAS2SrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AS2SrvCfg Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AS2SrvCfg)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAS2SrvConfig1CompletedEventHandler(object sender, getAS2SrvConfig1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAS2SrvConfig1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAS2SrvConfig1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AS2SrvCfg Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AS2SrvCfg)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllAS2SrvConfigsCompletedEventHandler(object sender, retrieveAllAS2SrvConfigsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllAS2SrvConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllAS2SrvConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AS2SrvCfg[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AS2SrvCfg[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAS2SrvConfigCompletedEventHandler(object sender, removeAS2SrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAS2SrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAS2SrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateFtpSrvConfigCompletedEventHandler(object sender, updateFtpSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateFtpSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateFtpSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFtpSrvConfigCompletedEventHandler(object sender, getFtpSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFtpSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFtpSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTPServerConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTPServerConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFtpSrvConfig1CompletedEventHandler(object sender, getFtpSrvConfig1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFtpSrvConfig1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFtpSrvConfig1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTPServerConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTPServerConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void FTPServerStartCompletedEventHandler(object sender, FTPServerStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FTPServerStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FTPServerStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void FTPServerStopCompletedEventHandler(object sender, FTPServerStopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FTPServerStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FTPServerStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFTPServerStatusCompletedEventHandler(object sender, getFTPServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFTPServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFTPServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllFTPSrvConfigsCompletedEventHandler(object sender, retrieveAllFTPSrvConfigsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllFTPSrvConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllFTPSrvConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTPServerConfig[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTPServerConfig[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeFTPSrvConfigCompletedEventHandler(object sender, removeFTPSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeFTPSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeFTPSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addDepartmentCompletedEventHandler(object sender, addDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateDepartmentCompletedEventHandler(object sender, updateDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeDepartmentCompletedEventHandler(object sender, removeDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllDepartmentsCompletedEventHandler(object sender, retrieveAllDepartmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllDepartmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllDepartmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Department[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Department[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addTransferToBankCompletedEventHandler(object sender, addTransferToBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTransferToBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTransferToBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateTransferInBankCompletedEventHandler(object sender, updateTransferInBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTransferInBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTransferInBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTransferFromBankCompletedEventHandler(object sender, deleteTransferFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTransferFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTransferFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTransferFromBankCompletedEventHandler(object sender, getTransferFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransferFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTransferFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTTransfer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTTransfer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllTransfersFromBankCompletedEventHandler(object sender, retrieveAllTransfersFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllTransfersFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllTransfersFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTTransfer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTTransfer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchFTTransfersCompletedEventHandler(object sender, searchFTTransfersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchFTTransfersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchFTTransfersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTTransfer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTTransfer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void submitTransferToServerCompletedEventHandler(object sender, submitTransferToServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class submitTransferToServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal submitTransferToServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addNodeToBankCompletedEventHandler(object sender, addNodeToBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addNodeToBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addNodeToBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateNodeInBankCompletedEventHandler(object sender, updateNodeInBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateNodeInBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateNodeInBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteNodeFromBankCompletedEventHandler(object sender, deleteNodeFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteNodeFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteNodeFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getNodeFromServerCompletedEventHandler(object sender, getNodeFromServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NodeFT Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NodeFT)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllNodesFromServerCompletedEventHandler(object sender, retrieveAllNodesFromServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllNodesFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllNodesFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NodeFT[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NodeFT[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addNodeToServerCompletedEventHandler(object sender, addNodeToServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addNodeToServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addNodeToServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteNodeFromServerCompletedEventHandler(object sender, deleteNodeFromServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteNodeFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteNodeFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDailyStatisticsCompletedEventHandler(object sender, getDailyStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDailyStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDailyStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DailyStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DailyStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllNodeFTsFromBankCompletedEventHandler(object sender, retrieveAllNodeFTsFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllNodeFTsFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllNodeFTsFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NodeFT[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NodeFT[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getNodeFromBankCompletedEventHandler(object sender, getNodeFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NodeFT Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NodeFT)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCollectorRemoteStatusCompletedEventHandler(object sender, getCollectorRemoteStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCollectorRemoteStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCollectorRemoteStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void collectorRemoteStartCompletedEventHandler(object sender, collectorRemoteStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class collectorRemoteStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal collectorRemoteStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void collectorRemoteStopCompletedEventHandler(object sender, collectorRemoteStopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class collectorRemoteStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal collectorRemoteStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllAlertsCompletedEventHandler(object sender, retrieveAllAlertsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllAlertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllAlertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Alert[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Alert[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addProfileToBankCompletedEventHandler(object sender, addProfileToBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addProfileToBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addProfileToBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateProfileInBankCompletedEventHandler(object sender, updateProfileInBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateProfileInBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateProfileInBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteProfileFromBankCompletedEventHandler(object sender, deleteProfileFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteProfileFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteProfileFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProfileFromBankCompletedEventHandler(object sender, getProfileFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProfileFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProfileFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Profile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Profile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllProfilesFromBankCompletedEventHandler(object sender, retrieveAllProfilesFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllProfilesFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllProfilesFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Profile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Profile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addProfileToServerCompletedEventHandler(object sender, addProfileToServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addProfileToServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addProfileToServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteProfileFromServerCompletedEventHandler(object sender, deleteProfileFromServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteProfileFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteProfileFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addSearchAuditToBankCompletedEventHandler(object sender, addSearchAuditToBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSearchAuditToBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSearchAuditToBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateSearchAuditInBankCompletedEventHandler(object sender, updateSearchAuditInBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSearchAuditInBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSearchAuditInBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteSearchAuditFromBankCompletedEventHandler(object sender, deleteSearchAuditFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteSearchAuditFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteSearchAuditFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSearchAuditFromBankCompletedEventHandler(object sender, getSearchAuditFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSearchAuditFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSearchAuditFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchAudit Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchAudit)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchAuditInServerCompletedEventHandler(object sender, searchAuditInServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchAuditInServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchAuditInServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditBase[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditBase[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateSshSrvConfigCompletedEventHandler(object sender, updateSshSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSshSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSshSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSshSrvConfigCompletedEventHandler(object sender, getSshSrvConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSshSrvConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSshSrvConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SshServerConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SshServerConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSshSrvConfig1CompletedEventHandler(object sender, getSshSrvConfig1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSshSrvConfig1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSshSrvConfig1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SshServerConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SshServerConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllSshSrvConfigsCompletedEventHandler(object sender, retrieveAllSshSrvConfigsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllSshSrvConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllSshSrvConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SshServerConfig[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SshServerConfig[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAlertAuditCompletedEventHandler(object sender, removeAlertAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAlertAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAlertAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAlertAuditCompletedEventHandler(object sender, getAlertAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAlertAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAlertAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllAlertAuditsCompletedEventHandler(object sender, retrieveAllAlertAuditsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllAlertAuditsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllAlertAuditsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditAlert[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditAlert[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchAlertAuditsCompletedEventHandler(object sender, searchAlertAuditsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchAlertAuditsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchAlertAuditsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditAlert[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditAlert[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllUserServerKeysCompletedEventHandler(object sender, retrieveAllUserServerKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllUserServerKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllUserServerKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllPrivateKeysCompletedEventHandler(object sender, retrieveAllPrivateKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllPrivateKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllPrivateKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllPrivateKeyIdsCompletedEventHandler(object sender, retrieveAllPrivateKeyIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllPrivateKeyIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllPrivateKeyIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSystemPublicKeyCompletedEventHandler(object sender, getSystemPublicKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSystemPublicKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSystemPublicKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void validateAddKeyCompletedEventHandler(object sender, validateAddKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateAddKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateAddKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void validateUpdateKeyCompletedEventHandler(object sender, validateUpdateKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateUpdateKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateUpdateKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getPublicSystemKeyByIdCompletedEventHandler(object sender, getPublicSystemKeyByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPublicSystemKeyByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPublicSystemKeyByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSSHSystemKeyByIdCompletedEventHandler(object sender, getSSHSystemKeyByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSHSystemKeyByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSHSystemKeyByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void setDefaultSystemKeyCompletedEventHandler(object sender, setDefaultSystemKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setDefaultSystemKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setDefaultSystemKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCertFromSSHKeyCompletedEventHandler(object sender, getCertFromSSHKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCertFromSSHKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCertFromSSHKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateServerStatusConfigCompletedEventHandler(object sender, updateServerStatusConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateServerStatusConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateServerStatusConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getServerStatusConfigCompletedEventHandler(object sender, getServerStatusConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerStatusConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerStatusConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerStatusConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerStatusConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getServerStatusConfig1CompletedEventHandler(object sender, getServerStatusConfig1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerStatusConfig1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerStatusConfig1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerStatusConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerStatusConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeServerStatusConfigCompletedEventHandler(object sender, removeServerStatusConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeServerStatusConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeServerStatusConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addOnDemandSecurityCompletedEventHandler(object sender, addOnDemandSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOnDemandSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOnDemandSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addOnDemandUsersCompletedEventHandler(object sender, addOnDemandUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOnDemandUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOnDemandUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateOnDemandSecurityCompletedEventHandler(object sender, updateOnDemandSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateOnDemandSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateOnDemandSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeOnDemandSecurityCompletedEventHandler(object sender, removeOnDemandSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeOnDemandSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeOnDemandSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeOnDemandUsersCompletedEventHandler(object sender, removeOnDemandUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeOnDemandUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeOnDemandUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getOnDemandSecurityCompletedEventHandler(object sender, getOnDemandSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOnDemandSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOnDemandSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OnDemandSecurity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OnDemandSecurity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getOnDemandUsersCompletedEventHandler(object sender, getOnDemandUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOnDemandUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOnDemandUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OnDemandUsers[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OnDemandUsers[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllOnDemandUsersCompletedEventHandler(object sender, retrieveAllOnDemandUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllOnDemandUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllOnDemandUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllOnDemandSecurityCompletedEventHandler(object sender, retrieveAllOnDemandSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllOnDemandSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllOnDemandSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OnDemandSecurity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OnDemandSecurity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchOnDemandSecurityCompletedEventHandler(object sender, searchOnDemandSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchOnDemandSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchOnDemandSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OnDemandSecurity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OnDemandSecurity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateJMSConfigCompletedEventHandler(object sender, updateJMSConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateJMSConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateJMSConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void testJMSServerCompletedEventHandler(object sender, testJMSServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testJMSServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testJMSServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Messages Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Messages)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateCollectorSrvCfgCompletedEventHandler(object sender, updateCollectorSrvCfgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCollectorSrvCfgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCollectorSrvCfgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCollectorSrvCfgCompletedEventHandler(object sender, getCollectorSrvCfgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCollectorSrvCfgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCollectorSrvCfgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CollectorSrvCfg Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CollectorSrvCfg)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void changePasswordCompletedEventHandler(object sender, changePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCopyrightInfoCompletedEventHandler(object sender, getCopyrightInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCopyrightInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCopyrightInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProductNameVersionCompletedEventHandler(object sender, getProductNameVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProductNameVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProductNameVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void validateSessionCompletedEventHandler(object sender, validateSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeUserCompletedEventHandler(object sender, removeUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeGroupCompletedEventHandler(object sender, removeGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addGroupCompletedEventHandler(object sender, addGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserCompletedEventHandler(object sender, getUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getServerStatusCompletedEventHandler(object sender, getServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSessionCompletedEventHandler(object sender, getSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllProfilesFromServerCompletedEventHandler(object sender, retrieveAllProfilesFromServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllProfilesFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllProfilesFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Profile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Profile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllPGPServerNamesInDeptCompletedEventHandler(object sender, retrieveAllPGPServerNamesInDeptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllPGPServerNamesInDeptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllPGPServerNamesInDeptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllServerNamesInDeptByTypeCompletedEventHandler(object sender, retrieveAllServerNamesInDeptByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllServerNamesInDeptByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllServerNamesInDeptByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllSearchAuditsFromBankCompletedEventHandler(object sender, retrieveAllSearchAuditsFromBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllSearchAuditsFromBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllSearchAuditsFromBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchAudit[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchAudit[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAlertAuditsOlderThanDateCompletedEventHandler(object sender, removeAlertAuditsOlderThanDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAlertAuditsOlderThanDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAlertAuditsOlderThanDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAlertAuditsOlderThanDaysCompletedEventHandler(object sender, removeAlertAuditsOlderThanDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAlertAuditsOlderThanDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAlertAuditsOlderThanDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void retrieveAllServerStatusConfigsCompletedEventHandler(object sender, retrieveAllServerStatusConfigsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveAllServerStatusConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveAllServerStatusConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerStatusConfig[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerStatusConfig[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeKeyCompletedEventHandler(object sender, removeKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addKeyCompletedEventHandler(object sender, addKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getJMSConfigCompletedEventHandler(object sender, getJMSConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getJMSConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getJMSConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JMSSrvCfg Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JMSSrvCfg)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getConfigCompletedEventHandler(object sender, getConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Config Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Config)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getConfig1CompletedEventHandler(object sender, getConfig1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConfig1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConfig1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Config Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Config)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void closeSessionCompletedEventHandler(object sender, closeSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class closeSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal closeSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDepartmentCompletedEventHandler(object sender, getDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Department Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Department)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void collectorStartCompletedEventHandler(object sender, collectorStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class collectorStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal collectorStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void collectorStopCompletedEventHandler(object sender, collectorStopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class collectorStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal collectorStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCollectorStatusCompletedEventHandler(object sender, getCollectorStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCollectorStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCollectorStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getNodeCompletedEventHandler(object sender, getNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Node Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Node)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeNodeCompletedEventHandler(object sender, removeNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateUserCompletedEventHandler(object sender, updateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeServerCompletedEventHandler(object sender, removeServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addUserCompletedEventHandler(object sender, addUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAuditCompletedEventHandler(object sender, getAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateServerCompletedEventHandler(object sender, updateServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchUsersCompletedEventHandler(object sender, searchUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateNodeCompletedEventHandler(object sender, updateNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchAuditsCompletedEventHandler(object sender, searchAuditsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchAuditsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchAuditsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditBase[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditBase[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addServerCompletedEventHandler(object sender, addServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAuditCompletedEventHandler(object sender, removeAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeConfigCompletedEventHandler(object sender, removeConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateConfigCompletedEventHandler(object sender, updateConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateGroupCompletedEventHandler(object sender, updateGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchFilesCompletedEventHandler(object sender, searchFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeFileCompletedEventHandler(object sender, removeFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchNodesCompletedEventHandler(object sender, searchNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Node[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Node[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateFileCompletedEventHandler(object sender, updateFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTransferCompletedEventHandler(object sender, getTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transfer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transfer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addTransferCompletedEventHandler(object sender, addTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addAlertCompletedEventHandler(object sender, addAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateAlertCompletedEventHandler(object sender, updateAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeAlertCompletedEventHandler(object sender, removeAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAlertCompletedEventHandler(object sender, getAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Alert Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Alert)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateKeyCompletedEventHandler(object sender, updateKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserKeyCompletedEventHandler(object sender, getUserKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getServerKeyCompletedEventHandler(object sender, getServerKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getSystemKeyCompletedEventHandler(object sender, getSystemKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSystemKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSystemKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void searchKeysCompletedEventHandler(object sender, searchKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Key[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Key[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LDAPSyncUserCompletedEventHandler(object sender, LDAPSyncUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LDAPSyncUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LDAPSyncUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getBWSessionCompletedEventHandler(object sender, getBWSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBWSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBWSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addNodeCompletedEventHandler(object sender, addNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addFileCompletedEventHandler(object sender, addFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591